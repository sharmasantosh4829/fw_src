import time, os, re 
import sys, threading, thread, platform
import xmlrpclib, socket, ssl, traceback
from urlparse import urlparse
# import wmi
sys.path.append(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "header"))
sys.path.append(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "lib"))

from Logger import *
from Utilities import *
from EmailUtility import *
from Archive import *
from FTPUtil import *
from CmdLineOptions import *
from WirelessProfiler import *
from Report import *
import WeMoIdentificationSchema
from WeMoIdentificationSchema import *
import WeMoDataBaseConsts
from WeMoDataBase import *
from RulesDBLib import *
import ssdp
from WeMoAppUtility import *
from HTTPUtility import *
from ConsoleLogger import ConsoleLogger
from Confluence import *
from AutomationDB import *
from JNAP import *
import WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS
from WeMoFirmwareUsage import *
######################################
#iOS and Android Class initialization#
######################################
from IOSWeMoApp_Generic import *
from IOSWeMoApp_Insight import *
from IOSWeMoApp_LedBridge import *
from IOSWeMoApp_Dimmer import *
from IOSWeMoApp_Maker import *
from IOSWeMoApp_Nest import *
from IOSWeMoApp_HeaterA import *
from IOSWeMoApp_HeaterB import *
from IOSWeMoApp_Humidifier import *
from IOSWeMoApp_AirPurifier import *
from IOSWeMoApp_CoffeeMaker import *
from IOSWeMoApp_SlowCooker import *
from AndroidWeMoApp_Generic import *
from AndroidWeMoApp_Insight import *
from AndroidWeMoApp_LedBridge import *
from AndroidWeMoApp_Maker import *
from AndroidWeMoApp_Nest import *
from AndroidWeMoApp_HeaterA import *
from AndroidWeMoApp_HeaterB import *
from AndroidWeMoApp_Humidifier import *
from AndroidWeMoApp_AirPurifier import *
from AndroidWeMoApp_CoffeeMaker import *
from AndroidWeMoApp_SlowCooker import *
from AndroidWeMoApp_Dimmer import *
###########################
#UpNp Class initialization#
###########################
from UpnpApi import *
from UpnpApi_insight import *
from UpnpApi_LightSwitch import *
from UpnpApi_Dimmer import *
from BridgeServiceUpnpApi import *
from WeMoSmartUpnpApi import *
from SlowCookerServiceUpnpApi import *
from nest import *

import datetime

try:
    print "======================================================================================"
    print "Read the Constants from the Config File for SNS, INSIGHT, MOTION ,LIGHT-SWITCH & LINK"
    print "======================================================================================"
    if not os.path.exists(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "config", "WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.cfg")):
        raise Exception("The WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.cfg file does not exist in the config folder.\nPlease include the WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.cfg file in the config folder")
    fileReader = open(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "config", "WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.cfg"), "r")
    lines = fileReader.readlines()
    fileReader.close()
    assert len(lines) != 0
    for line in lines:
        if line.strip().find("#") == 0:
            continue
        elif line.strip() == "":
            continue
        else:
            exec(line)
    print "======================================"
except:
    print "Exception Type: " + str(sys.exc_info()[0])
    print "Exception Details: " + str(sys.exc_info()[1])
    print "Exception Traceback: " + str(traceback.extract_tb(sys.exc_info()[2]))
    os._exit(1)

#######################
#WEMO AUTOMATION CLASS#
#######################
class WEMO_APP_AUTOMATION_SNS_INSIGHT_LS():

    def __init__(self, name, description):
        """
        Initialization function for the Wemo App Automation
        @param name: The name of the project.
        @type name:  String
        @param description: The description of the project.
        @type description:  String
        """
        self.name = name
        self.archive = Archive()
        #Deleting the loose files from the log folder
        self.archive.ArchiveLogs("WeMo_App_Automation_Discarded_Files")
        #Creating the Log File for the Wemo Automation Project 
        self.WeMoAppAutomationLog = Logger(os.path.basename("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py").replace(".py",".log"))
        
        #Creating the Log Directory to store the results and the logs
        self.WeMoAppAutomationLog.Info("========================================")
        self.WeMoAppAutomationLog.Info("WeMo App Automation Log Directory Information.")
        self.LogDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "logs")
        self.WeMoAppAutomationLog.Info("WeMo App Automation Log Directory:%s"%self.LogDir)
        if not os.path.exists(self.LogDir):
            os.mkdir(self.LogDir)
        self.FailedTestCaseDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "logs", "failedTestCases")
        self.WeMoAppAutomationLog.Info("Failed Test Case Directory:%s"%self.FailedTestCaseDir)
        if not os.path.exists(self.FailedTestCaseDir):
            os.mkdir(self.FailedTestCaseDir)
        self.FailedTestCaseLogDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "logs", "failedTestCasesLogs")
        self.WeMoAppAutomationLog.Info("Failed Test Case Log Directory:%s"%self.FailedTestCaseLogDir)
        if not os.path.exists(self.FailedTestCaseLogDir):
            os.mkdir(self.FailedTestCaseLogDir)
        self.WeMoAppAutomationLog.Info("========================================")
        
        #WemoAppAutomationTDTool Versioning, Test PC Name, Test Platform
        self.WeMoAppAutomationLog.Info("========================================")
        self.WeMoAppAutomationLog.Info("WeMo App Automation Versioning, Test PC Name, Test Platform Information")
        self.WeMoAppAutomationTDToolVersion = "2.0"
        self.TestPCName = socket.gethostname() 
        self.TestPCPlatform = platform.platform()
        self.WeMoAppAutomationLog.Info("Name of the project is:%s"%name)
        self.WeMoAppAutomationLog.Info("Description of the project is:%s"%description)
        self.WeMoAppAutomationLog.Info("WeMoAppAutomation Version:%s"%self.WeMoAppAutomationTDToolVersion)
        self.WeMoAppAutomationLog.Info("Test PC Platform:%s"%self.TestPCPlatform)
        self.WeMoAppAutomationLog.Info("Test PC Name:%s"%self.TestPCName)
        self.WeMoAppAutomationLog.Info("========================================")
        
        #Creating the Command Line Options
        self.WeMoAppAutomationLog.Info("Creating the Command Line Options.")
        self.cmdLine = CmdLineOptions(OptionsFile = "WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.options")
        
        if self.cmdLine.options.noemail == True:
            self.sendNoEmail = True
        else:
            self.sendNoEmail = False
            
        self.WeMoAppAutomationLog.Info("========================================") 
        #Initiating the Utilities, EmailUtility, FTPUtil, Wireless Profiler and the wemoUpnp Class
        self.WeMoAppAutomationLog.Info("Initiating the Utilities, EmailUtility, FTPUtil, Wireless Profiler, UpnpApi, UpnpApi_insight, BridgeServiceUpnpApi Class and HTTPUtility Class.")
        try:
            self.util = Utilities()
            if self.sendNoEmail == False:
                self.emailUtil = EmailUtility(EmailListFile = "WeMoAppAutomation.EmailList")
            self.ftpUtil = FTPUtil()
            self.wp = WirelessProfiler()
            self.wemoUpnp = UpnpApi(discoveryType=None)
            self.wemoUpnp_Insight = UpnpApi_insight(discoveryType=None)
            self.wemoUpnp_LightSwitch = UpnpApi_LightSwitch(discoveryType=None)
            self.wemoUpnp_Dimmer = UpnpApi_Dimmer(discoveryType=None)
            self.wemoUpnp_LedBridge = BridgeServiceUpnpApi(discoveryType=None)
            self.wemoSmartUpnp = WeMoSmartUpnpApi(discoveryType=None)
            self.SlowCookerUpNp = SlowCookerServiceUpnpApi(discoveryType=None)
            self.rulesDB = RulesDBLib(discoveryType=None)
            self.wemoAppUtility = WeMoAppUtility()
            self.objJNAP = JNAP()
            self.wemoAppHttpUtility = HTTPUtility() 
            self.wemoCloud = None
            self.WeMoFirmwareUsage = WeMoFirmwareUsage(WeMoStatsFile = "WeMoFirmwareUsage.cfg")
            self.wp.setLogger(self.WeMoAppAutomationLog)
            self.wemoUpnp.setLogger(self.WeMoAppAutomationLog)
            self.wemoUpnp_Insight.setLogger(self.WeMoAppAutomationLog)
            self.wemoUpnp_LightSwitch.setLogger(self.WeMoAppAutomationLog)
            self.wemoUpnp_Dimmer.setLogger(self.WeMoAppAutomationLog)
            self.wemoUpnp_LedBridge.setLogger(self.WeMoAppAutomationLog)
            self.wemoSmartUpnp.setLogger(self.WeMoAppAutomationLog)
            self.SlowCookerUpNp.setLogger(self.WeMoAppAutomationLog)
            self.rulesDB.setLogger(self.WeMoAppAutomationLog)
            self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
            self.wemoAppHttpUtility.setLogger(self.WeMoAppAutomationLog)
            self.WeMoFirmwareUsage.setLogger(self.WeMoAppAutomationLog)
        except:
            if self.sendNoEmail == False:
                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")  
            self.WeMoAppAutomationLog.LogException()
            os._exit(1)
        self.WeMoAppAutomationLog.Info("========================================")
        
        #TestPlan Document, Html and CSV Report Names
        self.TestPlanDocument = ""
        self.csvReport = "WeMo_App_Automation"
        self.htmlReport = "WeMo_App_Automation"
        self.WeMoDefaultIP = "10.22.22.1:49152"
        
        #check deviceType options
        self.supportedDevices = self.cmdLine.options.supporteddevicetype.split(",")
        if len(self.supportedDevices) != 16:
            self.WeMoAppAutomationLog.Info("This framework supports 16 products namely Switch|SwitchV2|Motion|Insight|LightSwitch|Link|Maker|InsightV2|Dimmer|SlowCooker|Humidifier|HeaterA|HeaterB|AirPurifier|CoffeeMaker|Nest.Please add the missing devices.")
            os._exit(1)
        self.WeMoAppAutomationLog.Info("Supported Devices:%s."%','.join(self.supportedDevices))
        self.devicesInNetwork = self.cmdLine.options.devicesinnetwork.split(",")
        if len(self.devicesInNetwork) < 1:
            self.WeMoAppAutomationLog.Info("There should be at least 1 device including the Motion in the network for the test to be executed. It can either be Switch|SwitchV2|Insight|InsightV2|LightSwitch|Dimmer|SlowCooker|Humidifier|HeaterA|HeaterB|AirPurifier|CoffeeMaker.Please add at least one device.")
            os._exit(1)
        for device in self.devicesInNetwork:
            if device not in self.supportedDevices:
                self.WeMoAppAutomationLog.Info("The device:%s in the network is not supported by this framework.\nThis framework supports 16 products namely Switch|SwitchV2|Motion|Insight|LightSwitch|Link|Maker|InsightV2|Dimmer|SlowCooker|Humidifier|HeaterA|HeaterB|AirPurifier|CoffeeMaker|Nest.\nDevice in the network should be one of those products."%device)
                os._exit(1)
        self.WeMoAppAutomationLog.Info("Devices in the Network:%s."%','.join(self.devicesInNetwork))

        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork) or (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork) or (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork) or \
         (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork) or (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork) or \
         (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork) or (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION not in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Motion has to be in the list of devices in the network. Please add it to self.devicesInNetwork list")
                os._exit(1)
        self.serialNumberList = self.cmdLine.options.serialnumber.split(",")
        if len(self.serialNumberList) < 1:
            self.WeMoAppAutomationLog.Info("Please give the Serial Number of the Devices in the Network. Serial Number should correspond to the devices in network one to one.")
            os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
            self.WeMoAppAutomationLog.Info("Link is selected as a part of the Devices In the Network to be tested.")
            self.deviceIdList = self.cmdLine.options.bulbdeviceid.split(",")
            if self.deviceIdList[0] == '':
                self.deviceIdList = []
            self.osram_regular_deviceIdList = self.cmdLine.options.osram_regular_bulbdeviceid.split(",")
            if self.osram_regular_deviceIdList[0] == '':
                self.osram_regular_deviceIdList = []
            self.osram_ttb_deviceIdList = self.cmdLine.options.osram_ttb_bulbdeviceid.split(",")
            if self.osram_ttb_deviceIdList[0] == '':
                self.osram_ttb_deviceIdList = []
            self.osram_flex_deviceIdList = self.cmdLine.options.osram_flex_bulbdeviceid.split(",")
            if self.osram_flex_deviceIdList[0] == '':
                self.osram_flex_deviceIdList = []
            self.osram_gardenspot_deviceIdList = self.cmdLine.options.osram_gardenspot_bulbdeviceid.split(",")
            if self.osram_gardenspot_deviceIdList[0] == '':
                self.osram_gardenspot_deviceIdList = []
            self.bulbcontrollerList = self.cmdLine.options.bulbcontrollerserialnumber.split(",")
            if self.bulbcontrollerList[0] == '':
                self.bulbcontrollerList = []
            self.osram_regular_bulbcontrollerList = self.cmdLine.options.osram_regular_bulbcontrollerserialnumber.split(",")
            if self.osram_regular_bulbcontrollerList[0] == '':
                self.osram_regular_bulbcontrollerList = []
            self.osram_ttb_bulbcontrollerList = self.cmdLine.options.osram_ttb_bulbcontrollerserialnumber.split(",")
            if self.osram_ttb_bulbcontrollerList[0] == '':
                self.osram_ttb_bulbcontrollerList = []
            self.osram_flex_bulbcontrollerList = self.cmdLine.options.osram_flex_bulbcontrollerserialnumber.split(",")
            if self.osram_flex_bulbcontrollerList[0] == '':
                self.osram_flex_bulbcontrollerList = []
            self.osram_gardenspot_bulbcontrollerList = self.cmdLine.options.osram_gardenspot_bulbcontrollerserialnumber.split(",")
            if self.osram_gardenspot_bulbcontrollerList[0] == '':
                self.osram_gardenspot_bulbcontrollerList = []
            if (len(self.deviceIdList) < 1) and (len(self.osram_regular_deviceIdList) < 1) and (len(self.osram_ttb_deviceIdList) < 1) and (len(self.osram_flex_deviceIdList) < 1) and (len(self.osram_gardenspot_deviceIdList) < 1):
                self.WeMoAppAutomationLog.Info("There should be at least 1 Led Bulb (WeMo Bulb or Osram Bulb) in the Network to be tested.")
                os._exit(1)
            if (len(self.bulbcontrollerList) < 1) and (len(self.osram_regular_bulbcontrollerList) < 1) and (len(self.osram_ttb_bulbcontrollerList) < 1) and (len(self.osram_flex_bulbcontrollerList) < 1) and (len(self.osram_gardenspot_bulbcontrollerList) < 1):
                self.WeMoAppAutomationLog.Info("There should be at least 1 Bulb Controller (for WeMo Bulb or Osram Bulb) as 1 Led Bulb (WeMo or Osram Bulb) is at least needed when the Link is in the network.")
                os._exit(1)
            if len(self.deviceIdList) != len(self.bulbcontrollerList):
                self.WeMoAppAutomationLog.Info("len(self.deviceIdList) != len(self.bulbcontrollerList).")
                os._exit(1)
            if len(self.osram_regular_deviceIdList) != len(self.osram_regular_bulbcontrollerList):
                self.WeMoAppAutomationLog.Info("len(self.osram_regular_deviceIdList) != len(self.osram_regular_bulbcontrollerList).")
                os._exit(1)
            if len(self.osram_ttb_deviceIdList) != len(self.osram_ttb_bulbcontrollerList):
                self.WeMoAppAutomationLog.Info("len(self.osram_ttb_deviceIdList) != len(self.osram_ttb_bulbcontrollerList).")
                os._exit(1)
            if len(self.osram_flex_deviceIdList) != len(self.osram_flex_bulbcontrollerList):
                self.WeMoAppAutomationLog.Info("len(self.osram_flex_deviceIdList) != len(self.osram_flex_bulbcontrollerList).")
                os._exit(1)
            if len(self.osram_gardenspot_deviceIdList) != len(self.osram_gardenspot_bulbcontrollerList):
                self.WeMoAppAutomationLog.Info("len(self.osram_gardenspot_deviceIdList) != len(self.osram_gardenspot_bulbcontrollerList).")
                os._exit(1)
        if self.cmdLine.options.collectseriallogs == True:
            self.comPortList = self.cmdLine.options.comportofdevice.split(",")
        try:
            self.WeMoAppAutomationLog.Info("==========================================================")
            self.WeMoAppAutomationLog.Info("Getting the Home Network Details, Smart Device, WeMo Environment, WeMo Controller, DUT Controller and Motion Simulator info from the Options file")
            self.WeMoAppAutomationLog.Info("==========================================================")
            assert self.cmdLine.options.localrouterssid != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID = self.cmdLine.options.localrouterssid
            self.WeMoAppAutomationLog.Info("Local Router Ssid:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID)
            assert self.cmdLine.options.localrouterpassword != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword = self.cmdLine.options.localrouterpassword
            self.WeMoAppAutomationLog.Info("Local Router Password:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword)
            assert self.cmdLine.options.localroutersecurity != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity = self.cmdLine.options.localroutersecurity
            self.WeMoAppAutomationLog.Info("Router Security:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity in ["WPA2","WPA2PSK"]:
                self.WeMoAppAutomationLog.Critical("localWirelessSSIDSecurity should take one of the following as a value: <WPA2|WPA2PSK>.Please use one of the following values in the 'WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.options' file in the config folder.\nAborting the Run!!.")
                os._exit(1)
            assert self.cmdLine.options.localroutermacaddress != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.routerMac = self.cmdLine.options.localroutermacaddress
            self.WeMoAppAutomationLog.Info("Router Mac Adress:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.routerMac)
            assert self.cmdLine.options.remoterouterssid != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.remoteWirelessSSID = self.cmdLine.options.remoterouterssid
            self.WeMoAppAutomationLog.Info("Remote Router Ssid:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.remoteWirelessSSID)
            assert self.cmdLine.options.remoterouterpassword != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.remoteWirelessPassword = self.cmdLine.options.remoterouterpassword
            self.WeMoAppAutomationLog.Info("Remote Router Password:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.remoteWirelessPassword)
            assert self.cmdLine.options.no_wan_routerssid != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessSSID = self.cmdLine.options.no_wan_routerssid
            self.WeMoAppAutomationLog.Info("Local Router Ssid With No Wan Connection:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessSSID)
            assert self.cmdLine.options.no_wan_routerpassword != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessPassword = self.cmdLine.options.no_wan_routerpassword
            self.WeMoAppAutomationLog.Info("Local Router Password With No Wan Connection:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessPassword)
            assert self.cmdLine.options.no_wan_routersecurity != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessSSIDSecurity = self.cmdLine.options.no_wan_routersecurity
            self.WeMoAppAutomationLog.Info("Security of Local Router With No Wan Connection:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessSSIDSecurity)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANWirelessSSIDSecurity in ["WPA2","WPA2PSK"]:
                self.WeMoAppAutomationLog.Critical("no_wan_routersecurity should take one of the following as a value: <WPA2|WPA2PSK>.Please use one of the following values in the 'WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.options' file in the config folder.\nAborting the Run!!.")
                os._exit(1)
            assert self.cmdLine.options.no_wan_remote_routerssid != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessSSID = self.cmdLine.options.no_wan_remote_routerssid
            self.WeMoAppAutomationLog.Info("Remote Router Ssid With No Wan Connection:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessSSID)
            assert self.cmdLine.options.no_wan_remoterouterpassword != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessPassword = self.cmdLine.options.no_wan_remoterouterpassword
            self.WeMoAppAutomationLog.Info("Remote Router Password With No Wan Connection:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessPassword)
            assert self.cmdLine.options.no_wan_remoteroutersecurity != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessSSIDSecurity = self.cmdLine.options.no_wan_remoteroutersecurity
            self.WeMoAppAutomationLog.Info("Security of Remote Router With No Wan Connection:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessSSIDSecurity)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.noWANRemoteWirelessSSIDSecurity in ["WPA2","WPA2PSK"]:
                self.WeMoAppAutomationLog.Critical("no_wan_remoteroutersecurity should take one of the following as a value: <WPA2|WPA2PSK>.Please use one of the following values in the 'WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.options' file in the config folder.\nAborting the Run!!.")
                os._exit(1)
            assert self.cmdLine.options.wifiinterface != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE = self.cmdLine.options.wifiinterface
            self.WeMoAppAutomationLog.Info("Server Wifi Interface:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
            assert self.cmdLine.options.appversion != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION = self.cmdLine.options.appversion
            self.WeMoAppAutomationLog.Info("App Version:%s"% WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION)
            assert self.cmdLine.options.apprelease != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE = self.cmdLine.options.apprelease
            self.WeMoAppAutomationLog.Info("App Release:%s"% WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE)
            assert self.cmdLine.options.applink != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK = self.cmdLine.options.applink
            self.WeMoAppAutomationLog.Info("App Link:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK)
            assert self.cmdLine.options.lowerappversion != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Lower_App_Version = self.cmdLine.options.lowerappversion
            self.WeMoAppAutomationLog.Info("App Link:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Lower_App_Version)
            assert self.cmdLine.options.environment != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT = self.cmdLine.options.environment
            self.WeMoAppAutomationLog.Info("Test Environment:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT in ["PROD","STG","QA"]:
                self.WeMoAppAutomationLog.Critical("WEMO_APP_ENVIRONMENT should take one of the following as a value: <PROD|STG|QA>.Please use one of the following values in the 'WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.options' file in the config folder.\nAborting the Run!!.")
                os._exit(1)
            self.wemoCloud = WeMoDataBase(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT)
            self.wemoAppUtility.verifyDnsOnTheServerWithTheWeMoAppEnvironment(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT)
            # if self.wemoAppUtility.result != True:
            #     self.WeMoAppAutomationLog.Critical("WEMO_APP_ENVIRONMENT:%s should point to the right DNS on the Router. Please set the right DNS as per the environment selected!!."%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT)
            #     os._exit(1)
            # assert self.wemoAppUtility.result == True
            self.WeMoAppAutomationLog.Info("WeMo App Environment on which Led Bridge Automation is going to take place is:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT)
            assert self.cmdLine.options.runtype != ""
            if not self.cmdLine.options.runtype in ["Sanity","Regression"]:
                self.WeMoAppAutomationLog.Critical("RUN TYPE either be one of the following as a value: <Sanity|Regression>.Please use one of the following values in the 'WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.options' file in the config folder.\nAborting the Run!!.")
                os._exit(1)
            assert self.cmdLine.options.smartdevice != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone = self.cmdLine.options.smartdevice
            self.WeMoAppAutomationLog.Info("SMART DEVICE:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone in ["iOS","Android"]:
                self.WeMoAppAutomationLog.Critical("Smart Device should take one of the following as a value: <iOS|Android>.Please use one of the following values in the 'WeMoAppAutomation.cfg' file in the config folder.")
                self.WeMoAppAutomationLog.Critical("Aborting the App Automation Run.")
                os._exit(1)
            self.WeMoAppAutomationLog.Info("Smart Phone on which the test is performed is:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone)
            assert self.cmdLine.options.smartdevice_osversion != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION = self.cmdLine.options.smartdevice_osversion
            self.WeMoAppAutomationLog.Info("SMART DEVICE OS VERSION:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION)
            assert self.cmdLine.options.primarysmartphone != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName = self.cmdLine.options.primarysmartphone
            self.WeMoAppAutomationLog.Info("PRIMARY SMART PHONE NAME:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName) 
            if self.cmdLine.options.secondarysmartphone != "":
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName = self.cmdLine.options.secondarysmartphone
                self.WeMoAppAutomationLog.Info("SECONDARY SMARTPHONE NAME:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
            else:
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName = None
                self.WeMoAppAutomationLog.Info("There is no Secondary Phone in the Automation Run") 
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                assert self.cmdLine.options.secondarysmartphoneDescription != ""
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SECONDARY_SMART_DEVICE_DESCRIPTION = self.cmdLine.options.secondarysmartphoneDescription
            assert self.cmdLine.options.smartphoneport != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort = int(self.cmdLine.options.smartphoneport)
            self.WeMoAppAutomationLog.Info("SMART PHONE PORT:%d"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
            assert self.cmdLine.options.smartDeviceDescription != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION = self.cmdLine.options.smartDeviceDescription
            self.WeMoAppAutomationLog.Info("SMART PHONE DEVICE DESCRIPTION:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION)
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier = "WeMo"
                self.WeMoAppAutomationLog.Info("iOS WEMO APP IDENTIFIER ON %s IS:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier))
            elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier = "com.belkin.wemoandroid/com.belkin.activity.MainActivity"
                self.WeMoAppAutomationLog.Info("Android WEMO APP IDENTIFIER ON %s IS:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)) 
            assert self.cmdLine.options.wemocontrollerserialnumber != ""
            assert self.cmdLine.options.dutcontrollerserialnumber != ""
            assert self.cmdLine.options.motionsimulatorserialnumber != ""
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SERIAL_NUMBER = self.cmdLine.options.wemocontrollerserialnumber
            self.WeMoAppAutomationLog.Info("WEMO CONTROLLER SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SERIAL_NUMBER)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                self.WeMoAppAutomationLog.Error("The WEMO CONTROLLER SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The WEMO CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SERIAL_NUMBER)
                os._exit(1)
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SERIAL_NUMBER[11:14])  
            self.WeMoAppAutomationLog.Info("WEMO CONTROLLER SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SSID)
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SERIAL_NUMBER = self.cmdLine.options.dutcontrollerserialnumber
            self.WeMoAppAutomationLog.Info("DUT CONTROLLER SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SERIAL_NUMBER)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                self.WeMoAppAutomationLog.Error("The DUT CONTROLLER SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The DUT CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SERIAL_NUMBER)
                os._exit(1)
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SERIAL_NUMBER[11:14])  
            self.WeMoAppAutomationLog.Info("DUT CONTROLLER SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SSID)
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SERIAL_NUMBER = self.cmdLine.options.motionsimulatorserialnumber
            self.WeMoAppAutomationLog.Info("MOTION SIMULATOR SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SERIAL_NUMBER)
            if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                self.WeMoAppAutomationLog.Error("The MOTION CONTROLLER SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The MOTION CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SERIAL_NUMBER)
                os._exit(1)
            WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SERIAL_NUMBER[11:14])
            self.WeMoAppAutomationLog.Info("MOTION SIMULATOR SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION_SIMULATOR_SSID)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                if len(self.deviceIdList) > 0:
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SERIAL_NUMBER = self.bulbcontrollerList[0].strip()
                    self.WeMoAppAutomationLog.Info("LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                    if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                        self.WeMoAppAutomationLog.Error("The LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The LED BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                        os._exit(1)
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SERIAL_NUMBER[11:14])  
                    self.WeMoAppAutomationLog.Info("LED_BULB_CONTROLLER_1 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SSID)
                    if len(self.deviceIdList) > 1:
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SERIAL_NUMBER = self.bulbcontrollerList[1].strip()
                        self.WeMoAppAutomationLog.Info("LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                        if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                            self.WeMoAppAutomationLog.Error("The LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The LED BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                            os._exit(1)
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SERIAL_NUMBER[11:14])  
                        self.WeMoAppAutomationLog.Info("LED_BULB_CONTROLLER_2 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SSID)
                
                if len(self.osram_regular_deviceIdList) > 0:
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SERIAL_NUMBER = self.osram_regular_bulbcontrollerList[0].strip()
                    self.WeMoAppAutomationLog.Info("OSRAM_REGULAR_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                    if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                        self.WeMoAppAutomationLog.Error("The OSRAM_REGULAR_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                        os._exit(1)
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[11:14])  
                    self.WeMoAppAutomationLog.Info("OSRAM_REGULAR_LED_BULB_CONTROLLER_1 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SSID)
                    if len(self.osram_regular_deviceIdList) > 1:
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SERIAL_NUMBER = self.osram_regular_bulbcontrollerList[1].strip()
                        self.WeMoAppAutomationLog.Info("OSRAM_REGULAR_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                        if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                            self.WeMoAppAutomationLog.Error("The OSRAM_REGULAR_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                            os._exit(1)
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[11:14])  
                        self.WeMoAppAutomationLog.Info("OSRAM_REGULAR_LED_BULB_CONTROLLER_2 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SSID)
                
                if len(self.osram_ttb_deviceIdList) > 0:
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SERIAL_NUMBER = self.osram_ttb_bulbcontrollerList[0].strip()
                    self.WeMoAppAutomationLog.Info("OSRAM_TTB_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                    if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                        self.WeMoAppAutomationLog.Error("The OSRAM_TTB_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                        os._exit(1)
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[11:14])  
                    self.WeMoAppAutomationLog.Info("OSRAM_TTB_LED_BULB_CONTROLLER_1 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SSID)
                    if len(self.osram_ttb_deviceIdList) > 1:
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SERIAL_NUMBER = self.osram_ttb_bulbcontrollerList[1].strip()
                        self.WeMoAppAutomationLog.Info("OSRAM_TTB_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                        if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                            self.WeMoAppAutomationLog.Error("The OSRAM_TTB_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                            os._exit(1)
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[11:14])  
                        self.WeMoAppAutomationLog.Info("OSRAM_REGULAR_TTB_BULB_CONTROLLER_2 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SSID)
                
                if len(self.osram_flex_deviceIdList) > 0:
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SERIAL_NUMBER = self.osram_flex_bulbcontrollerList[0].strip()
                    self.WeMoAppAutomationLog.Info("OSRAM_FLEX_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                    if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                        self.WeMoAppAutomationLog.Error("The OSRAM_FLEX_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                        os._exit(1)
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[11:14])  
                    self.WeMoAppAutomationLog.Info("OSRAM_FLEX_LED_BULB_CONTROLLER_1 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SSID)
                    if len(self.osram_flex_deviceIdList) > 1:
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SERIAL_NUMBER = self.osram_flex_bulbcontrollerList[1].strip()
                        self.WeMoAppAutomationLog.Info("OSRAM_FLEX_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                        if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                            self.WeMoAppAutomationLog.Error("The OSRAM_FLEX_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                            os._exit(1)
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[11:14])  
                        self.WeMoAppAutomationLog.Info("OSRAM_FLEX_LED_BULB_CONTROLLER_2 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SSID)
                
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SERIAL_NUMBER = self.osram_gardenspot_bulbcontrollerList[0].strip()
                    self.WeMoAppAutomationLog.Info("OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                    if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                        self.WeMoAppAutomationLog.Error("The OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SERIAL_NUMBER)
                        os._exit(1)
                    WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SERIAL_NUMBER[11:14])  
                    self.WeMoAppAutomationLog.Info("OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SSID)
                    if len(self.osram_gardenspot_deviceIdList) > 1:
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SERIAL_NUMBER = self.osram_gardenspot_bulbcontrollerList[1].strip()
                        self.WeMoAppAutomationLog.Info("OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                        if not WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[6:9] in ["K01","K11","K12"]:
                            self.WeMoAppAutomationLog.Error("The OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2 SERIAL NUMBER:%s given in the configuration file is not the right Serial Number.The OSRAM BULB CONTROLLER can either be a Switch or Insight.Aborting the Run.!!"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SERIAL_NUMBER)
                            os._exit(1)
                        WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SSID = "WeMo.%s.%s"%(self.util.getWeMoType(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SERIAL_NUMBER),WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SERIAL_NUMBER[11:14])  
                        self.WeMoAppAutomationLog.Info("OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2 SSID:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SSID)
            self.WeMoAppAutomationLog.Info("==========================================================")
        except:
            self.WeMoAppAutomationLog.LogException()
            if self.sendNoEmail == False:
                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
            os._exit(1)
        
        self.WeMoAppAutomationLog.Info("==========================================================")
        self.WeMoAppAutomationLog.Info("WeMo class initialization based on the smart phone and the WeMo Product Type")
        #Initializing the Wemo App class for IOS or Android according to what device is under test
        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
            self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_Generic class")
            try:
                self.iOSPrimaryWeMoApp = IOSWeMoApp_Generic(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                self.PrimarySmartDeviceInfo = self.iOSPrimaryWeMoApp._getTheSmartDeviceInfo()
                self.WeMoAppAutomationLog.Info("IOS Smart Device on which the WeMo App Automation Test is carried out is:%s"%self.PrimarySmartDeviceInfo)
            except:
                self.WeMoAppAutomationLog.LogException()
                if self.sendNoEmail == False:
                    self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")  
                os._exit(1)
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                try:
                    self.iOSSecondaryWeMoApp = IOSWeMoApp_Generic(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    self.SecondarySmartDeviceInfo = self.iOSSecondaryWeMoApp._getTheSmartDeviceInfo()
                    self.WeMoAppAutomationLog.Info("IOS Secondary Smart Device on which the WeMo App Automation Test is carried out is:%s"%self.SecondarySmartDeviceInfo)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_Nest class for Nest")
                try:
                    self.iOSPrimaryWeMoApp_Nest = IOSWeMoApp_Nest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None:
                    try:
                        self.iOSSecondaryWeMoApp_Nest = IOSWeMoApp_Nest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork) or (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_Insight class for Insight and Sensors")
                try:
                    self.iOSPrimaryWeMoApp_Insight = IOSWeMoApp_Insight(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_Insight = IOSWeMoApp_Insight(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_Dimmer class for Dimmer")
                try:
                    self.iOSPrimaryWeMoApp_Dimmer = IOSWeMoApp_Dimmer(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None:
                    try:
                        self.iOSSecondaryWeMoApp_Dimmer = IOSWeMoApp_Dimmer(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")

            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_LedBridge class for Link and Sensors")
                try:
                    self.iOSPrimaryWeMoApp_Link = IOSWeMoApp_LedBridge(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_Link = IOSWeMoApp_LedBridge(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_Maker class for Maker")
                try:
                    self.iOSPrimaryWeMoApp_Maker = IOSWeMoApp_Maker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_Maker = IOSWeMoApp_Maker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_SlowCooker class for Slow Cooker")
                try:
                    self.iOSPrimaryWeMoApp_SlowCooker = IOSWeMoApp_SlowCooker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_SlowCooker = IOSWeMoApp_SlowCooker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()                        
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_AirPurifier class for Air Purifier")
                try:
                    self.iOSPrimaryWeMoApp_AirPurifier = IOSWeMoApp_AirPurifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_AirPurifier = IOSWeMoApp_AirPurifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_Humidifier class for Humidifier")
                try:
                    self.iOSPrimaryWeMoApp_Humidifier = IOSWeMoApp_Humidifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_Humidifier = IOSWeMoApp_Humidifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_HeaterA class for HeaterA")
                try:
                    self.iOSPrimaryWeMoApp_HeaterA = IOSWeMoApp_HeaterA(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_HeaterA = IOSWeMoApp_HeaterA(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_HeaterB class for HeaterB")
                try:
                    self.iOSPrimaryWeMoApp_HeaterB = IOSWeMoApp_HeaterB(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_HeaterB = IOSWeMoApp_HeaterB(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")     
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the IOSWeMoApp_CoffeeMaker class for CoffeeMaker")
                try:
                    self.iOSPrimaryWeMoApp_CoffeeMaker = IOSWeMoApp_CoffeeMaker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                       
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.iOSSecondaryWeMoApp_CoffeeMaker = IOSWeMoApp_CoffeeMaker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                       
                        os._exit(1) 
                else:
                    self.WeMoAppAutomationLog.Info("The Second IOS Smart Phone is not being used.")
        elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
            self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_Generic class for Switch and Sensors")
            try:
                self.AndroidPrimaryWeMoApp = AndroidWeMoApp_Generic(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                self.PrimarySmartDeviceInfo = self.AndroidPrimaryWeMoApp._getTheSmartDeviceInfo()
                self.WeMoAppAutomationLog.Info("Android Primary Smart Device on which the WeMo App Automation Test is carried out is:%s"%self.PrimarySmartDeviceInfo)
            except:
                self.WeMoAppAutomationLog.LogException()
                if self.sendNoEmail == False:
                    self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                os._exit(1)
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                try:
                    self.AndroidSecondaryWeMoApp = AndroidWeMoApp_Generic(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    self.SecondarySmartDeviceInfo = self.AndroidSecondaryWeMoApp._getTheSmartDeviceInfo()
                    self.WeMoAppAutomationLog.Info("Android Secondary Smart Device on which the WeMo App Automation Test is carried out is:%s"%self.SecondarySmartDeviceInfo)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_Nest class for the Nest")
                try:
                    self.AndroidPrimaryWeMoApp_Nest = AndroidWeMoApp_Nest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)

                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None:
                    try:
                        self.AndroidSecondaryWeMoApp_Nest = AndroidWeMoApp_Nest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork) or (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_Insight class for the Insight and the Sensors")
                try:
                    self.AndroidPrimaryWeMoApp_Insight = AndroidWeMoApp_Insight(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                    
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_Insight = AndroidWeMoApp_Insight(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_Dimmer class for Dimmer")
                try:
                    self.AndroidPrimaryWeMoApp_Dimmer = AndroidWeMoApp_Dimmer(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None:
                    try:
                        self.AndroidSecondaryWeMoApp_Dimmer = AndroidWeMoApp_Dimmer(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Androidss Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_LedBridge class for the Link and the Sensors")
                try:
                    self.AndroidPrimaryWeMoApp_Link = AndroidWeMoApp_LedBridge(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                    
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_Link = AndroidWeMoApp_LedBridge(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_Maker class for the Maker")
                try:
                    self.AndroidPrimaryWeMoApp_Maker = AndroidWeMoApp_Maker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                    os._exit(1)
                    
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_Maker = AndroidWeMoApp_Maker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_SlowCooker class for Slow Cooker")
                try:
                    self.AndroidPrimaryWeMoApp_SlowCooker = AndroidWeMoApp_SlowCooker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_SlowCooker = AndroidWeMoApp_SlowCooker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.") 
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_AirPurifier class for Air Purifier")
                try:
                    self.AndroidPrimaryWeMoApp_AirPurifier = AndroidWeMoApp_AirPurifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                    os._exit(1)
                
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_AirPurifier = AndroidWeMoApp_AirPurifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                        os._exit(1) 
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_Humidifier class for Humidifier")
                try:
                    self.AndroidPrimaryWeMoApp_Humidifier = AndroidWeMoApp_Humidifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                    os._exit(1)
                
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_Humidifier = AndroidWeMoApp_Humidifier(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_HeaterA class for HeaterA")
                try:
                    self.AndroidPrimaryWeMoApp_HeaterA = AndroidWeMoApp_HeaterA(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                    os._exit(1)
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_HeaterA = AndroidWeMoApp_HeaterA(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                        os._exit(1) 
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_HeaterB class for HeaterB")
                try:
                    self.AndroidPrimaryWeMoApp_HeaterB = AndroidWeMoApp_HeaterB(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                    os._exit(1)
                
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_HeaterB = AndroidWeMoApp_HeaterB(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                self.WeMoAppAutomationLog.Info("Initializing the AndroidWeMoApp_CoffeeMaker class for CoffeeMaker")
                try:
                    self.AndroidPrimaryWeMoApp_CoffeeMaker = AndroidWeMoApp_CoffeeMaker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                except:
                    self.WeMoAppAutomationLog.LogException()
                    if self.sendNoEmail == False:   
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                    os._exit(1)
                
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName!=None: 
                    try:
                        self.AndroidSecondaryWeMoApp_CoffeeMaker = AndroidWeMoApp_CoffeeMaker(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhonePort)
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        if self.sendNoEmail == False:   
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
                        os._exit(1)
                else:
                    self.WeMoAppAutomationLog.Info("The Second Android Smart Phone is not being used.")
        else:
            if self.sendNoEmail == False:
                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","The Smart Phone is neither IOS nor Android. Supported Smart Phones are Android and IOS.\n","admin")
            self.WeMoAppAutomationLog.Error("The Smart Phone is neither IOS nor Android. Supported Smart Phones are Android and IOS.")
            os._exit(1)
        self.WeMoAppAutomationLog.Info("==========================================================")
        
        self.WeMoAppAutomationLog.Info("==========================================================")
        self.WeMoAppAutomationLog.Info("TEST CASE DIRECTORY ASSIGNMENT BASED ON THE SMART PHONE")
        #The path to the Test Case Directory where all the test cases are.
        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
            if self.cmdLine.options.runtype == "Sanity":
                self.TestCaseDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "testcases", "iOS_WEMO_APP_AUTOMATION_SNS_INSIGHT_LS","Sanity")
                self.WeMoAppAutomationLog.Info("WeMo App Test Case Directory iOS Smart Phone for Sanity Test Run Type:%s"%self.TestCaseDir)
                if not os.path.exists(self.TestCaseDir):
                    self.WeMoAppAutomationLog.Critical("WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir)
                    if self.sendNoEmail == False:              
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir,"admin")
                    os._exit(1)
            if self.cmdLine.options.runtype == "Regression":
                self.TestCaseDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "testcases", "iOS_WEMO_APP_AUTOMATION_SNS_INSIGHT_LS","Regression")
                self.WeMoAppAutomationLog.Info("WeMo App Test Case Directory for iOS Smart Phone for Regression Test Run Type:%s"%self.TestCaseDir)
                if not os.path.exists(self.TestCaseDir):
                    self.WeMoAppAutomationLog.Critical("WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir)
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir,"admin")
                    os._exit(1)
        elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
            if self.cmdLine.options.runtype == "Sanity":
                self.TestCaseDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "testcases", "ANDROID_WEMO_APP_AUTOMATION_SNS_INSIGHT_LS","Sanity")
                self.WeMoAppAutomationLog.Info("WeMo App Test Case Directory Android Smart Phone for Sanity Test Run Type:%s"%self.TestCaseDir)
                if not os.path.exists(self.TestCaseDir):
                    self.WeMoAppAutomationLog.Critical("WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir)
                    if self.sendNoEmail == False:             
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir,"admin")
                    os._exit(1)
            if self.cmdLine.options.runtype == "Regression":
                self.TestCaseDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "testcases", "ANDROID_WEMO_APP_AUTOMATION_SNS_INSIGHT_LS","Regression")
                self.WeMoAppAutomationLog.Info("WeMo App Test Case Directory for Android Smart Phone for Regression Test Run Type:%s"%self.TestCaseDir)
                if not os.path.exists(self.TestCaseDir):
                    self.WeMoAppAutomationLog.Critical("WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir)
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","WeMo App Test Case Directory:%s does not exist. Aborting the test."%self.TestCaseDir,"admin")
                    os._exit(1)
        else:
            if self.sendNoEmail == False:
                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","The Smart Phone is neither IOS nor Android. Supported Smart Phones are Android and IOS.\n","admin")
            self.WeMoAppAutomationLog.Error("The Smart Phone is neither IOS nor Android. Supported Smart Phones are Android and IOS.")
            os._exit(1)
        self.WeMoAppAutomationLog.Info("==========================================================")
        
        self.WeMoAppAutomationLog.Info("==========================================================")
        self.WeMoAppAutomationLog.Info("GETTING THE WEMO PRODUCT DETAILS FROM THE CONFIGURATION FILE")
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
            self.SENSOR_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION)!=-1:
                    self.SENSOR_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION)[1].strip()          
                    break
            if self.SENSOR_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Motion Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.SENSOR_SERIAL_NUMBER[6:9] not in ["L01","L11"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Motion is not the right one. Please give the right Serial Number. Aborting the test!!"%self.SENSOR_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
            self.SWITCH_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH)!=-1:
                    self.SWITCH_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH)[1].strip()          
                    break
            if self.SWITCH_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Switch Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.SWITCH_SERIAL_NUMBER[6:9] not in ["K01","K11"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Switch is not the right one. Please give the right Serial Number. Aborting the test!!"%self.SWITCH_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
            self.SWITCH_V2_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2)!=-1:
                    self.SWITCH_V2_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2)[1].strip()          
                    break
            if self.SWITCH_V2_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The SwitchV2 Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.SWITCH_V2_SERIAL_NUMBER[6:9] not in ["K01","K11"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the SwitchV2 is not the right one. Please give the right Serial Number. Aborting the test!!"%self.SWITCH_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
            self.INSIGHT_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT)!=-1:
                    self.INSIGHT_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT)[1].strip()          
                    break
            if self.INSIGHT_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Insight Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.INSIGHT_SERIAL_NUMBER[6:9] not in ["K12"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Insight is not the right one. Please give the right Serial Number. Aborting the test!!"%self.INSIGHT_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
            self.INSIGHT_V2_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2)!=-1:
                    self.INSIGHT_V2_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2)[1].strip()          
                    break
            if self.INSIGHT_V2_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Insight Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.INSIGHT_V2_SERIAL_NUMBER[6:9] not in ["K12"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Insight is not the right one. Please give the right Serial Number. Aborting the test!!"%self.INSIGHT_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
            self.LIGHTSWITCH_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH)!=-1:
                    self.LIGHTSWITCH_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH)[1].strip()          
                    break
            if self.LIGHTSWITCH_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Light Switch Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.LIGHTSWITCH_SERIAL_NUMBER[6:9] not in ["K13"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Light Switch is not the right one. Please give the right Serial Number. Aborting the test!!"%self.LIGHTSWITCH_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
            self.DIMMER_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER)!=-1:
                    self.DIMMER_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER)[1].strip()          
                    break
            if self.DIMMER_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Dimmer Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.DIMMER_SERIAL_NUMBER[6:9] not in ["K15"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Dimmer is not the right one. Please give the right Serial Number. Aborting the test!!"%self.DIMMER_SERIAL_NUMBER)
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
            self.LINK_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK)!=-1:
                    self.LINK_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK)[1].strip()          
                    break
            if self.LINK_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Link Serial Number is None. Aborting the test!!")
                os._exit(1)
            if self.LINK_SERIAL_NUMBER[6:9] not in ["B01"]:
                self.WeMoAppAutomationLog.Info("The Serial Number:%s of the Link is not the right one. Please give the right Serial Number. Aborting the test!!"%self.LINK_SERIAL_NUMBER)
                os._exit(1)
            self.wemoUpnp_LedBridge.setSerialNumber(self.LINK_SERIAL_NUMBER)
            if len(self.deviceIdList) > 0:
                self.LED_BULB_DEVICE_ID_1 = self.deviceIdList[0].strip()
                if len(self.deviceIdList) > 1:
                    self.LED_BULB_DEVICE_ID_2 = self.deviceIdList[1].strip()
            if len(self.osram_regular_deviceIdList) > 0:
                self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_1 = self.osram_regular_deviceIdList[0].strip()
                if len(self.osram_regular_deviceIdList) > 1:
                    self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_2 = self.osram_regular_deviceIdList[1].strip()
            if len(self.osram_ttb_deviceIdList) > 0:
                self.OSRAM_TTB_LED_BULB_DEVICE_ID_1 = self.osram_ttb_deviceIdList[0].strip()
                if len(self.osram_ttb_deviceIdList) > 1:
                    self.OSRAM_TTB_LED_BULB_DEVICE_ID_2 = self.osram_ttb_deviceIdList[1].strip()
            if len(self.osram_flex_deviceIdList) > 0:
                self.OSRAM_FLEX_LED_BULB_DEVICE_ID_1 = self.osram_flex_deviceIdList[0].strip()
                if len(self.osram_flex_deviceIdList) > 1:
                    self.OSRAM_FLEX_LED_BULB_DEVICE_ID_2 = self.osram_flex_deviceIdList[1].strip()
            if len(self.osram_gardenspot_deviceIdList) > 0:
                self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_1 = self.osram_gardenspot_deviceIdList[0].strip()
                if len(self.osram_gardenspot_deviceIdList) > 1:
                    self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_2 = self.osram_gardenspot_deviceIdList[1].strip()
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
            self.MAKER_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER)!=-1:
                    self.MAKER_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER)[1].strip()          
                    break
            if self.MAKER_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Maker Serial Number is None. Aborting the test!!")
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
            self.SLOW_COOKER_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER)!=-1:
                    self.SLOW_COOKER_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER)[1].strip()          
                    break
            if self.SLOW_COOKER_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Slow Cooker Serial Number is None. Aborting the test!!")
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
            self.HUMIDIFIER_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER)!=-1:
                    self.HUMIDIFIER_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER)[1].strip()          
                    break
            if self.HUMIDIFIER_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Humidifier Serial Number is None. Aborting the test!!")
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
            self.AIR_PURIFIER_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER)!=-1:
                    self.AIR_PURIFIER_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER)[1].strip()          
                    break
            if self.AIR_PURIFIER_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The Air Purifier Serial Number is None. Aborting the test!!")
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
            self.HEATER_A_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A)!=-1:
                    self.HEATER_A_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A)[1].strip()          
                    break
            if self.HEATER_A_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The HeaterA Serial Number is None. Aborting the test!!")
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
            self.HEATER_B_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B)!=-1:
                    self.HEATER_B_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B)[1].strip()          
                    break
            if self.HEATER_B_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The HeaterB Serial Number is None. Aborting the test!!")
                os._exit(1)
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
            self.COFFEE_MAKER_SERIAL_NUMBER = None
            for serialNumber in self.serialNumberList:
                if serialNumber.find(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER)!=-1:
                    self.COFFEE_MAKER_SERIAL_NUMBER = serialNumber.split("%s:"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER)[1].strip()          
                    break
            if self.COFFEE_MAKER_SERIAL_NUMBER == None:
                self.WeMoAppAutomationLog.Info("The CoffeeMaker Serial Number is None. Aborting the test!!")
                os._exit(1)
        self.WeMoAppAutomationLog.Info("==========================================================")
        
        #Dictionary for the Wemo Device
        self.WemoDevice = {}
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SENSOR_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SWITCH_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SWITCH_V2_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.INSIGHT_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.INSIGHT_V2_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.LIGHTSWITCH_SERIAL_NUMBER        
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.DIMMER_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.LINK_SERIAL_NUMBER
            if len(self.deviceIdList) > 0:
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB] = {}
            if (len(self.osram_regular_deviceIdList) > 0) or (len(self.osram_ttb_deviceIdList) > 0) or (len(self.osram_flex_deviceIdList) > 0) or (len(self.osram_gardenspot_deviceIdList) > 0):
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB] = {}
            if len(self.deviceIdList) > 0:
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1] = {}
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.LED_BULB_DEVICE_ID_1
                if len(self.deviceIdList) > 1:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2] = {}
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.LED_BULB_DEVICE_ID_2
            if len(self.osram_regular_deviceIdList) > 0:
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1] = {}
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_1
                if len(self.osram_regular_deviceIdList) > 1:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2] = {}
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_2        
            if len(self.osram_ttb_deviceIdList) > 0:
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1] = {}
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_TTB_LED_BULB_DEVICE_ID_1
                if len(self.osram_ttb_deviceIdList) > 1:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2] = {}
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_TTB_LED_BULB_DEVICE_ID_2    
            if len(self.osram_flex_deviceIdList) > 0:
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1] = {}
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_FLEX_LED_BULB_DEVICE_ID_1
                if len(self.osram_flex_deviceIdList) > 1:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2] = {}
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_FLEX_LED_BULB_DEVICE_ID_2
            if len(self.osram_gardenspot_deviceIdList) > 0:
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1] = {}
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_1
                if len(self.osram_gardenspot_deviceIdList) > 1:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2] = {}
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_2
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.MAKER_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SLOW_COOKER_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HUMIDIFIER_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HUMIDIFIER_B_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.AIR_PURIFIER_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HEATER_A_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HEATER_B_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER] = {}
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.COFFEE_MAKER_SERIAL_NUMBER
        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST] = {}
            try:
                if self.cmdLine.options.nestusername == "":
                    raise Exception("Nest User Name is mandatory if Nest is in the Network. Aborting")
                if self.cmdLine.options.nestpassword == "":
                    raise Exception("Nest Password is mandatory if Nest is in the Network. Aborting")
                if self.cmdLine.options.nestlabel == "":
                    raise Exception("Nest Label is mandatory if Nest is in the Network. Aborting")
                if self.cmdLine.options.nestfriendlyname == "":
                    raise Exception("Nest Friendly Name is mandatory if Nest is in the Network. Aborting")
                self.nest = Nest(self.cmdLine.options.nestusername, self.cmdLine.options.nestpassword, self.cmdLine.options.nestlabel)
            except:
                self.WeMoAppAutomationLog.LogException()
                if self.sendNoEmail == False:
                    self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                os._exit(1)
        self.setUpFlag = None
        self.WeMoAppAutomationLog.Info("==========================================================")
        self.WeMoAppAutomationLog.Info("COMMAND LINE OPTIONS ASSIGNMENT")
        if self.cmdLine.options.upgradefirmware == True:
            self.FIRMWARE_UPGRADE = True
            self.WeMoAppAutomationLog.Info("upgradefirmware is True. This means all the WeMo Devices will be updated to a new firmware.")
        elif self.cmdLine.options.upgradefirmware == False:
            self.FIRMWARE_UPGRADE = False
            self.WeMoAppAutomationLog.Info("upgradefirmware is False. This means firmware update will not take place.")
        if self.cmdLine.options.nosetup == True:
            self.WeMoSetup = False
            self.WeMoAppAutomationLog.Info("nosetup is True. This means WeMo Setup will not take place as the Setup is done.")
        elif self.cmdLine.options.nosetup == False:
            self.WeMoSetup = True
            self.WeMoAppAutomationLog.Info("nosetup is False. This means WeMo Setup will take place.")
                
        if self.cmdLine.options.positive == True and self.cmdLine.options.testcase != 'all':
            self.WeMoAppAutomationLog.Info("Ignoring the --testcase option value since --positive is supplied.")
            self.cmdLine.options.testcase = 'all'
        if self.cmdLine.options.negative == True and self.cmdLine.options.testcase != 'all':
            self.WeMoAppAutomationLog.Info("Ignoring the --testcase option value since --negative is supplied")
            self.cmdLine.options.testcase = 'all'
        if self.cmdLine.options.testcase != 'all':
            if self.cmdLine.options.run == 'all':
                self.WeMoAppAutomationLog.Info("testcase name(s) are specified without the names of services .. cannot execute .. please indicate the name of the service using --run option")
                os._exit(1)
            else:
                #normal if run contains only one service name
                self.service = self.cmdLine.options.run.split(",")
                if len(self.service) > 1:
                    self.WeMoAppAutomationLog.Info("testcase name(s) are specified with more than one service name .. cannot execute .. please indicate just one service name using --run option")
                    os._exit(1)
            self.testCase = self.cmdLine.options.testcase.split(",")
        else:
            if self.cmdLine.options.run == 'all':
                temp = os.listdir(self.TestCaseDir)
                self.service = []
                for entry in temp:
                    if entry.find(".") != 0 and os.path.isdir(os.path.join(self.TestCaseDir, entry)):
                        self.service.append(entry)        
                print self.service
                self.WeMoAppAutomationLog.Info("Services to be run for Wemo App Automation:%s"%self.service)
            else:
                self.service = self.cmdLine.options.run.split(",")
                if len(self.service) < 1:
                    print "Atleast one service has to be provided for a run .. cannot execute .. please indicate just one service name using --run option"
                    os._exit(1)
                print self.service
                self.WeMoAppAutomationLog.Info("Services to be run for Wemo App Automation:%s"%self.service)
                
        if self.cmdLine.options.skip != "":
            self.skipTheseTestCases = self.cmdLine.options.skip.split(",")
        else:
            self.skipTheseTestCases = []
        
        if self.cmdLine.options.updateAppLink == True:
            self.updateApp = True
        else:
            self.updateApp = False
        
        if self.cmdLine.options.updateConfluence == True:
            try:
                CONFLUENCE_PAGE_CONFIG = "WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONFLUENCE.cfg"
                if not os.path.exists(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "config", CONFLUENCE_PAGE_CONFIG)):
                    self.WeMoAppAutomationLog.Warning("The Confluence Config file:%s does not include.Please place the Confluence Config file in the Config"%CONFLUENCE_PAGE_CONFIG)
                    os._exit(1)
                self.confluenceObj = Confluence(CONFLUENCE_PAGE_CONFIG)
                self.confluenceObj.setLogger(self.WeMoAppAutomationLog)
                self.updateConfluence = True
            except:
                self.WeMoAppAutomationLog.LogException()
                if self.sendNoEmail == False:
                    self.emailUtil.sendEmail("WeMo App Automation Exception Occurred!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                os._exit(1)
        else:
            self.updateConfluence = False
        if self.cmdLine.options.createGraph == True:
            try:
                APP_AUTOMATION_GRAPH_TABLE = "WemoAppAutomationTool"
                self.graphObj = AutomationDB(APP_AUTOMATION_GRAPH_TABLE)
                #self.graphObj.setLogger(self.WeMoAppAutomationLog)
                self.createGraph = True
                self.appAutomationDictionary = {}
                self.appAutomationDictionary['Start_Time'] = ""
                self.appAutomationDictionary['Smart_Device'] = ""
                self.appAutomationDictionary['Smart_Device_OS_Version'] = ""
                self.appAutomationDictionary['App_Version'] = ""
                self.appAutomationDictionary['App_Release'] = ""
                self.appAutomationDictionary['App_Link'] = ""
                self.appAutomationDictionary['WeMo_Devices'] = ""
                self.appAutomationDictionary['Firmware_Version_of_WeMo'] = ""
                self.appAutomationDictionary['Total_number_of_test_cases'] = ""
                self.appAutomationDictionary['Total_number_of_passes'] = ""
                self.appAutomationDictionary['Total_number_of_failure'] = ""
                self.appAutomationDictionary['Total_Execution_time'] = ""
                self.appAutomationDictionary['FTP_Logs_Link'] = ""
            except:
                self.WeMoAppAutomationLog.LogException()
                if self.sendNoEmail == False:
                    self.emailUtil.sendEmail("WeMo App Automation Exception Occurred!!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                os._exit(1)
        else:
            self.createGraph = False
        self.rerunFailedTestCaseInProgress = False
        self.WeMoAppAutomationLog.Info("==========================================================")
                    
    #Method for running the test cases
    def RunTestCase(self, testCaseDir, srv, tCase):
        """
        This function is uses to run individual test cases belonging to a particular service
        @param testCaseDir: The directory from where to run the test case
        @type testCaseDir: String
        @param srv: The folder where the test case belongs
        @type srv: String
        @param tCase: The test case to run
        @type tCase: String
        """
        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
            self.iOSPrimaryWeMoApp.setReporters(tCase)
            self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
            assert self.iOSPrimaryWeMoApp.result == True
        elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
            self.AndroidPrimaryWeMoApp.setReporters(tCase)
            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
            assert self.AndroidPrimaryWeMoApp.result == True

        stepNumberPattern = "^\([1-9][0-9]*\)[ ]?|^[1-9][0-9]*[.][ ]?"
        testIDPattern = "^@@TestID:[ ]?"
        testTitlePattern = "^@@Title:[ ]?"
        runTestPattern = "^!run:[ ]?"
        testIDPassFailPattern = "^\$\$PASSED TESTID:[ ]?"
        self.WeMoAppAutomationLog.Info("==========================================================")
        self.WeMoAppAutomationLog.Info("Test Case Directory:%s"%testCaseDir)
        self.WeMoAppAutomationLog.Info("Service:%s"%srv)
        self.WeMoAppAutomationLog.Info("Test Case:%s"%tCase)
        self.WeMoAppAutomationLog.Info("==========================================================")
        self.WeMoAppAutomationLog.Info("Running the test case:%s"%os.path.join(testCaseDir, srv, tCase))
        self.WeMoAppAutomationLog.Info("Opening the test case:%s"%os.path.join(testCaseDir, srv, tCase))
        try:
            fp = open(os.path.join(testCaseDir, srv, tCase), "r")
        except:
            self.WeMoAppAutomationLog.Critical("Test Case:%s not found"%os.path.join(testCaseDir, srv, tCase))
            return
        
        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                assert self.iOSPrimaryWeMoApp.result == True        
            
            elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                assert self.AndroidPrimaryWeMoApp.result == True  
                
        self.WeMoAppAutomationLog.Info("Reading the test steps of the test case:%s"%os.path.join(testCaseDir, srv, tCase))
        testSteps = fp.read()
        fp.close()
        testSteps = testSteps.split("\n")
        self.WeMoAppAutomationLog.Info("Test Steps:%s to be performed in the test case:%s"%(testSteps,os.path.join(testCaseDir, srv, tCase)))
        testResult = "PASS",
        counter = 0
        counter = 0
        previousStep= ""
        currentStep = ""
        launch_occurance = 0
        self.Memory_Usage_At_Start = ""
        self.CPU_Usage_At_Start = ""
        self.Memory_Usage_At_End = ""
        self.CPU_Usage_At_End = ""
        
        for step in testSteps:
            self.WeMoAppAutomationLog.Info("Test Step:%s to be performed in the test case:%s"%(step,os.path.join(testCaseDir, srv, tCase)))
            step = step.strip()
            if step.find("#") == 0:
                continue 
            if step.find("@@") == 0:
                if self.rerunFailedTestCaseInProgress == False:
                    self.tpDoc.Doc(step.replace("@@", "")) #writing to Test Plan Document
                self.logFP.Log(step) #documentation
                testIDMatch = re.match(testIDPattern, step)
                if testIDMatch != None:
                    testID = step.split(testIDMatch.group(0))[1].strip()
                    self.WeMoAppAutomationLog.Info("Test Id:%s for the test Case:%s"%(testID,os.path.join(testCaseDir, srv, tCase)))
                testTitleMatch = re.match(testTitlePattern, step)
                if testTitleMatch != None:
                    testTitle = step.split(testTitleMatch.group(0))[1].strip()
                    self.WeMoAppAutomationLog.Info("Test Title:%s for the test Case:%s"%(testTitle,os.path.join(testCaseDir, srv, tCase)))
            elif step.find("$$") == 0:
                if self.rerunFailedTestCaseInProgress == False:
                    self.tpDoc.Doc(step.replace("$$", "")) #writing to Test Plan Document
                self.logFP.Log(step) #documentation
                testIDPassFailMatch = re.match(testIDPassFailPattern, step)
                if testIDPassFailMatch != None:
                    testIDPassFail = step.split(testIDPassFailMatch.group(0))[1].strip()
                    self.testIdPassFailDictionary[testIDPassFail] = "PASS" + "<br /><br />"
            elif step.find("!run:") == 0:
                #extract the details of the test case to run
                testCasesToRun = re.match(runTestPattern, step)
                if testCasesToRun != None:
                    testCasesToRun = testCasesToRun.group(0)
                    testCasesToRun = step.split(testCasesToRun)[1].strip()
                    testCasesToRun = testCasesToRun.split(",")
                    for tc in testCasesToRun:
                        test2run, service2run = tc.split("@")
                        if RunTestCase(testCaseDir,service2run, test2run) == "FAIL":
                            testResult = "FAIL"
            else:
                try:
                    #actual test step
                    #extract its step number
                    stepNumber = re.match(stepNumberPattern, step)
                    if stepNumber == None:
                        stepNumber = "(#) "
                    else:
                        stepNumber = stepNumber.group(0)
                    step = step.replace(stepNumber, "")
                    if counter == 0:
                        previousStep = step
                        currentStep = step
                    else:
                        previousStep = currentStep
                        currentStep = step
                    counter = counter + 1
                    exec step
                    
                    ### To Check for CPU & Memory utlizations
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                        if (("_launchWemoApp" in step) and (launch_occurance == 0)):
                            self.iOSPrimaryWeMoApp._getCPUStats()
                            self.Memory_Usage_At_Start = self.iOSPrimaryWeMoApp.CPU_Usage
                            self.CPU_Usage_At_Start = self.iOSPrimaryWeMoApp.Memory_Usage
                            launch_occurance = launch_occurance + 1     
                            
                    elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":   
                        if (("_launchWemoApp" in step) and (launch_occurance == 0)):
                            self.AndroidPrimaryWeMoApp._getCPUStats()
                            self.Memory_Usage_At_Start = self.AndroidPrimaryWeMoApp.CPU_Usage
                            self.CPU_Usage_At_Start = self.AndroidPrimaryWeMoApp.Memory_Usage
                            launch_occurance = launch_occurance + 1
                    self.logFP.Log("==>(PASS): Step " + stepNumber + step)
                    self.WeMoAppAutomationLog.Info("==>(PASS): Step " + stepNumber + step)
                except:
                    self.WeMoAppAutomationLog.Info("-->FAIL<--: Step " + stepNumber + step)
                    self.WeMoAppAutomationLog.Info("\n\n-->FAIL<--: Step " + stepNumber + step)
                    self.WeMoAppAutomationLog.Info("\n<--ExceptionType-->: " + str(sys.exc_info()[0]))
                    self.WeMoAppAutomationLog.Info("\n<<<ExceptionDetails>>>:" + str(sys.exc_info()[1]))
                    self.WeMoAppAutomationLog.Info("\n***TraceBack***: " + str(traceback.extract_tb(sys.exc_info()[2])))
                    self.logFP.Log("\n\n-->FAIL<--: Step " + stepNumber + step)
                    self.logFP.Log("\n<--ExceptionType-->: " + str(sys.exc_info()[0]))
                    self.logFP.Log("\n<<<ExceptionDetails>>>:" + str(sys.exc_info()[1]))
                    self.logFP.Log("\n***TraceBack***: " + str(traceback.extract_tb(sys.exc_info()[2])))
                    #testResult = "FAIL","Exception:%s %s"%(str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),previousStep
                    testResult = "FAIL","Exception:%s %s"%(str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),currentStep
                    break
        else:
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                self.Memory_Usage_At_End = self.iOSPrimaryWeMoApp.CPU_Usage
                self.CPU_Usage_At_End = self.iOSPrimaryWeMoApp.Memory_Usage
            elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                self.Memory_Usage_At_End = self.AndroidPrimaryWeMoApp.CPU_Usage
                self.CPU_Usage_At_End = self.AndroidPrimaryWeMoApp.Memory_Usage
        self.WeMoAppAutomationLog.Info("==========================================================")
        return testResult
    
    def _start(self):
        """
        The main function where the execution of the Wemo App Automation starts
        """
        try:
            self.WeMoAppAutomationLog.Info("==========================================================")
            self.WeMoAppAutomationLog.Info("WEMO APP AUTOMATION TEST DEVICE TOOL")
            self.WeMoAppAutomationLog.Info("==========================================================")
            self.WeMoAppAutomationLog.Info("WeMo App Automation is about to start!!!")
            #Creation of the CSV Report and the Html Report
            self.resultsCSVFile = CsvReport("%s_%s"%(self.csvReport,"_".join(self.devicesInNetwork)))
            self.resultsHtmlFile = HtmlReport("%s_%s"%(self.htmlReport,"_".join(self.devicesInNetwork)))
            self.WeMoAppAutomationLog.Info("Creating the WeMoApp Automation CSV log:%s in the logs directory:%s"%(self.resultsCSVFile.getCsvFilePath(),self.LogDir))
            self.WeMoAppAutomationLog.Info("Creating the WeMoApp Automation Html log:%s in the logs directory:%s"%(self.resultsHtmlFile.getHhtmlFilePath(),self.LogDir))
            self.updateConfluenceHtmlFileName = os.path.basename(self.resultsHtmlFile.getHhtmlFilePath())
            self.resultsCSVFile.openCsv()
            self.resultsHtmlFile.openHtml()
            self.resultsHtmlFile.HtmlTitle("WEMO APP TEST DEVICE TOOL")
            self.resultsCSVFile.addRowToCsv(["WemoApp Automation Test Device Tool Version",self.WeMoAppAutomationTDToolVersion])
            self.resultsHtmlFile.HtmlHeader("WemoApp Automation Test Device Tool Version",self.WeMoAppAutomationTDToolVersion)
            self.resultsCSVFile.addRowToCsv(["Host PC",self.TestPCName])
            self.resultsHtmlFile.HtmlHeader("Host PC",self.TestPCName)
            self.resultsCSVFile.addRowToCsv(["Platform",self.TestPCPlatform])
            self.resultsHtmlFile.HtmlHeader("Platform",self.TestPCPlatform)
            self.resultsCSVFile.addRowToCsv(["Smart Phone Device",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone])
            self.resultsHtmlFile.HtmlHeader("Smart Phone Device",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone)
            self.resultsCSVFile.addRowToCsv(["Smart Phone OS Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION])
            self.resultsHtmlFile.HtmlHeader("Smart Phone OS Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION)
            self.resultsCSVFile.addRowToCsv(["App Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION])
            self.resultsHtmlFile.HtmlHeader("App Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION)
            self.resultsCSVFile.addRowToCsv(["App Release",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE])
            self.resultsHtmlFile.HtmlHeader("App Release",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE)
            self.resultsCSVFile.addRowToCsv(["App Link",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK])
            self.resultsHtmlFile.HtmlHeader("App Link",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK)
            
            self.WeMoAppAutomationLog.Info("Creating the WeMoApp Automation Test Plan document:%s in the logs directory:%s"%(self.TestPlanDocument,self.LogDir))
            #create TestPlanDocument
            self.TestPlanDocument = self.TestPlanDocument + "WeMo_App_Automation_%s.doc"%"_".join(self.devicesInNetwork)
            self.tpDoc = Logger(self.TestPlanDocument)
            #A log header for each test case run
            self.logHeaderString = "WemoApp Automation Test Device Tool Version:%s\nHostPC:%s\nPlatform:%s\n"%(self.WeMoAppAutomationTDToolVersion,self.TestPCName,self.TestPCPlatform)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SENSOR_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.Motion.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Sensor-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION  
                self.WeMoAppAutomationLog.Info("Wemo Motion Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Motion SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Motion is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Motion is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.WeMoAppAutomationLog.Info("Wemo Uuid for Motion is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid])
                self.resultsCSVFile.addRowToCsv(["WeMo Motion Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Motion Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Motion SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Motion SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Motion",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Motion",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Motion",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Motion",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):      
                #Assigning the values for the Smart Phone SSID Name and Friendly Name for Switch
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SWITCH_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.Switch.%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Socket-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Switch Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Switch SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Switch is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Switch is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["WeMo Switch Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Switch Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Switch SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Switch SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):      
                #Assigning the values for the Smart Phone SSID Name and Friendly Name for WeMo Mini
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SWITCH_V2_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "Wemo.Mini.%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Socket-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Mini Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Mini SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Wemo Mini is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Wemo Mini is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Wemo Mini Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("Wemo Mini Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["Wemo Mini SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("Wemo Mini SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Wemo Mini",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Wemo Mini",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Wemo Mini",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Wemo Mini",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Insight
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.INSIGHT_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.Insight.%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Insight-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Insight Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Insight SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Insight is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Insight is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["WeMo Insight Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Insight Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Insight SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Insight SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Insight V2
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.INSIGHT_V2_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.Insight.%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Insight-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Insight Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Insight SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Insight is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Insight is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["WeMo Insight Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Insight Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Insight SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Insight SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Insight",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Light Switch
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.LIGHTSWITCH_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.Light.%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Lightswitch-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Light Switch Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Light Switch SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Light Switch is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Light Switch is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["WeMo Insight Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Light Switch Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Light Switch SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Light Switch SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Light Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Light Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Light Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Light Switch",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Dimmer
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.DIMMER_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "Wemo.%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "Wemo.Dimmer.%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Dimmer-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Dimmer Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Dimmer SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Dimmer is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Dimmer is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["WeMo Insight Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Dimmer Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Dimmer SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Dimmer SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Dimmer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Dimmer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Dimmer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Dimmer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Link
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.LINK_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Uuid] = "Bridge-1_0-%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                if len(self.deviceIdList) > 0:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.LED_BULB_DEVICE_ID_1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.LED_BULB_DEVICE_ID_1[12:16]
                    if len(self.deviceIdList) > 1:
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.LED_BULB_DEVICE_ID_2
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.LED_BULB_DEVICE_ID_2[12:16]
                if len(self.osram_regular_deviceIdList) > 0:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_1[12:16]
                    if len(self.osram_regular_deviceIdList) > 1:
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_2
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_REGULAR_LED_BULB_DEVICE_ID_2[12:16]        
                if len(self.osram_ttb_deviceIdList) > 0:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_TTB_LED_BULB_DEVICE_ID_1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_TTB_LED_BULB_DEVICE_ID_1[12:16]
                    if len(self.osram_ttb_deviceIdList) > 1:
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_TTB_LED_BULB_DEVICE_ID_2
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_TTB_LED_BULB_DEVICE_ID_2[12:16]    
                if len(self.osram_flex_deviceIdList) > 0:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_FLEX_LED_BULB_DEVICE_ID_1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_FLEX_LED_BULB_DEVICE_ID_1[12:16] 
                    if len(self.osram_flex_deviceIdList) > 1:
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_FLEX_LED_BULB_DEVICE_ID_2
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_FLEX_LED_BULB_DEVICE_ID_2[12:16] 
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_1[12:16] 
                    if len(self.osram_gardenspot_deviceIdList) > 1:
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] = self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_2
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = "LED_%s"%self.OSRAM_GARDENSPOT_LED_BULB_DEVICE_ID_2[12:16] 
                self.WeMoAppAutomationLog.Info("Wemo Link Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Link SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Link is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Link Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Link Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Link SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Link SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Link",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Link",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                if len(self.deviceIdList) > 0:
                    self.WeMoAppAutomationLog.Info("Wemo LED_BULB_1 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.WeMoAppAutomationLog.Info("Wemo LED_BULB_1 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    self.resultsCSVFile.addRowToCsv(["Wemo LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                    self.resultsHtmlFile.HtmlHeader("Wemo LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.resultsCSVFile.addRowToCsv(["Wemo LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                    self.resultsHtmlFile.HtmlHeader("Wemo LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    if len(self.deviceIdList) > 1:
                        self.WeMoAppAutomationLog.Info("Wemo LED_BULB_2 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WeMoAppAutomationLog.Info("Wemo LED_BULB_2 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                        self.resultsCSVFile.addRowToCsv(["Wemo LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                        self.resultsHtmlFile.HtmlHeader("Wemo LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.resultsCSVFile.addRowToCsv(["Wemo LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                        self.resultsHtmlFile.HtmlHeader("Wemo LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                if len(self.osram_regular_deviceIdList) > 0:
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_REGULAR_LED_BULB_1 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_REGULAR_LED_BULB_1 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_REGULAR_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_REGULAR_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_REGULAR_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_REGULAR_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    if len(self.osram_regular_deviceIdList) > 1:
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_REGULAR_LED_BULB_2 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_REGULAR_LED_BULB_2 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_REGULAR_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_REGULAR_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_REGULAR_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_REGULAR_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])        
                if len(self.osram_ttb_deviceIdList) > 0:
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_TTB_LED_BULB_1 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_TTB_LED_BULB_1 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_TTB_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_TTB_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_TTB_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_TTB_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    if len(self.osram_ttb_deviceIdList) > 1:
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_TTB_LED_BULB_2 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_TTB_LED_BULB_2 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_TTB_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_TTB_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_TTB_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_TTB_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])    
                if len(self.osram_flex_deviceIdList) > 0:
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_FLEX_LED_BULB_1 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_FLEX_LED_BULB_1 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_FLEX_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_FLEX_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_FLEX_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_FLEX_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]) 
                    if len(self.osram_flex_deviceIdList) > 1:
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_FLEX_LED_BULB_2 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_FLEX_LED_BULB_2 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_FLEX_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_FLEX_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_FLEX_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_FLEX_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]) 
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_GARDENSPOT_LED_BULB_1 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.WeMoAppAutomationLog.Info("Wemo OSRAM_GARDENSPOT_LED_BULB_1 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_GARDENSPOT_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_GARDENSPOT_LED_BULB_1 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_GARDENSPOT_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                    self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_GARDENSPOT_LED_BULB_1 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]) 
                    if len(self.osram_gardenspot_deviceIdList) > 1:
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_GARDENSPOT_LED_BULB_2 Device Id:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WeMoAppAutomationLog.Info("Wemo OSRAM_GARDENSPOT_LED_BULB_2 Friendly Name:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_GARDENSPOT_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_GARDENSPOT_LED_BULB_2 Device Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.resultsCSVFile.addRowToCsv(["Wemo OSRAM_GARDENSPOT_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                        self.resultsHtmlFile.HtmlHeader("Wemo OSRAM_GARDENSPOT_LED_BULB_2 Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Maker
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.MAKER_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Maker Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Maker SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Maker is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Maker is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["WeMo Maker Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("WeMo Maker Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["WeMo Maker SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("WeMo Maker SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Maker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Maker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Maker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Maker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):      
                #Assigning the values for the Smart Phone SSID Name and Friendly Name for Slow Cooker
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.SLOW_COOKER_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Wemo Slow Cooker Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Wemo Slow Cooker SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Slow Cooker is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Slow Cooker is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Wemo Slow Cooker Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("Wemo Slow Cooker Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["Wemo Slow Cooker SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("Wemo Slow Cooker SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Slow Cooker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Slow Cooker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Slow Cooker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Slow Cooker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Humidifier
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HUMIDIFIER_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Humidifer Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Humidifer SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Humidifer is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Humidifer is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Humidifer Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("Humidifer Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["Humidifer SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("Humidifer SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Humidifer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Humidifer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Humidifer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Humidifer",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for Air Purifier
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.AIR_PURIFIER_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Air Purifier Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Air Purifier SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Air Purifier is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Air Purifier is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Air Purifier Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("Air Purifier Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["Air Purifier SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("Air Purifier SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Air Purifier",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Air Purifier",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Air Purifier",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Air Purifier",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for HeaterA
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HEATER_A_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Heater A Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Heater A SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Heater A is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Heater A is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Heater A Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("Heater A Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["Heater A SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("Heater A SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Heater A",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Heater A",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Heater A",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Heater A",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for HeaterB
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.HEATER_B_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Heater B Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("Heater B SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for Heater B is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for Heater B is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Heater B Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("Heater B Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["Heater B SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("Heater B SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For Heater B",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For Heater B",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For Heater B",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For Heater B",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                #Assigning the values for the SSID, Smart Phone SSID Name and Friendly Name for CoffeeMaker
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber] = self.COFFEE_MAKER_SERIAL_NUMBER
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID] = "WeMo.%s"%self.util.getWeMoSSID(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName] = "WeMo.%s.%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber][11:14])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName] = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID].replace(".","_")
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("CoffeeMaker Serial Number is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WeMoAppAutomationLog.Info("CoffeeMaker SSID under test is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                self.WeMoAppAutomationLog.Info("Wemo Smart Phone SSID Name for CoffeeMaker is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WeMoAppAutomationLog.Info("Wemo Friendly Name for CoffeeMaker is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
                self.resultsCSVFile.addRowToCsv(["CoffeeMaker Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]])
                self.resultsHtmlFile.HtmlHeader("CoffeeMaker Serial Number",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.resultsCSVFile.addRowToCsv(["CoffeeMaker SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID]])
                self.resultsHtmlFile.HtmlHeader("CoffeeMaker SSID",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])                
                self.resultsCSVFile.addRowToCsv(["WeMo Smart Phone SSID Name For CoffeeMaker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Smart Phone SSID Name For CoffeeMaker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.resultsCSVFile.addRowToCsv(["WeMo Friendly Name For CoffeeMaker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("WeMo Friendly Name For CoffeeMaker",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName])
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                #Assigning the values for the Username, Password, Label and Friendly Name
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestUsername] = self.cmdLine.options.nestusername.strip()
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestPassword] = self.cmdLine.options.nestpassword.strip()
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestLabel] = self.cmdLine.options.nestlabel.strip()
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestFriendlyName] = self.cmdLine.options.nestfriendlyname.strip()
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_DESCRIPTION
                self.WeMoAppAutomationLog.Info("Nest User Name is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestUsername])
                self.WeMoAppAutomationLog.Info("Nest Password is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestPassword])
                self.WeMoAppAutomationLog.Info("Nest Label is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestLabel])
                self.WeMoAppAutomationLog.Info("Nest Friendly Name is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestFriendlyName])
                self.resultsCSVFile.addRowToCsv(["Nest User Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestUsername]])
                self.resultsHtmlFile.HtmlHeader("Nest User Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestUsername])
                self.resultsCSVFile.addRowToCsv(["Nest Password",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestPassword]])
                self.resultsHtmlFile.HtmlHeader("Nest Password",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestPassword])                
                self.resultsCSVFile.addRowToCsv(["Nest Label",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestLabel]])
                self.resultsHtmlFile.HtmlHeader("Nest Label",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestLabel])
                self.resultsCSVFile.addRowToCsv(["Nest Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestFriendlyName]])
                self.resultsHtmlFile.HtmlHeader("Nest Friendly Name",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestFriendlyName])
                try:                 
                    self.nest.login()
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully logged into the Nest Sever whose login:%s, password:%s and label:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestUsername],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestPassword],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoNestLabel]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if self.sendNoEmail == False:
                #Creating an email header and the summary string for the Wemo App Automation Start Run
                emailHeader = "WEMO APP TEST DEVICE TOOL IS ABOUT TO START ON PC:%s RUNNING OS:%s"%(self.TestPCName,self.TestPCPlatform)
                wemoAppStartSummaryString = "\n==============\nSmart Device Info\n==============\nSmart Phone:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone+"\nSmart Device OS Version:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION+\
                "\n==============\nApp Info\n==============\nAppVersion:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION+"\nApp Link:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK+\
                "\n==============\nWeMo Devices In Network\n==============\nWeMo Devices:"+ ','.join(self.devicesInNetwork)+\
                "\n==============\nPlatform Under Test\n==============\nFeatures:"+ ','.join(self.service)+"\n"
                self.emailUtil.sendEmail(emailHeader, wemoAppStartSummaryString, "admin")

                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                if self.wemoAppUtility.result == False:
                    self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    os._exit(1)
                assert self.wemoAppUtility.result == True
                self.routerIp = self.wemoAppUtility.serverIPAddr
                self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                
                self.WeMoAppAutomationLog.Info("Sending an Automation Start email whose header is:%s and the Summary is:%s"%(emailHeader,wemoAppStartSummaryString))
            
            testStartTime = time.time()
            if self.createGraph == True:
                self.appAutomationDictionary['Start_Time'] = strftime("%Y-%m-%d_%H-%M-%S")
            self.WeMoAppAutomationLog.Info("WeMoApp Automation Test Start Time:%s"%str(testStartTime))
            
            self.WeMoAppAutomationLog.Info("Setting the Value for close app and uninstall varaible")
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT.upper() == "PROD":
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall = "com.belkin.wemo2"
                # WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Lower_App_Version = "https://app.lswf.net/ipa/Falcon-Integration/wemo2prod-Falcon-Integration.dh_1777a64.ipa"
            elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT.upper() == "STG":
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall = "com.belkin.wemostag4"
                # WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.Lower_App_Version = "https://app.lswf.net/ipa/Falcon-Integration/wemostag2-Falcon-Integration.dh_1777a64.ipa"
            elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT.upper() == "QA":
                WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall = "com.belkin.wemoqa2"

            if self.updateApp == True:
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                    self.WeMoAppAutomationLog.Info("Uninstalling and Installing the WeMo App for Smart Device:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone)
                    try:
                        self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                        assert self.iOSPrimaryWeMoApp.result == True
                        self.WeMoAppAutomationLog.Info("Uninstalling and Installing the WeMo App:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)
                        self.iOSPrimaryWeMoApp._uninstallWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)
                        
                        IOS_WEMO_APP_FILE = self.wemoAppHttpUtility.download(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK,"belkin","belkin123",os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "temp", os.path.basename(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK)))
                        assert os.path.basename(IOS_WEMO_APP_FILE).endswith('.ipa')                   
                        assert self.iOSPrimaryWeMoApp.result == True
                        
                        self.iOSPrimaryWeMoApp._installWemoApp(IOS_WEMO_APP_FILE)
                        assert self.iOSPrimaryWeMoApp.result == True                        
                        
                        self.iOSPrimaryWeMoApp._turnonTheAppDebug(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier)
                        if self.iOSPrimaryWeMoApp.result == True:
                            self.WeMoAppAutomationLog.Info("The Debug is turned On for getting device logs")
                        else:
                            self.WeMoAppAutomationLog.Info("The Debug is not turned On for getting device logs")
                            
                        if self.WeMoSetup == False:
                            self.iOSPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)    
                            if self.iOSPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("Remote Access in Enabled now")
                            else:
                                self.WeMoAppAutomationLog.Info("Enable remote access failed try again later.")
                        
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                            self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
                            assert self.iOSPrimaryWeMoApp.result == True
                        
                            self.WeMoAppAutomationLog.Info("Un-installing and Installing the WeMo App:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)
                            self.iOSPrimaryWeMoApp._uninstallWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)
                            
                            self.iOSPrimaryWeMoApp._installWemoApp(IOS_WEMO_APP_FILE)
                            assert self.iOSPrimaryWeMoApp.result == True

                            self.iOSPrimaryWeMoApp._turnonTheAppDebug(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier)
                            if self.iOSPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("The Debug is turned On for getting device logs")
                            else:
                                self.WeMoAppAutomationLog.Info("The Debug is not turned On for getting device logs")
                            
                            if self.WeMoSetup == False:
                                self.iOSPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)    
                                if self.iOSPrimaryWeMoApp.result == True:
                                    self.WeMoAppAutomationLog.Info("Remote Access in Enabled now")
                                else:
                                    self.WeMoAppAutomationLog.Info("Enable remote access failed try again later.")
                                
                            self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.iOSPrimaryWeMoApp.result == True    
                    except:
                        self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                        assert self.iOSPrimaryWeMoApp.result == True                    
                        
                        self.WeMoAppAutomationLog.Error("Un-install and Install of the Wemo App:%s an Error.\n Aborting the Test Run."%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier)
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
                elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                    self.WeMoAppAutomationLog.Info("Un-installing and Installing the WeMo App:%s for Smart Device:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier))
                    try:
                    
                        self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                        assert self.AndroidPrimaryWeMoApp.result == True 
                        
                        ANDROID_WEMO_APK_FILE = self.wemoAppHttpUtility.download(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK,None,None,os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "temp", os.path.basename(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK)))
                        assert os.path.basename(ANDROID_WEMO_APK_FILE).endswith('.apk')
                        
                        self.WeMoAppAutomationLog.Info("Uninstalling and Installing the WeMo App:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                        self.AndroidPrimaryWeMoApp._uninstallWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                        assert self.AndroidPrimaryWeMoApp.result == True
                        
                        self.AndroidPrimaryWeMoApp._installWemoApp(ANDROID_WEMO_APK_FILE)
                        assert self.AndroidPrimaryWeMoApp.result == True
                        
                        if self.WeMoSetup == False:
                            self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)
                            if self.AndroidPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("Remote Access in Enabled now")
                            else:
                                self.WeMoAppAutomationLog.Info("Enable remote access failed try again later.")
                            
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                            
                            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
                            assert self.AndroidPrimaryWeMoApp.result == True    
                             
                            
                            self.WeMoAppAutomationLog.Info("Uninstalling and Installing the WeMo App:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                            self.AndroidPrimaryWeMoApp._uninstallWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                            assert self.AndroidPrimaryWeMoApp.result == True
                            
                            self.AndroidPrimaryWeMoApp._installWemoApp(ANDROID_WEMO_APK_FILE)
                            assert self.AndroidPrimaryWeMoApp.result == True
                            
                            if self.WeMoSetup == False:
                                self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)
                                if self.AndroidPrimaryWeMoApp.result == True:
                                    self.WeMoAppAutomationLog.Info("Remote Access in Enabled now")
                                else:
                                    self.WeMoAppAutomationLog.Info("Enable remote access failed try again later.")
                        
                            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.AndroidPrimaryWeMoApp.result == True        
                    except:
                        self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                        self.WeMoAppAutomationLog.Error("Uninstall and Install of the Wemo App:%s encountered an Error.\n Aborting the Test Run."%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
            else:
                self.WeMoAppAutomationLog.Info("App Update is set to False. So not updating the App and proceeding with the App allready available on the Smart Device.")
                
            if self.WeMoSetup == True:
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                    #Connect to the Local Router
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    #Make sure the Sensor is in the Factory Reset State
                    self.WeMoAppAutomationLog.Info("Discovering the Motion:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Motion:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE MOTION:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE MOTION:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the SENSOR:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SENSOR. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SENSOR. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        MotionSerialNumber = self.MetaInfo[1].strip()
                        if MotionSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "SENSOR Serial Number from Config File:%s  SENSOR Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],MotionSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        MotionBroadcastSSID = self.MetaInfo[4]
                        if MotionBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "SENSOR SSID from Config File:%s  SENSOR SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],MotionBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Motion Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Motion Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Motion Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]) 
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                    #Make sure the Switch is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    
                    self.WeMoAppAutomationLog.Info("Discovering the Switch:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Switch:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE SWITCH:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE SWITCH:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the SWITCH:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SWITCH. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SWITCH. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        SwitchSerialNumber = self.MetaInfo[1].strip()
                        if SwitchSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "SWITCH Serial Number from Config File:%s  SWITCH Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],SwitchSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        SwitchBroadcastSSID = self.MetaInfo[4]
                        if SwitchBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "SWITCH SSID from Config File:%s  SWITCH SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],SwitchBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Switch Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                    #Make sure the SwitchV2 is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    
                    self.WeMoAppAutomationLog.Info("Discovering the SwitchV2:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("SwitchV2:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE SWITCHV2:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE SWITCHV2:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the SWITCHV2:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SWITCHV2. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SWITCHV2. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        SwitchV2SerialNumber = self.MetaInfo[1].strip()
                        if SwitchV2SerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "SWITCHV2 Serial Number from Config File:%s  SWITCHV2 Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],SwitchV2SerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        SwitchV2BroadcastSSID = self.MetaInfo[4]
                        if SwitchV2BroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "SWITCHV2 SSID from Config File:%s  SWITCHV2 SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],SwitchV2BroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo SwitchV2 Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo SwitchV2 Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                    #Make sure the Insight is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    
                    self.WeMoAppAutomationLog.Info("Discovering the Insight:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Insight:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE INSIGHT:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE INSIGHT:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the INSIGHT:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this INSIGHT. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this INSIGHT. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        InsightSerialNumber = self.MetaInfo[1].strip()
                        if InsightSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "INSIGHT Serial Number from Config File:%s  INSIGHT Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],InsightSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        InsightBroadcastSSID = self.MetaInfo[4]
                        if InsightBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "INSIGHT SSID from Config File:%s  INSIGHT SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],InsightBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Insight Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                    #Make sure the Insight is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    
                    self.WeMoAppAutomationLog.Info("Discovering the Insight:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Insight:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE INSIGHT:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE INSIGHT:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the INSIGHT:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this INSIGHT. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this INSIGHT. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        InsightSerialNumber = self.MetaInfo[1].strip()
                        if InsightSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "INSIGHT Serial Number from Config File:%s  INSIGHT Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],InsightSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        InsightBroadcastSSID = self.MetaInfo[4]
                        if InsightBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "INSIGHT SSID from Config File:%s  INSIGHT SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],InsightBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Insight Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])       
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                    #Make sure the Light Switch is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    
                    
                    self.WeMoAppAutomationLog.Info("Discovering the Light Switch:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Light Switch:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE LIGHT SWITCH:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE LIGHT SWITCH:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the LIGHT SWITCH:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this LIGHT SWITCH. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this LIGHT SWITCH. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        LightSwitchSerialNumber = self.MetaInfo[1].strip()
                        if LightSwitchSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Light Switch Serial Number from Config File:%s  Light Switch Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],LightSwitchSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        LightSwitchBroadcastSSID = self.MetaInfo[4]
                        if LightSwitchBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Light Switch SSID from Config File:%s  LIGHT SWITCH SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],LightSwitchBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Light Switch Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Light Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Light Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                    #Make sure the Link is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))

                    self.WeMoAppAutomationLog.Info("Discovering the Link:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Link:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE LINK:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE LINK:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the LINK:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this LINK. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this LINK. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        LinkSerialNumber = self.MetaInfo[1].strip()
                        if LinkSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Link Serial Number from Config File:%s  Link Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],LinkSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        LinkBroadcastSSID = self.MetaInfo[4]
                        if LinkBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Link SSID from Config File:%s  Link SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],LinkBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Link Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Link Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Link Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]) 
                    try:
                        if len(self.deviceIdList) > 0:
                            self.WeMoAppAutomationLog.Info("RESETTING THE LED BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SSID)
                            self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                            assert self.wemoAppUtility.result == True
                            if len(self.deviceIdList) > 1:
                                self.WeMoAppAutomationLog.Info("RESETTING THE LED BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SSID)
                                self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                        if len(self.osram_regular_deviceIdList) > 0:
                            self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM REGULAR BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SSID)
                            self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                            assert self.wemoAppUtility.result == True
                            if len(self.osram_regular_deviceIdList) > 1:
                                self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM REGULAR BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SSID)
                                self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True          
                        if len(self.osram_ttb_deviceIdList) > 0:
                            self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM TTB BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SSID)
                            self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                            assert self.wemoAppUtility.result == True
                            if len(self.osram_ttb_deviceIdList) > 1:
                                self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM TTB BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SSID)
                                self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True 
                        if len(self.osram_flex_deviceIdList) > 0:
                            self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM FLEX BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SSID)
                            self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                            assert self.wemoAppUtility.result == True
                            if len(self.osram_flex_deviceIdList) > 1:
                                self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM FLEX BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SSID)
                                self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                        if len(self.osram_gardenspot_deviceIdList) > 0:
                            self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM GARDENSPOT BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SSID)
                            self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                            assert self.wemoAppUtility.result == True
                            if len(self.osram_gardenspot_deviceIdList) > 1:
                                self.WeMoAppAutomationLog.Info("RESETTING THE OSRAM GARDENSPOT BULB CONTROLLER:%s"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SSID)
                                self.wemoAppUtility.resetTheLedBulbUsingTheController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                    except:
                        self.WeMoAppAutomationLog.Error("Resetting the Led Bulb Controllers encountered exception.Aborting the test!!.")
                        self.WeMoAppAutomationLog.self.logFP.LogException()
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("Resetting the Led Bulb Controllers encountered exception.Aborting the test!!","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                    #Make sure the Maker is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    
                    self.WeMoAppAutomationLog.Info("Discovering the Maker:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Maker:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE MAKER:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE MAKER:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the MAKER:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this MAKER. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this MAKER. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        MakerSerialNumber = self.MetaInfo[1].strip()
                        if MakerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Maker Serial Number from Config File:%s  Maker Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],MakerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        MakerBroadcastSSID = self.MetaInfo[4]
                        if MakerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Maker SSID from Config File:%s  Maker SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],MakerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Maker Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Maker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Maker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):              
                    #Make sure the Slow Cooker is in the Factory Reset State             
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    self.WeMoAppAutomationLog.Info("Discovering the Slow Cooker:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("SlowCooker:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE SLOW COOKER:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE SLOW COOKER:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])  
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the SLOW COOKER:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SLOW COOKER. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SLOW COOKER. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        SlowCookerSerialNumber = self.MetaInfo[1].strip()
                        if SlowCookerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "SLOW COOKER Serial Number from Config File:%s  SLOW COOKER Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],SlowCookerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        SlowCookerBroadcastSSID = self.MetaInfo[4]
                        if SlowCookerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "SLOW COOKER SSID from Config File:%s  SLOW COOKER SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],SlowCookerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Slow Cooker Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Slow Cooker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Slow Cooker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                    #Make sure the Humidifier is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))             
                    self.WeMoAppAutomationLog.Info("Discovering the Humidifier:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("Humidifier:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE HUMIDIFIER:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE HUMIDIFIER:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the Humidifier:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Humidifier. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Humidifier. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        HumidifierSerialNumber = self.MetaInfo[1].strip()
                        if HumidifierSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Humidifier Serial Number from Config File:%s  Humidifier Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],HumidifierSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        HumidifierBroadcastSSID = self.MetaInfo[4]
                        if HumidifierBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Humidifier SSID from Config File:%s  Humidifier SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],HumidifierBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Humidifier Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Humidifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Humidifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                    #Make sure the Air Purifier is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    self.WeMoAppAutomationLog.Info("Discovering the AirPurifier:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("AirPurifier:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE AirPurifier:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE AirPurifier:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the AirPurifier:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this AirPurifier. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this AirPurifier. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        AirPurifierSerialNumber = self.MetaInfo[1].strip()
                        if AirPurifierSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "AirPurifier Serial Number from Config File:%s  AirPurifier Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],AirPurifierSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        AirPurifierBroadcastSSID = self.MetaInfo[4]
                        if AirPurifierBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "AirPurifier SSID from Config File:%s  AirPurifier SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],AirPurifierBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo AirPurifier Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo AirPurifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo AirPurifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])    
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                    #Make sure the HeaterA is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    self.WeMoAppAutomationLog.Info("Discovering the HeaterA:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("HeaterA:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE HEATER_A:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE HEATER_A:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the HeaterA:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterA. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterA. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        HeaterASerialNumber = self.MetaInfo[1].strip()
                        if HeaterASerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "HeaterA Serial Number from Config File:%s  HeaterA Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],HeaterASerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        HeaterABroadcastSSID = self.MetaInfo[4]
                        if HeaterABroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "HeaterA SSID from Config File:%s  HeaterA SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],HeaterABroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo HeaterA Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo HeaterA Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo HeaterA Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                    #Make sure the HeaterB is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    self.WeMoAppAutomationLog.Info("Discovering the HeaterA:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("HeaterA:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE HEATER_B:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE HEATER_B:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the HeaterB:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterB. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterB. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        HeaterBSerialNumber = self.MetaInfo[1].strip()
                        if HeaterBSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "HeaterB Serial Number from Config File:%s  HeaterB Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],HeaterBSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        HeaterBBroadcastSSID = self.MetaInfo[4]
                        if HeaterBBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "HeaterB SSID from Config File:%s  HeaterB SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],HeaterBBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo HeaterB Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo HeaterB Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo HeaterB Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                    #Make sure the CoffeeMaker is in the Factory Reset State
                    self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        os._exit(1)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    self.WeMoAppAutomationLog.Info("Discovering the CoffeeMaker:%s on the Local Network to make sure it is not connected."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber], "urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    if ssdp.ipOfWeMoDevice != None:
                        self.WeMoAppAutomationLog.Info("CoffeeMaker:%s discovered on the Local Network.Resetting it as Setup is set to True."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]))
                        self.wemoUpnp.wemoHardReset(ssdp.ipOfWeMoDevice)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call wemoHardReset() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],ssdp.ipOfWeMoDevice))
                            os._exit(1)
                        time.sleep(90)
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == False:
                        self.WeMoAppAutomationLog.Info("PLEASE MAKE SURE THE CoffeeMaker:%s is in the FACTORY RESET STATE. ABORTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        os._exit(1)
                    elif self.wemoAppUtility.result == True:
                        self.WeMoAppAutomationLog.Info("HOORAY! Server could connect to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.WeMoAppAutomationLog.Info("THE CoffeeMaker:%s is in the FACTORY RESET STATE. STARTING THE TEST!!!"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    
                    self.WeMoAppAutomationLog.Info("Get the META INFO of the CoffeeMaker:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    #Read the MACAddress, SerialNumber from the WeMoSmart and verify that they match what the user has scanned
                    try:
                        self.wemoUpnp.getMetaInfo(self.WeMoDefaultIP)
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this CoffeeMaker. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this CoffeeMaker. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        CoffeeMakerSerialNumber = self.MetaInfo[1].strip()
                        if CoffeeMakerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "CoffeeMaker Serial Number from Config File:%s  CoffeeMaker Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],CoffeeMakerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        CoffeeMakerBroadcastSSID = self.MetaInfo[4]
                        if CoffeeMakerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "CoffeeMaker SSID from Config File:%s  CoffeeMaker SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],CoffeeMakerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo CoffeeMaker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo CoffeeMaker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])               
                    except:
                        self.WeMoAppAutomationLog.Error("From DUT: Exception/Error in reading/parsing information")
                        raise Exception("From DUT: Exception/Error in reading/parsing information")
                        os._exit(1)
                    finally:
                        self.WeMoAppAutomationLog.Error("Deleting the Wireless Profile:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wp.deleteWirelessProfile(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])     
                
                if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                        #Setting up the Wemo Motion
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Motion during Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Motion_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Motion_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION,True,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Motion Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                        #Setting up the Wemo Switch
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Switch Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Switch_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Switch_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Switch Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                        #Setting up the Wemo Switch
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Switch Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_SwitchV2_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Switch_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo SwitchV2 Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                        
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                        #Setting up the Wemo Insight
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo INSIGHT Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Insight_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Insight_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo INSIGHT Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                        #Setting up the Wemo Insight
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo INSIGHT Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_InsightV2_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_InsightV2_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo INSIGHT Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                        
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                        #Setting up the Wemo Light Switch
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo LIGHT SWITCH Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Insight_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_LightSwitch_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo LIGHT SWITCH Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                        #Setting up the Wemo Link
                        try:
                            BulbDeviceIdList = []
                            if len(self.deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            if len(self.osram_regular_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_regular_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])        
                            if len(self.osram_ttb_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_ttb_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])    
                            if len(self.osram_flex_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_flex_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            if len(self.osram_gardenspot_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_gardenspot_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Link Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Link_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Link_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp_Link.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp_Link.setupLed(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],BulbDeviceIdList,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                            assert self.iOSPrimaryWeMoApp_Link.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Link Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                        #Setting up the Wemo Maker
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Maker Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Maker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Maker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp_Maker.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER,SwitchType = "Toggle",Sensor = "No",forgetwififromsettingspage=False,uncheckRememberWiFiSettings=False)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Maker Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                        #Setting up the Wemo Slow Cooker
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo SlowCooker Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_SlowCooker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_SlowCooker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:                  
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo SlowCooker Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                        #Setting up the Wemo Humidifier
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Humidifier Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Humidifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Humidifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Humidifier Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                                                          
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                        #Setting up the Wemo AirPurifier
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo AirPurifier Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_AirPurifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_AirPurifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo AirPurifier Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                        
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                        #Setting up the HeaterA
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo HeaterA Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_HeaterA_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_HeaterA_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo HeaterA Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                        #Setting up the HeaterB
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo HeaterB Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_HeaterB_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_HeaterB_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo HeaterB Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                        #Setting up the Wemo CoffeeMaker
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo CoffeeMaker Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_CoffeeMaker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_CoffeeMaker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                            self.iOSPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER,False,True)
                            assert self.iOSPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo CoffeeMaker Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                                    
                elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                        #Setting up the Wemo Motion
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Motion Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Motion_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Motion_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Motion Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                        #Setting up the Wemo Switch
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Switch Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Switch_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Switch_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Switch Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                        #Setting up the Wemo SwitchV2
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Switch Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_SwitchV2_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_SwitchV2_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo SwitchV2 Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                        #Setting up the Wemo Insight
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo INSIGHT Setup")
                            self.logFP = Logger("%s_INSIGHT_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_INSIGHT_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo INSIGHT Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                        #Setting up the Wemo Insight
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo INSIGHT Setup")
                            self.logFP = Logger("%s_INSIGHT_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_INSIGHT_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo INSIGHT Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()                            
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                        #Setting up the Wemo Light Switch
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo LIGHT_SWITCH Setup")
                            self.logFP = Logger("%s_LIGHT_SWITCH_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_LIGHT_SWITCH_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo LIGHT SWITCH Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                        #Setting up the Wemo Link
                        try:
                            BulbDeviceIdList = []
                            if len(self.deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            if len(self.osram_regular_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_regular_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])        
                            if len(self.osram_ttb_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_ttb_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])    
                            if len(self.osram_flex_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_flex_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            if len(self.osram_gardenspot_deviceIdList) > 0:
                                BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                if len(self.osram_gardenspot_deviceIdList) > 1:
                                    BulbDeviceIdList.append(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Link Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Link_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Link_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp_Link.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp_Link.setupLed(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],BulbDeviceIdList,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,True)
                            assert self.AndroidPrimaryWeMoApp_Link.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Link Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                        #Setting up the Wemo Maker
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Maker Setup")
                            self.logFP = Logger("%s_Maker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Maker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,SensorAction="Yes",uncheckRememberWiFiSettings=True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Maker Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                        #Setting up the Wemo SlowCooker
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo SlowCooker Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_SlowCooker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_SlowCooker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo SlowCooker Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                        #Setting up the Wemo Humidifier
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo Humidifier Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Humidifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_Humidifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo Humidifier Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                        #Setting up the Wemo AirPurifier
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo AirPurifier Setup")
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_AirPurifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP = Logger("%s_AirPurifier_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo AirPurifier Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                        #Setting up the Wemo HeaterA
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the HeaterA Setup")
                            self.logFP = Logger("%s_HeaterA_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_HeaterA_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo HeaterA Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                        #Setting up the Wemo HeaterB
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the HeaterB Setup")
                            self.logFP = Logger("%s_HeaterB_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_HeaterB_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo HeaterB Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                    
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                        #Setting up the Wemo CoffeeMaker
                        try:
                            self.WeMoAppAutomationLog.Info("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.Info("Creating a log file for the Wemo CoffeeMaker Setup")
                            self.logFP = Logger("%s_CoffeeMaker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s_CoffeeMaker_Setup.log"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WemoSSID])
                            self.logFP.Info(self.logHeaderString)
                            self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                            self.AndroidPrimaryWeMoApp.setupWemoApp(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,True)
                            assert self.AndroidPrimaryWeMoApp.result == True
                        except:
                            self.logFP.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.logFP.LogException()
                            self.WeMoAppAutomationLog.Error("Setting up the Wemo:%s with the Router:%s whose Wireless Password is:%s encountered an Error.\n Aborting the Test Run."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword))
                            self.WeMoAppAutomationLog.LogException()
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!WeMo CoffeeMaker Setup Failed.Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")
                            os._exit(1)
                        finally:
                            self.logFP.__del__()
                            
            #Case when Setup is set to False
            if self.WeMoSetup == False:
                self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                if self.wemoAppUtility.result == False:
                    self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    os._exit(1)
                assert self.wemoAppUtility.result == True
                self.routerIp = self.wemoAppUtility.serverIPAddr
                self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                    #Getting the information from the WeMo Motion
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this WeMo Motion. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this WeMo Motion. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        MotionSerialNumber = self.MetaInfo[1].strip()
                        if MotionSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Motion Serial Number from Config File:%s  Motion Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],MotionSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        MotionBroadcastSSID = self.MetaInfo[4]
                        if MotionBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Motion SSID from Config File:%s  Motion SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],MotionBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Motion Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Motion Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Motion Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])             
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Motion: Exception/Error in reading/parsing information")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Switch as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Switch. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Switch. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        SwitchSerialNumber = self.MetaInfo[1].strip()
                        if SwitchSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Switch Serial Number from Config File:%s  Switch Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],SwitchSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        SwitchBroadcastSSID = self.MetaInfo[4]
                        if SwitchBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Switch SSID from Config File:%s  Switch SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],SwitchBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Switch Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])                                   
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Switch: Exception/Error in reading/parsing information")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo SwitchV2 as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SwitchV2. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this SwitchV2. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        SwitchV2SerialNumber = self.MetaInfo[1].strip()
                        if SwitchV2SerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "SwitchV2 Serial Number from Config File:%s  SwitchV2 Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],SwitchV2SerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        SwitchV2BroadcastSSID = self.MetaInfo[4]
                        if SwitchV2BroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Switch SSID from Config File:%s  Switch SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],SwitchV2BroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo SwitchV2 Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo SwitchV2 Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])                                   
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From SwitchV2: Exception/Error in reading/parsing information")
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):        
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Insight Setup as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)  
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Insight. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Insight. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        InsightSerialNumber = self.MetaInfo[1].strip()
                        if InsightSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Insight Serial Number from Config File:%s  Insight Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],InsightSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        InsightBroadcastSSID = self.MetaInfo[4]
                        if InsightBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Insight SSID from Config File:%s  Insight SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],InsightBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Insight Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Insight: Exception/Error in reading/parsing information")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):        
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Insight Setup as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)  
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Insight. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Insight. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        InsightSerialNumber = self.MetaInfo[1].strip()
                        if InsightSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Insight Serial Number from Config File:%s  Insight Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],InsightSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        InsightBroadcastSSID = self.MetaInfo[4]
                        if InsightBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Insight SSID from Config File:%s  Insight SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],InsightBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Insight Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Insight Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From InsightV2: Exception/Error in reading/parsing information")
                        os._exit(1)
                                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):        
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Light Switch Setup as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Light Switch. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Light Switch. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        LightSwitchSerialNumber = self.MetaInfo[1].strip()
                        if LightSwitchSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Light Switch Serial Number from Config File:%s  Light Switch Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],LightSwitchSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        LightSwitchBroadcastSSID = self.MetaInfo[4]
                        if LightSwitchBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Light Switch SSID from Config File:%s  Light Switch SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],LightSwitchBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Light Switch Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Light Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Light Switch Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Light Switch: Exception/Error in reading/parsing information")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):        
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Dimmer Setup as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Dimmer. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Dimmer. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        DimmerSerialNumber = self.MetaInfo[1].strip()
                        if DimmerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Dimmer Serial Number from Config File:%s  Dimmer Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],DimmerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        DimmerBroadcastSSID = self.MetaInfo[4]
                        if DimmerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Dimmer SSID from Config File:%s  Dimmer SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],DimmerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Dimmer Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Dimmer Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Dimmer Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Dimmer: Exception/Error in reading/parsing information")
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):        
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Link Setup as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1     
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo Link. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo Link. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        LinkSerialNumber = self.MetaInfo[1].strip()
                        if LinkSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Wemo Link Serial Number from Config File:%s  Wemo Link Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],LinkSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        LinkBroadcastSSID = self.MetaInfo[4]
                        if LinkBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Wemo Link SSID from Config File:%s  Wemo Link SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],LinkBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Link Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Link Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Link Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Wemo Link: Exception/Error in reading/parsing information")
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):        
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo Maker Setup as WeMoSetup is set to False")
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)  
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Maker. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Maker. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        MakerSerialNumber = self.MetaInfo[1].strip()
                        if MakerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Maker Serial Number from Config File:%s  Maker Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],MakerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        MakerBroadcastSSID = self.MetaInfo[4]
                        if MakerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Maker SSID from Config File:%s  Maker SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],MakerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Maker Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Maker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Maker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        self.WeMoAppAutomationLog.Error("From Maker: Exception/Error in reading/parsing information")
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                    self.WeMoAppAutomationLog.Info("Bypassing the Wemo SlowCooker Setup as WeMoSetup is set to False")
                    #Getting the information from the Slow Cooker
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo SlowCooker. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo SlowCooker. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        SlowCookerSerialNumber = self.MetaInfo[1].strip()
                        if SlowCookerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Slow Cooker Serial Number from Config File:%s  Slow Cooker Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],SlowCookerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        SlowCookerBroadcastSSID = self.MetaInfo[4]
                        if SlowCookerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Slow Cooker SSID from Config File:%s  Slow Cooker SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],SlowCookerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo SlowCooker Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo SlowCooker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo SlowCooker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])             
                    except:
                        self.WeMoAppAutomationLog.Error("From Wemo SlowCooker: Exception/Error in reading/parsing information")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                    #Getting the information from the Humidifier
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo Humidifier. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo Humidifier. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        HumidifierSerialNumber = self.MetaInfo[1].strip()
                        if HumidifierSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "Humidifier Serial Number from Config File:%s  Humidifier Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],HumidifierSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        HumidifierBroadcastSSID = self.MetaInfo[4]
                        if HumidifierBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "Humidifier SSID from Config File:%s  Humidifier SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],HumidifierBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo Humidifier Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo Humidifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo Humidifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])             
                    except:
                        self.WeMoAppAutomationLog.Error("From Humidifier: Exception/Error in reading/parsing information")
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                    #Getting the information from the AirPurifier
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo AirPurifier. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this Wemo AirPurifier. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        AirPurifierSerialNumber = self.MetaInfo[1].strip()
                        if AirPurifierSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "AirPurifier Serial Number from Config File:%s  AirPurifier Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],AirPurifierSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        AirPurifierBroadcastSSID = self.MetaInfo[4]
                        if AirPurifierBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "AirPurifier SSID from Config File:%s  AirPurifier SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],AirPurifierBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo AirPurifier Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo AirPurifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo AirPurifier Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])             
                    except:
                        self.WeMoAppAutomationLog.Error("From AirPurifier: Exception/Error in reading/parsing information")
                        os._exit(1)
                     
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                    #Getting the information from the HeaterA
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterA. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterA. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        HeaterASerialNumber = self.MetaInfo[1].strip()
                        if HeaterASerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "HeaterA Serial Number from Config File:%s  HeaterA Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],HeaterASerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        HeaterABroadcastSSID = self.MetaInfo[4]
                        if HeaterABroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "HeaterA SSID from Config File:%s  HeaterA SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],HeaterABroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo HeaterA Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo HeaterA Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo HeaterA Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])                                   
                    except:
                        self.WeMoAppAutomationLog.Error("From HeaterA: Exception/Error in reading/parsing information")
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                    #Getting the information from the HeaterB
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterB. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this HeaterB. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        HeaterBSerialNumber = self.MetaInfo[1].strip()
                        if HeaterBSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "HeaterB Serial Number from Config File:%s  HeaterB Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],HeaterBSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        HeaterBBroadcastSSID = self.MetaInfo[4]
                        if HeaterBBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "HeaterB SSID from Config File:%s  HeaterB SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],HeaterBBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo HeaterB Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo HeaterB Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo HeaterB Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])                                   
                    except:
                        self.WeMoAppAutomationLog.Error("From HeaterB: Exception/Error in reading/parsing information")
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                    #Getting the information from the CoffeeMaker
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this CoffeeMaker. Aborting the test!.")
                            raise Exception("UPnP call getMetaInfo failed.We cannot read MACAddress & SerialNumber from this CoffeeMaker. Aborting the test!.")
                        self.WeMoAppAutomationLog.Info("MetaInfo returned:", self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() seems to be corrupted .. so abort this test")
                            raise Exception("getMetaInfo() seems to be corrupted .. so abort this test")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() does not contain all the info .. so abort this test")
                            raise Exception("getMetaInfo() does not contain all the info .. so abort this test")
                        
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac] = self.MetaInfo[0].strip()
                        CoffeeMakerSerialNumber = self.MetaInfo[1].strip()
                        if CoffeeMakerSerialNumber != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]:
                            self.WeMoAppAutomationLog.Error("SerialNumber mismatch!!", "CoffeeMaker Serial Number from Config File:%s  CoffeeMaker Serial Number from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],CoffeeMakerSerialNumber))
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        CoffeeMakerBroadcastSSID = self.MetaInfo[4]
                        if CoffeeMakerBroadcastSSID != self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName]:
                            self.WeMoAppAutomationLog.Error("BROADCAST SSID mismatch!!", "CoffeeMaker SSID from Config File:%s  CoffeeMaker SSID from DUT:%s"%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],CoffeeMakerBroadcastSSID))  
                            os._exit(1)
                        self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Mac Address is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                        self.resultsCSVFile.addRowToCsv(["Wemo CoffeeMaker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac]])
                        self.resultsHtmlFile.HtmlHeader("Wemo CoffeeMaker Mac Address",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac])
                    except:
                        self.WeMoAppAutomationLog.Error("From CoffeeMaker: Exception/Error in reading/parsing information")
                        os._exit(1)
                
            self.firmwareUpdateInProcess = False
            self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
            if self.wemoAppUtility.result == False:
                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                os._exit(1)
            assert self.wemoAppUtility.result == True
            self.routerIp = self.wemoAppUtility.serverIPAddr
            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Motion Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Motion Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Motion Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])       
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True        
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True        
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo SwitchV2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo SwitchV2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)  
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True      
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Insight Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Insight Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Insight Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)  
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True  
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Insight Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Insight Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Insight Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])  
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Light Switch and upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Light Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Light Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Dimmer and upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Dimmer Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Dimmer Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Dimmer Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Maker and upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)  
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Maker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Maker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Maker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Link and upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1     
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:         
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True    
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Link Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Link Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Link Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])   
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the SlowCooker and upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True 
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo SlowCooker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo SlowCooker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo SlowCooker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True 
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo Humidifier Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Humidifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Humidifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo HumidifierB Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HumidifierB Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True 
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo HumidifierB Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo HumidifierB Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo HumidifierB Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True 
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo AirPurifier Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo AirPurifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo AirPurifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True 
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo HeaterA Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo HeaterA Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo HeaterA Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo HeaterB Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo HeaterB Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo HeaterB Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)  
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                #Upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    if self.FIRMWARE_UPGRADE == True:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                        currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != currentFirmwareVersion:
                            self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                            self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            assert self.wemoUpnp.updateFwStatus == "success"
                            self.firmwareUpdateInProcess = True
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                        self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo CoffeeMaker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo CoffeeMaker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            ## Have to work from here
            #If any of the Firmware Update is in Process, wait for 600 seconds
            if self.firmwareUpdateInProcess == True:
                time.sleep(600)
            #Check the firmware of the device after the Firmware Update if self.FIRMWARE_UPGRADE == True
            if self.FIRMWARE_UPGRADE == True:
                self.wemoAppUtility.setLogger(self.WeMoAppAutomationLog)
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                    #Check whether the firmware of the Motion is upgraded
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        #Getting the meta info of the Sensor after the Update
                        motionFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        motionFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != motionFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),motionFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = motionFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Motion Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Motion Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Motion Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])           
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                    #Check whether the firmware of the Switch is upgraded
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        #Getting the meta info of the Switch after the Update
                        switchFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        switchFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != switchFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),switchFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = switchFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                    #Check whether the firmware of the SwitchV2 is upgraded
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        #Getting the meta info of the SwitchV2 after the Update
                        switchV2FirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        switchV2FirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != switchV2FirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),switchV2FirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = switchV2FirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo SwitchV2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo SwitchV2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                    #Check whether the firmware of the Insight is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)  
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        insightFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        insightFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != insightFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),insightFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = insightFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Insight Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Insight Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Insight Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                    #Check whether the firmware of the Insight-V2 is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)  
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        insightV2FirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        insightV2FirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != insightV2FirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),insightV2FirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = insightV2FirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Insight-v2 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Insight-v2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Insight-v2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                    #Check whether the firmware of the Light Switch is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        lightSwitchFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        lightSwitchFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != lightSwitchFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),lightSwitchFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = lightSwitchFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Light Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Light Switch Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])  
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                    #Check whether the firmware of the Dimmer is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        dimmerFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        dimmerFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != dimmerFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),dimmerFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = dimmerFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Dimmer Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Dimmer Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Dimmer Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])  
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                    #Check whether the firmware of the Maker is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)  
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        makerFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        makerFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != makerFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),makerFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = makerFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Maker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Maker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Maker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                        
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                    #Check whether the firmware of the Link is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1     
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        linkFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        linkFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK,"OWRT")
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != linkFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),linkFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = linkFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Link Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Link Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Link Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])   
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                    #Check whether the firmware of the SlowCooker is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        slowCookerFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        slowCookerFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != slowCookerFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),slowCookerFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = slowCookerFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo SlowCooker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo SlowCooker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo SlowCooker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])    
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                    #Check whether the firmware of the Humidifier is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        humidifierFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        humidifierFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != humidifierFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),humidifierFirmwareVersion))                
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = humidifierFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo Humidifier Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo Humidifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo Humidifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                    #Check whether the firmware of the Air Purifier is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        airpurifierFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        airpurifierFirmwareVersion = self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != airpurifierFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),airpurifierFirmwareVersion))     
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = airpurifierFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo AirPurifier Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo AirPurifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo AirPurifier Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])   
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)    
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                    #Check whether the firmware of the HeaterA is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        heaterAFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        heaterAFirmwareVersion =  self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != heaterAFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),heaterAFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = heaterAFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo HeaterA Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo HeaterA Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo HeaterA Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                    #Check whether the firmware of the HeaterB is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        heaterBFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        heaterBFirmwareVersion =  self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != heaterBFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),heaterBFirmwareVersion))
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = heaterBFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo HeaterB Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo HeaterB Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo HeaterB Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
                if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                    #Check whether the firmware of the CoffeeMaker is Updated
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1 
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                    try:
                        coffeemakerFirmwareVersion = ""
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        coffeemakerFirmwareVersion =  self.MetaInfo[3].strip()
                        self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER)
                        assert self.wemoAppUtility.result == True
                        assert self.wemoAppUtility.firmwareVersionInfo != None
                        if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() != coffeemakerFirmwareVersion:
                            raise Exception("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),coffeemakerFirmwareVersion))   
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = coffeemakerFirmwareVersion
                        self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["WeMo CoffeeMaker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("WeMo CoffeeMaker Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    except:
                        self.WeMoAppAutomationLog.LogException()
                        os._exit(1)
                
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Motion
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Motion Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice                        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Motion Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Motion Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Motion Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Motion Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Motion Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Motion Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Motion Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Motion Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Motion Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Motion Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Motion Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])  
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Motion Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Motion Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Motion Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Motion Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Motion Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Motion Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)            
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Switch
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Switch Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Switch Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Switch Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Switch Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Switch Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Switch Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Switch Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Switch Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])                      
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Switch Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])               
                    self.wemoUpnp.setBinaryState("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call setBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.getBinaryState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call getBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    assert self.wemoUpnp.getStatus == "0"
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the SwitchV2
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SwitchV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo SwitchV2 Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo SwitchV2 Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo SwitchV2 Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo SwitchV2 Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo SwitchV2 Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo SwitchV2 Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo SwitchV2 Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo SwitchV2 Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo SwitchV2 Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo SwitchV2 Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])                      
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo SwitchV2 Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo SwitchV2 Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo SwitchV2 Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])               
                    self.wemoUpnp.setBinaryState("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call setBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.getBinaryState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call getBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    assert self.wemoUpnp.getStatus == "0"
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Insight
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Insight Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)  
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Insight Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Insight Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Insight Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Insight Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Insight Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]) 
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.setBinaryState("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call setBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.getBinaryState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call getBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    assert self.wemoUpnp.getStatus == "0"
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)

            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the InsightV2
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo InsightV2 Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)  
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Insight Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Insight Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Insight Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Insight Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Insight Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]) 
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])         
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Insight Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Insight Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])  
                    self.wemoUpnp.setBinaryState("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call setBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.getBinaryState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call getBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    assert self.wemoUpnp.getStatus == "0"
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
                    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Light Switch
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Light Switch Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Light Switch Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Light Switch Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Light Switch Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Light Switch Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Light Switch Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Light Switch Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Light Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Light Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Light Switch Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Light Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Light Switch Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Light Switch Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Light Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Light Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Light Switch Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Light Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Light Switch Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.setBinaryState("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call setBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.getBinaryState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call getBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    assert self.wemoUpnp.getStatus == "0"
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Dimmer
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Dimmer Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Dimmer Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Dimmer Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Dimmer Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Dimmer Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Dimmer Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Dimmer Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Dimmer Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Dimmer Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Dimmer Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Dimmer Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Dimmer Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])                        
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Dimmer Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Dimmer Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Dimmer Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Dimmer Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Dimmer Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Dimmer Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.setBinaryState("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call setBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.getBinaryState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call getBinaryState() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    assert self.wemoUpnp.getStatus == "0"
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Maker
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Maker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)  
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Maker Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Maker Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Maker Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Maker Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Maker Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Maker Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Maker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Maker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Maker Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Maker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Maker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Maker Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Maker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Maker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])         
                        else:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = ""
                            self.WeMoAppAutomationLog.Info("Wemo Maker Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Maker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Maker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Sensor=1,SwitchMode=0,SensorPresent=0,Switch=0)
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetAttributes() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the SlowCooker
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo SlowCooker Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo SlowCooker Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo SlowCooker Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo SlowCooker Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo SlowCooker Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo SlowCooker Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo SlowCooker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo SlowCooker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo SlowCooker Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo SlowCooker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo SlowCooker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.SlowCookerUpNp.SetSlowCookerState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"0","0")
                    if self.SlowCookerUpNp.responseCode != "200":
                        raise Exception("UPnP call SetSlowCookerState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))        
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
                    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Humidifier
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Humidifier Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Humidifier Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Humidifier Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Humidifier Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Humidifier Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Humidifier Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Humidifier Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Humidifier Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Humidifier Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Humidifier Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Humidifier Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])           
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],FanMode = 0)
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the AirPurifier
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo AirPurifier Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo AirPurifier Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo AirPurifier Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])         
                    self.resultsCSVFile.addRowToCsv(["WeMo AirPurifier Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo AirPurifier Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo AirPurifier Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo AirPurifier Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo AirPurifier Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo AirPurifier Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo AirPurifier Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo AirPurifier Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 0,Ionizer = 0)
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the HeaterA
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo HeaterA Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo HeaterA Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo HeaterA Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo HeaterA Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo HeaterA Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo HeaterA Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo HeaterA Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo HeaterA Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo HeaterA Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo HeaterA Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo HeaterA Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])        
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 1)
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the HeaterB
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo HeaterB Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo HeaterB Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo HeaterB Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo HeaterB Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo HeaterB Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo HeaterB Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo HeaterB Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo HeaterB Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo HeaterB Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo HeaterB Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo HeaterB Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 1)
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the CoffeeMaker
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1)
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo CoffeeMaker Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo CoffeeMaker Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo CoffeeMaker Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo CoffeeMaker Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo CoffeeMaker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo CoffeeMaker Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo CoffeeMaker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo CoffeeMaker Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                    self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    if self.wemoUpnp.responseCode != "200":
                        raise Exception("UPnP call changeFriendlyName() for the WeMo:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1)
                    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                #Getting the Home Id, Smart Device Id of the Link and upgrade the Firmware if the Firmware Upgrade is set to True
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.WeMoAppAutomationLog.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1     
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice        
                try:
                    self.wemoUpnp.getHomeId(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from WeMo UPnP:%s"%self.wemoUpnp.responseCode)
                    if self.wemoUpnp.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                        raise Exception("UPnP call getHomeId failed.We cannot read Home Id & Device Id from this WeMoSmart. Aborting the test!.")
                    
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId] = self.wemoUpnp.HomeId
                    self.WeMoAppAutomationLog.Info("Wemo Link Home Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Link Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Link Home Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId])
                    self.resultsCSVFile.addRowToCsv(["WeMo Link Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]])
                    self.resultsHtmlFile.HtmlHeader("WeMo Link Smart Device Description",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription]!=None:
                        self.wemoCloud.getSmartPhoneUniqueIdAndSmartPrivateKey(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoHomeId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription])
                        assert self.wemoCloud.result == True
                        if self.wemoCloud.smartPhoneUniqueId != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId] = self.wemoCloud.smartPhoneUniqueId
                            self.WeMoAppAutomationLog.Info("Wemo Link Smart Phone Unique Id is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                            self.resultsCSVFile.addRowToCsv(["Wemo Link Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Link Smart Phone Unique Id",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId])
                        if self.wemoCloud.smartPhonePrivateKey != None:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey] = self.wemoCloud.smartPhonePrivateKey
                            self.WeMoAppAutomationLog.Info("Wemo Link Smart Phone Private Key is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])
                            self.resultsCSVFile.addRowToCsv(["Wemo Link Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey]])
                            self.resultsHtmlFile.HtmlHeader("Wemo Link Smart Phone Private Key",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey])    
                except:
                    self.WeMoAppAutomationLog.LogException()
                    os._exit(1) 
                #Getting  the Paired List from the WeMo Link
                try:
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1     
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    self.WeMoAppAutomationLog.Info("GETTING THE PAIRED LIST OF THE LED BRIDGE:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp_LedBridge.setLogger(self.WeMoAppAutomationLog)
                    #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                    self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                    if self.wemoUpnp_LedBridge.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                        raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                    BulbsInNetwork = 0
                    getPairedListCount = 0 
                    if len(self.deviceIdList) > 0:
                        BulbsInNetwork = BulbsInNetwork + len(self.deviceIdList)
                    if len(self.osram_regular_deviceIdList) > 0:
                        BulbsInNetwork = BulbsInNetwork + len(self.osram_regular_deviceIdList)
                    if len(self.osram_ttb_deviceIdList) > 0:
                        BulbsInNetwork = BulbsInNetwork + len(self.osram_ttb_deviceIdList)
                    if len(self.osram_flex_deviceIdList) > 0:
                        BulbsInNetwork = BulbsInNetwork + len(self.osram_flex_deviceIdList)
                    if len(self.osram_gardenspot_deviceIdList) > 0:
                        BulbsInNetwork = BulbsInNetwork + len(self.osram_gardenspot_deviceIdList)
                    while True:
                        if getPairedListCount == 3:
                            self.WeMoAppAutomationLog.Error("The length of the Bulbs in Network:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(len(BulbsInNetwork)),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                            raise Exception("The length of the Device Id List:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(len(BulbsInNetwork)),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                        elif len(self.wemoUpnp_LedBridge.PairedDeviceList) >= BulbsInNetwork:break
                        else:
                            getPairedListCount = getPairedListCount + 1
                            #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                            self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            self.WeMoAppAutomationLog.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                self.WeMoAppAutomationLog.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                                raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                    DeviceIdList = []
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        DeviceIdList.append(str(led["DeviceID"]))
                    if len(self.deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                self.WeMoAppAutomationLog.Info("Setting the Name:%s of LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.WeMoAppAutomationLog.Info("Setting the Device Status of LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break
                        if len(self.deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                    self.WeMoAppAutomationLog.Info("Setting the Name:%s of LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode == "200":
                                        assert self.wemoUpnp_LedBridge.Status == 1
                                    else:
                                        raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.WeMoAppAutomationLog.Info("Setting the Device Status of LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    break 
                    if len(self.osram_regular_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_REGULAR_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_REGULAR_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))    
                                break
                        if len(self.osram_regular_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                    self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_REGULAR_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode == "200":
                                        assert self.wemoUpnp_LedBridge.Status == 1
                                    else:
                                        raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_REGULAR_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    break
                    if len(self.osram_ttb_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_TTB_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_TTB_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break
                        if len(self.osram_ttb_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                    self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_TTB_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode == "200":
                                        assert self.wemoUpnp_LedBridge.Status == 1
                                    else:
                                        raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_TTB_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])                                    
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    break 
                    if len(self.osram_flex_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_FLEX_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_FLEX_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break
                        if len(self.osram_flex_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                    self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_FLEX_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode == "200":
                                        assert self.wemoUpnp_LedBridge.Status == 1
                                    else:
                                        raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_FLEX_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    break
                    if len(self.osram_gardenspot_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_GARDENSPOT_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_GARDENSPOT_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","250:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","26214:9830:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break
                        if len(self.osram_gardenspot_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = None
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.ModelCode] = str(led["ModelCode"])
                                    self.WeMoAppAutomationLog.Info("Setting the Name:%s of OSRAM_GARDENSPOT_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode == "200":
                                        assert self.wemoUpnp_LedBridge.Status == 1
                                    else:
                                        raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.WeMoAppAutomationLog.Info("Setting the Device Status of OSRAM_GARDENSPOT_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","250:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","26214:9830:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                    if self.wemoUpnp_LedBridge.responseCode != "200":
                                        raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                    break
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = 0
                    while True:
                        if ssdp.ipOfWeMoDevice != None:
                            break
                        elif discoveryCount == 3:
                            self.WeMoAppAutomationLog.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        elif ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                            discoveryCount = discoveryCount + 1     
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    self.WeMoAppAutomationLog.Info("GETTING THE PAIRED LIST OF THE LED BRIDGE:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                    self.wemoUpnp_LedBridge.setLogger(self.WeMoAppAutomationLog)
                    #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                    self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                    self.WeMoAppAutomationLog.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                    if self.wemoUpnp_LedBridge.responseCode != "200":
                        self.WeMoAppAutomationLog.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                        raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                    getPairedListCount = 0 
                    while True:
                        if getPairedListCount == 3:
                            self.WeMoAppAutomationLog.Error("The length of the Bulbs in Network:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(BulbsInNetwork),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                            raise Exception("The length of the Device Id List:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(BulbsInNetwork),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                        elif len(self.wemoUpnp_LedBridge.PairedDeviceList) >= BulbsInNetwork:break
                        else:
                            getPairedListCount = getPairedListCount + 1
                            #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                            self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            self.WeMoAppAutomationLog.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                self.WeMoAppAutomationLog.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                                raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                    DeviceIdList = []
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        DeviceIdList.append(str(led["DeviceID"]))
                    if len(self.deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_1:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_1:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                        if len(self.deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                        self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                        raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    else:
                                        break 
                    if len(self.osram_regular_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                        if len(self.osram_regular_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                        self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                        raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    else:
                                        break
                    if len(self.osram_ttb_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                        if len(self.osram_ttb_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                        self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                        raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    else:
                                        break
                    if len(self.osram_flex_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                        if len(self.osram_flex_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                        self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                        raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    else:
                                        break
                    if len(self.osram_gardenspot_deviceIdList) > 0:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.WeMoAppAutomationLog.Error("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                        if len(self.osram_gardenspot_deviceIdList) > 1:
                            if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                                self.WeMoAppAutomationLog.Error("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                                raise Exception("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                        self.WeMoAppAutomationLog.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                        raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    else:
                                        break    
                except:
                    self.WeMoAppAutomationLog.LogException()
                    self.WeMoAppAutomationLog.Error("LED BRIDGE UPNP CALLS FAILURE.")
                    raise Exception("LED BRIDGE UPNP CALLS FAILURE.")
                    os._exit(1)
                if self.FIRMWARE_UPGRADE == True:
                    self.updateInProcess = False
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE OF THE BULBS ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersionOfFirstBulb = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    if len(self.deviceIdList) > 1:
                        currentFirmwareVersionOfSecondBulb = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.BULBS)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    firmwareVersionOfBulbsOnCloud = str(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip())
                    firmwareVersionUrlOfBulbsOnCloud = str(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip())
                    if int(firmwareVersionOfBulbsOnCloud,16) == int(currentFirmwareVersionOfFirstBulb,16):
                        self.WeMoAppAutomationLog.Info("BULB FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,firmwareVersionOfBulbsOnCloud,currentFirmwareVersionOfFirstBulb))
                        self.WeMoAppAutomationLog.Info("Led Bulb_1 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.resultsCSVFile.addRowToCsv(["Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    elif int(firmwareVersionOfBulbsOnCloud,16) > int(currentFirmwareVersionOfFirstBulb,16):
                        self.WeMoAppAutomationLog.Info("BULB FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,firmwareVersionOfBulbsOnCloud,currentFirmwareVersionOfFirstBulb))
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(firmwareVersionOfBulbsOnCloud))
                        self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                        self.wemoUpnp_LedBridge.UpgradeSubDeviceFirmware(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId], "Upgrade", firmwareVersionUrlOfBulbsOnCloud)
                        if self.wemoUpnp_LedBridge.Status != 0:
                            self.WeMoAppAutomationLog.Critical("Firmware Upgrade Status of the Bulb returned error. Continuing with next Bulb!!.")
                            self.resultsCSVFile.addRowToCsv(["Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                            self.resultsHtmlFile.HtmlHeader("Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        self.updateInProcess = True
                    if len(self.deviceIdList) > 1:
                        if int(firmwareVersionOfBulbsOnCloud,16) == int(currentFirmwareVersionOfSecondBulb,16):
                            self.WeMoAppAutomationLog.Info("BULB FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,firmwareVersionOfBulbsOnCloud,currentFirmwareVersionOfSecondBulb))
                            self.WeMoAppAutomationLog.Info("Led Bulb_2 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                            self.resultsCSVFile.addRowToCsv(["Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                            self.resultsHtmlFile.HtmlHeader("Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        elif int(firmwareVersionOfBulbsOnCloud,16) > int(currentFirmwareVersionOfSecondBulb,16):
                            self.WeMoAppAutomationLog.Info("BULB FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,firmwareVersionOfBulbsOnCloud,currentFirmwareVersionOfSecondBulb))
                            self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(firmwareVersionOfBulbsOnCloud))
                            self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                            self.wemoUpnp_LedBridge.UpgradeSubDeviceFirmware(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId], "Upgrade", firmwareVersionUrlOfBulbsOnCloud)
                            if self.wemoUpnp_LedBridge.Status != 0:
                                self.WeMoAppAutomationLog.Critical("Firmware Upgrade Status of the Bulb returned error. Continuing with next Bulb!!.")
                                self.resultsCSVFile.addRowToCsv(["Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                                self.resultsHtmlFile.HtmlHeader("Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                            self.updateInProcess = True
                    if self.updateInProcess == True and self.wemoUpnp_LedBridge.Status == 0:
                        time.sleep(600)
                        self.WeMoAppAutomationLog.Info("GETTING THE PAIRED LIST OF THE LED BRIDGE:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                        self.wemoUpnp_LedBridge.setLogger(self.WeMoAppAutomationLog)
                        self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                        self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST")
                        self.WeMoAppAutomationLog.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                        if self.wemoUpnp_LedBridge.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                            raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                        if len(self.deviceIdList) != len(self.wemoUpnp_LedBridge.PairedDeviceList):
                            self.WeMoAppAutomationLog.Error("The length of the Device Id List:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(len(self.deviceIdList)),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                            raise Exception("The length of the Device Id List:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(len(self.deviceIdList)),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))  
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])       
                        assert self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]!=None
                        if len(self.deviceIdList) > 1:
                            self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = None
                            for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                                if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = str(led["FirmwareVersion"])
                            assert self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]!=None
                        assert str(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) == str(firmwareVersionOfBulbsOnCloud)
                        self.resultsCSVFile.addRowToCsv(["Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                        self.resultsHtmlFile.HtmlHeader("Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                        if len(self.deviceIdList) > 1:
                            assert str(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) == str(firmwareVersionOfBulbsOnCloud)
                            self.resultsCSVFile.addRowToCsv(["Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                            self.resultsHtmlFile.HtmlHeader("Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                else:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO FALSE.")
                    self.WeMoAppAutomationLog.Info("Led Bulb_1 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    self.resultsCSVFile.addRowToCsv(["Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                    self.resultsHtmlFile.HtmlHeader("Bulb_1 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])   
                    self.WeMoAppAutomationLog.Info("Led Bulb_2 Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    self.resultsCSVFile.addRowToCsv(["Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]])
                    self.resultsHtmlFile.HtmlHeader("Bulb_2 Firmware Version",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
            
            self.resultsCSVFile.addRowToCsv(["WeMo Under Test","WeMo Platform Feature","Test Case","Test Title","Result", "Errors","Time","Comments","Usage"])
            self.resultsHtmlFile.createHtmlTableHeader(["WeMo Under Test","WeMo Platform Feature","Test Case","Test Title", "Result", "Errors","Time","Comments","Usage"])
            
            self.totalTestCountInfoAndDetails = {}
            failedTestCase = None
            CurrentRunTime = datetime.datetime.now()
            for srv in self.service:
                self.WeMoAppAutomationLog.Info("Running the Service:%s"%str(srv))
                if self.cmdLine.options.testcase == 'all':
                    self.testCase = os.listdir(os.path.join(self.TestCaseDir, srv))
                    self.WeMoAppAutomationLog.Info("Running the TestCases:%s for Service:%s"%(str(self.testCase),str(srv)))
                for tCase in self.testCase:
                    if tCase.find(".steps") == -1:
                        #This is not a test case file .. so skip it
                        self.WeMoAppAutomationLog.Info("This file:%s is not a test case file. So skipping it"%(str(tCase)))
                        continue
                    self.WeMoAppAutomationLog.Info("Running the TestCase:%s for Service:%s"%(str(tCase),str(srv)))
                    testID = "####"
                    testTitle = "####"
                    testResult = "PASS",
                    
                    #see if this test case is asked to be skipped
                    if tCase in self.skipTheseTestCases:
                        testID, testTitle, testType = self.util.GetTestIDAndTitleAndType(self.TestCaseDir, srv, tCase)
                        if self.cmdLine.options.testcase == 'all':
                            self.resultsCSVFile.addRowToCsv([srv,testID, testTitle, "Skip"])
                            self.resultsHtmlFile.addRowToHtml([srv,testID, testTitle, "Skip"])
                            self.totalTestCountInfoAndDetails[testID] = "SKIP"
                            continue
                    self.WeMoAppAutomationLog.Info("Opening the Test Case file:%s and reading the steps to be executed"%tCase)
                    try:
                        fp = open(os.path.join(self.TestCaseDir, srv, tCase), "r")
                    except:
                        self.WeMoAppAutomationLog.Critical("TestCase not found:%s"%os.path.join(self.TestCaseDir, srv, tCase))
                        continue
                    
                    self.WeMoAppAutomationLog.Info("Reading the steps in the Testcase:%s"%tCase)
                    testSteps = fp.read()
                    self.WeMoAppAutomationLog.Info("Test Steps in the Testcase:%s"%testSteps)
                    fp.close()
                    testSteps = testSteps.split("\n")
                    #check deviceType to see whether needs run
                    deviceType = self.util.GetDeviceType(testSteps)
                    print deviceType
                    if ("ALL" not in deviceType) and (bool(set(deviceType).intersection(self.devicesInNetwork))==False):
                        self.WeMoAppAutomationLog.Warning("Skip the test case:%s as the device Type:%s is not in the Devices in the Network."%(tCase,deviceType))
                        continue
                    testType = self.util.GetTestType(testSteps)
                    self.WeMoAppAutomationLog.Info("Testcase:%s is a %s test case"%(tCase,testType))
                    
                    if self.cmdLine.options.positive == True and testType == "NEGATIVE":
                        self.WeMoAppAutomationLog.Warning("The command line option is set to run only positive test case. So skipping the negative test case")
                        continue
                    if self.cmdLine.options.negative == True and testType == "POSITIVE":
                        self.WeMoAppAutomationLog.Warning("The command line option is set to run only negative test case. So skipping the psotive test case")
                        continue
                    if (self.cmdLine.options.positive == True or self.cmdLine.options.negative == True) and testType == None:
                        self.WeMoAppAutomationLog.Warning("No test type is mentioned for this particular test case:%s"%tCase)
                        continue
                    
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                        
                        CurrentTimeForAndroidRun = datetime.datetime.now()
                        timeElapsed = CurrentTimeForAndroidRun - CurrentRunTime
                        timeElapsed = timeElapsed.total_seconds() /60 /60
                        if timeElapsed > 400:
                            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.AndroidPrimaryWeMoApp.result == True
                            
                            #Rebooting the Primary Smart Phone for Android                              
                            self.AndroidPrimaryWeMoApp._rebootTheMobileDevice()
                            assert self.AndroidPrimaryWeMoApp.result == True 
                            #Resetting the Device Bridge for Android
                            self.AndroidPrimaryWeMoApp._resetDeviceBridge("Android") 
                            if self.AndroidPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("The Reset is being successful")
                            CurrentRunTime = datetime.datetime.now()
                            
                        if timeElapsed > 200:
                            self.WeMoAppAutomationLog.Info("Reseting the device bridge in order to continue to Run smoothly")
                            self.AndroidPrimaryWeMoApp._resetDeviceBridge("Android") 
                            if self.AndroidPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("The Reset is being successful") 
                            CurrentRunTime = datetime.datetime.now()
                            self.AndroidPrimaryWeMoApp._clearApplicationData(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                            self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword)
                            self.WeMoAppAutomationLog.Info("The App Data is cleared from the Smart device")
                            CurrentRunTime = datetime.datetime.now()    
                            
                         #Rebooting the Secondary Smart Phone for Android    
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:   

                            if timeElapsed > 4:                            
                                self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
                                assert self.AndroidPrimaryWeMoApp.result == True
                                                                                   
                                #Resetting the Device Bridge for Android
                                self.AndroidPrimaryWeMoApp._rebootTheMobileDevice()
                                #self.AndroidPrimaryWeMoApp._resetDeviceBridge("Android") 
                                assert self.AndroidPrimaryWeMoApp.result == True 
                                CurrentRunTime = datetime.datetime.now()
                            
                            if timeElapsed > 2:
                                self.AndroidPrimaryWeMoApp._clearApplicationData(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                                self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword)
                                self.WeMoAppAutomationLog.Info("The App Data is cleared from the Smart device")
                                CurrentRunTime = datetime.datetime.now()    
                                        
                            time.sleep(60)                                             
                            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.AndroidPrimaryWeMoApp.result == True
                            
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                        CurrentTimeForiOSRun = datetime.datetime.now()
                        timeElapsed = CurrentTimeForiOSRun - CurrentRunTime
                        timeElapsed = timeElapsed.total_seconds() /60 /60
                        if timeElapsed > 200:
                            #Rebooting the Primary Smart Phone for iOS
                            self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.iOSPrimaryWeMoApp.result == True
                            
                            self.iOSPrimaryWeMoApp._rebootSmartDevice()
                            assert self.iOSPrimaryWeMoApp.result == True

                            time.sleep(60)
                            
                            CurrentRunTime = datetime.datetime.now()
                            
                            #Rebooting the Secondary Smart Phone for iOS
                            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                                self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
                                assert self.iOSPrimaryWeMoApp.result == True
                                
                                self.iOSPrimaryWeMoApp._rebootSmartDevice()
                                assert self.iOSPrimaryWeMoApp.result == True
                                
                                time.sleep(60)
                                
                                self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                                assert self.iOSPrimaryWeMoApp.result == True
                                
                                CurrentRunTime = datetime.datetime.now()                                

                    self.WeMoAppAutomationLog.Info("Creating a log file for the test case:%s"%tCase)
                    self.logFP = Logger(tCase.replace(".steps", ".log"))
                    self.WeMoAppAutomationLog.Info("Creating the log file:%s for the test case:%s"%(os.path.join(self.LogDir,tCase.replace(".steps", ".log")),tCase))
                    self.logFP.Info(self.logHeaderString)
                    self.wp.setLogger(self.logFP)
                    self.wemoUpnp.setLogger(self.logFP)
                    self.wemoUpnp_Insight.setLogger(self.logFP)
                    self.wemoUpnp_LightSwitch.setLogger(self.logFP)
                    self.wemoUpnp_Dimmer.setLogger(self.logFP)
                    self.wemoUpnp_LedBridge.setLogger(self.logFP)
                    self.rulesDB.setLogger(self.logFP)
                    self.wemoSmartUpnp.setLogger(self.logFP)
                    self.SlowCookerUpNp.setLogger(self.logFP)
                    self.wemoAppUtility.setLogger(self.logFP)
                    self.wemoAppHttpUtility.setLogger(self.logFP)
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                        self.nest.setLogger(self.logFP)
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                        self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork or WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Insight.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Link.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Maker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Dimmer.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_SlowCooker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Humidifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_AirPurifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_HeaterA.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_HeaterB.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_CoffeeMaker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Nest.setLogger(self.logFP)
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                        self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Insight.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Link.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Maker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Dimmer.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_SlowCooker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Humidifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_AirPurifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_HeaterA.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_HeaterB.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_CoffeeMaker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Nest.setLogger(self.logFP)
                    testCaseStartTime = time.time()
                    testID, testTitle, testType = self.util.GetTestIDAndTitleAndType(self.TestCaseDir, srv, tCase)
                    self.testIdList =  testID.split("<br /><br />")
                    self.testIdPassFailDictionary = {}
                    for testCaseId in self.testIdList:
                        self.testIdPassFailDictionary[testCaseId] = "FAIL" + "<br /><br />"
                    testResult = self.RunTestCase(self.TestCaseDir, srv, tCase)
                    testCaseEndTime = time.time()
                    testCaseDuration = testCaseEndTime - testCaseStartTime
                    testCaseDuration1 = ""
                    if testCaseDuration > 60:
                        testCaseDuration = testCaseDuration / 60
                        if testCaseDuration > 60:
                            testCaseDuration = testCaseDuration / 60
                            testCaseDuration1 = testCaseDuration
                            testCaseDuration = "{0:.2f}".format(testCaseDuration) + " Hours"
                        else:
                            testCaseDuration1 = testCaseDuration
                            testCaseDuration = "{0:.2f}".format(testCaseDuration) + " Minutes"
                    else:
                        testCaseDuration1 = testCaseDuration
                        testCaseDuration = "{0:.2f}".format(testCaseDuration) + " Seconds"                   
                    self.WeMoAppAutomationLog.Info("Duration of the Test Case:%s is %s"%(tCase,str(testCaseDuration)))
                    self.WeMoAppAutomationLog.Info("Test Result of the Test Case:%s is %s"%(tCase,str(testResult)))
                    self.logFP.Info("\n\nTestResult: " + str(testResult))
                    self.logFP.Info("\n\nTest Case Duration: " + str(testCaseDuration))
                    self.logFP.__del__()
                    #testID, testTitle, testType = self.util.GetTestIDAndTitleAndType(self.TestCaseDir, srv, tCase)
                    TestIdPassFail = ""
                    for testCaseId in self.testIdPassFailDictionary:
                        self.totalTestCountInfoAndDetails[testCaseId] = self.testIdPassFailDictionary[testCaseId].replace("<br /><br />","").strip()
                        TestIdPassFail = TestIdPassFail + "%s:%s;"%(testCaseId,self.testIdPassFailDictionary[testCaseId])
                    if ("ALL" not in deviceType):
#                         devicesUnderTest = " ".join(deviceType)
                        devicesUnderTest = " ".join(list(set(deviceType).intersection(self.devicesInNetwork)))
                    if ("ALL" in deviceType):
                        devicesUnderTest = " ".join(self.devicesInNetwork)
                    MemoryUsage_DuringRun = "CPU Usage at Start:%s <br/>,Memory Usage at Start:%s <br/>CPU Usage at End:%s <br/>,Memory Usage at End:%s <br/>"%(self.CPU_Usage_At_Start,self.Memory_Usage_At_Start,self.CPU_Usage_At_End,self.Memory_Usage_At_End)
                    if testResult[0].strip() == "FAIL":
                        Failure_Rsn = None
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                            if self.iOSPrimaryWeMoApp.exception_msg != None :
                                Failure_Rsn = self.iOSPrimaryWeMoApp.exception_msg
                            else:
                                Failure_Rsn = " "
                        elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                            
                            if self.AndroidPrimaryWeMoApp.exception_msg != None:
                                Failure_Rsn = self.AndroidPrimaryWeMoApp.exception_msg 
                            else:
                                Failure_Rsn = " "
                        self.resultsHtmlFile.addRowToHtml([devicesUnderTest,srv,testID, testTitle,testResult[0].strip(),"%s <br /> Failed Step:%s and Reason for Failure:%s"%(Failure_Rsn,testResult[2].strip(),testResult[1].strip()),str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun],"Red")
                        self.resultsCSVFile.addRowToCsv([devicesUnderTest,srv,testID, testTitle, testResult[0].strip(), "Failed Step:%s and Reason for Failure:%s"%(testResult[2].strip(),testResult[1].strip()),str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun])
                        serviceFailedTestCaseDir = os.path.join(self.FailedTestCaseDir,srv)
                        if not os.path.exists(serviceFailedTestCaseDir):
                            self.WeMoAppAutomationLog.Info("Creating the directory:%s for the failed test case:%s"%(serviceFailedTestCaseDir,os.path.join(self.TestCaseDir, srv, tCase)))
                            os.mkdir(serviceFailedTestCaseDir)
                        shutil.copy(os.path.join(self.TestCaseDir, srv, tCase), serviceFailedTestCaseDir)                    
                    elif testResult[0].strip() == "PASS":
                        self.resultsCSVFile.addRowToCsv([devicesUnderTest,srv,testID, testTitle, testResult[0].strip(),"",str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun])
                        self.resultsHtmlFile.addRowToHtml([devicesUnderTest,srv,testID, testTitle,testResult[0].strip(),"",str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun])
                    self.tpDoc.Doc("--------------------------------------------------------------\n")
                    if testResult[0].strip() == "FAIL":
                        try:
                            failedTestCase = tCase
                            self.WeMoAppAutomationLog.Error("The test case:%s belonging to the Service:%s failed.Bringing the Wemo Devices to default state."%(tCase,srv))
                            self.WeMoAppAutomationLog.Info("Creating a App Log file for the failed test case:%s belonging to service:%s."%(tCase,srv))
                            self.logFP = Logger("%s-AppLogs.log"%tCase.replace(".steps",""))
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s Device Logs.log"%tCase.replace(".steps",""))
                            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                                self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                                self.iOSPrimaryWeMoApp._getTheIOSDeviceLogs()
                            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                                self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                                self.AndroidPrimaryWeMoApp._getTheAndroidDeviceLogs()
                            self.logFP.__del__()
                            self.bringTheWeMoBackToDefaultAfterFailure(failedTestCase)
                        except:
                            self.WeMoAppAutomationLog.Error("Bringing the Wemo Devices to the default state resulted in an error for Service:%s and test cases:%s."%(srv,tCase))
                            self.WeMoAppAutomationLog.LogException()
                    # test case ends, generating seetest report
                    try:
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                            self.iOSPrimaryWeMoApp.generateReports()
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                            self.AndroidPrimaryWeMoApp.generateReports()
                    except Exception as e:
                        self.WeMoAppAutomationLog.Info("An exception occured during seetest report generation.Eception is <%s>"%str(e))
                        pass
        except:
            self.WeMoAppAutomationLog.LogException()
            if self.sendNoEmail == False:
                self.emailUtil.sendEmail("WeMo App Automation Exception Occured!!!Aborting the test","ExceptionType:%s\nExceptionDetails:%s\nTraceBack:%s\n"%(str(sys.exc_info()[0]),str(sys.exc_info()[1]),str(traceback.extract_tb(sys.exc_info()[2]))),"admin")                      
        finally:
            #Need to modify the fucntion
            csvFilePath = self.resultsCSVFile.getCsvFilePath()
            self.WeMoAppAutomationLog.Info("Wemo App Automation Csv Report:%s created"%csvFilePath)
            self.resultsCSVFile.__del__()
            summaryString = "\n==============\nSmart Device Info\n==============\n\t\tSmart Phone:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone+"\n\t\tSmart Device OS Version:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION+\
                "\n==============\nApp Info\n==============\n\t\tAppVersion:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION+"\n\t\tApp Link:"+WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK+\
                "\n==============\nWeMo Devices In Network\n==============\n\t\tWeMo Devices:"+ ','.join(self.devicesInNetwork)+"\n"
            #totalCount, passCount, failCount, skipCount = self.util.WemoAppPassFailSkipCount(None,csvFilePath)
            totalCount = len(self.totalTestCountInfoAndDetails)
            passCount = len([testCaseId for testCaseId in self.totalTestCountInfoAndDetails if self.totalTestCountInfoAndDetails[testCaseId]=="PASS"])
            failCount = len([testCaseId for testCaseId in self.totalTestCountInfoAndDetails if self.totalTestCountInfoAndDetails[testCaseId]=="FAIL"])
            skipCount = len([testCaseId for testCaseId in self.totalTestCountInfoAndDetails if self.totalTestCountInfoAndDetails[testCaseId]=="SKIP"])
            summaryString += "\nPass: " + str(passCount) + "\nSkip: " + str(skipCount) + "\nFail: " + str(failCount) + "\n"
            self.resultsHtmlFile.HtmlHeader("Total Test Cases",str(totalCount))
            self.resultsHtmlFile.HtmlHeader("Passed Test Cases",str(passCount))
            self.resultsHtmlFile.HtmlHeader("Failed Test Cases",str(failCount))
            self.resultsHtmlFile.HtmlHeader("Skipped Test Cases",str(skipCount))
            self.WeMoAppAutomationLog.Info("Passed Test Cases: " + str(passCount) + "\nSkipped Test Cases: " + str(skipCount) + "\nFailed Test Cases: " + str(failCount) + "\n")         
            if (passCount + failCount) > 0:
                summaryString+= "\n==============\nTest Cases (Passed or Failed)\n==============\n\t\tTotal Test Cases:"+str(totalCount)+"\n\t\tPassed Test Cases:"+str(passCount)+\
                "\n\t\tFailed Test Cases:"+str(failCount)+"\n\t\tSkipped Test Cases:"+str(skipCount) + "\n\t\tPass percentage: " + "{0:.2f}".format(passCount * 1.0 * 100/(passCount + failCount)) +"\n"
            testEndTime = time.time()
            duration = testEndTime - testStartTime
            graphDuration = duration
            duration1 = ""
    
            if duration > 60:
                duration = duration / 60
                if duration > 60:
                    duration = duration / 60
                    duration1 = duration
                    duration = "{0:.2f}".format(duration) + " Hours"
                else:
                    duration1 = duration
                    duration = "{0:.2f}".format(duration) + " Minutes"
            else:
                duration1 = duration
                duration = "{0:.2f}".format(duration) + " Seconds"
    
            summaryString += "Test Duration: " + duration + "\n"
            self.resultsHtmlFile.HtmlHeader("Test Duration",str(duration))
            self.WeMoAppAutomationLog.Info("Test Duration: " + str(duration) + "\n")
            
            subject = "WEMO APP AUTOMATION TEST DEVICE TOOL - P:%d F:%d S:%d D:%.2f"%(passCount, failCount, skipCount, duration1)
            
            self.WeMoAppAutomationLog.Info("WEMO APP AUTOMATION TEST DEVICE TOOL Test Plan Document:%s created"%self.TestPlanDocument)
            #self.wemoWhirlDataBase.__del__()
            self.tpDoc.__del__()
            self.resultsHtmlFile.writeToHtml()  
            self.resultsHtmlFile.__del__()
            self.WeMoAppAutomationLog.Info("Uploading the results to the Report Server and sending an email")
            self.WeMoAppAutomationLog.__del__()
            if self.cmdLine.options.runFailedTestCases == True:
                print "The option is set as True to run the Failed Test Cases in the folder:%s"%self.FailedTestCaseDir
                try:
                    failedTestFolders = os.listdir(self.FailedTestCaseDir)
                    if len(failedTestFolders)>0:
                        print "There are test cases which have failed. So running the failed test cases"
                        self.rerunFailedTestCases(self.FailedTestCaseDir)
                except:
                    print str(sys.exc_info()[0])
                    print str(sys.exc_info()[1])
                    print str(traceback.extract_tb(sys.exc_info()[2]))
                    pass
            self.archiveFile = self.name + "-" + strftime("%Y-%m-%d_%H-%M-%S") + ".zip"
            if self.updateConfluence == True:
                logLink = self.ftpUtil.UPLOAD_LINK + self.name + "/" + self.archiveFile
                FirmwareVersions = ""
                Platform = ",".join(self.service)
                for wemoDevice in self.WemoDevice:
                    FirmwareVersions = FirmwareVersions + "%s:%s;"%(wemoDevice,self.WemoDevice[wemoDevice][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                self.confluenceObj.UpdateConfluencePage("",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION,"%s->%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK),self.cmdLine.options.runtype.upper(),Platform,",".join(self.devicesInNetwork),FirmwareVersions,str(totalCount), \
                                                        str(passCount), str(failCount), self.TestPlanDocument, self.updateConfluenceHtmlFileName,logLink, "","", "", strftime("%Y-%m-%d_%H-%M-%S"))
            else:
                print "Did not upload the reports to Confluence as uploading to Confluence is disabled"
            if self.createGraph == True:
                logLink = self.ftpUtil.UPLOAD_LINK + self.name + "/" + self.archiveFile
                self.appAutomationDictionary['Total_number_of_test_cases'] = str(totalCount)
                self.appAutomationDictionary['Total_number_of_passes'] = str(passCount)
                self.appAutomationDictionary['Total_number_of_failure'] = str(failCount)
                self.appAutomationDictionary['Total_Execution_time'] = graphDuration
                self.appAutomationDictionary['FTP_Logs_Link'] = logLink
                self.updateDataBaseForGraph()
                try:
                    print "Creating the Graph for the App Automation Tool"
                    self.graphObj.updateDB(self.appAutomationDictionary)
                except:
                    print "Could not create the Graph for the App Automation Tool due to some errors"
            else:
                print "Did not upload the data on the Database to create the Graph"
            self.archiveFile = self.archive.ArchiveLogs(self.name, None, self.archiveFile)
            if self.archiveFile != "":
                if self.cmdLine.options.uploadreport == True:
                    #upload the file - it should return a link to that file
                    fileLink = None
                    try:
                        fileLink = self.ftpUtil.uploadArchiveToServer(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py")), os.pardir)), "temp",self.archiveFile), self.name)
                    except:
                        print "Could not upload the archive file:%s to the Ftp Server"%self.archiveFile
                    if fileLink!=None:
                        summaryString += "\nLink to report: " + fileLink + "\n"
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail(subject, summaryString)            
                else:
                    if self.sendNoEmail == False:
                        self.emailUtil.sendEmail(subject, summaryString, None, self.archiveFile)
                    else:
                        print "WeMoApp Archived File:%s"%self.archiveFile
    
    def rerunFailedTestCases(self,failedTestCaseDirectory):
        """
        The function which is used to run failed test cases
        """
        try:
            self.rerunFailedTestCaseInProgress = True
            self.WeMoAppAutomationLog = Logger(os.path.basename("WEMO_APP_AUTOMATION_SNS_INSIGHT_LS.py").replace(".py",".log"),logDir=self.FailedTestCaseLogDir)
            self.WeMoAppAutomationLog.Info("==================================")
            self.WeMoAppAutomationLog.Info("Execution of the Failed Test Cases")
            self.WeMoAppAutomationLog.Info("Failed Test Case Directory:%s"%(failedTestCaseDirectory))
            self.WeMoAppAutomationLog.Info("==================================")
            self.WeMoAppAutomationLog.Info("WeMo App Automation is about to start!")
            #Creation of the CSV Report and the Html Report
            self.resultsCSVFile = CsvReport("WeMo_App_Automation_FailedTestCase_%s"%(self.csvReport,"_".join(self.devicesInNetwork)),logDir=self.FailedTestCaseLogDir)
            self.resultsHtmlFile = HtmlReport("WeMo_App_Automation_FailedTestCase_%s"%(self.htmlReport,"_".join(self.devicesInNetwork)),logDir=self.FailedTestCaseLogDir)
            self.WeMoAppAutomationLog.Info("Creating the WeMoApp Automation CSV log:%s in the logs directory:%s"%(self.resultsCSVFile.getCsvFilePath(),self.FailedTestCaseLogDir))
            self.WeMoAppAutomationLog.Info("Creating the WeMoApp Automation Html log:%s in the logs directory:%s"%(self.resultsHtmlFile.getHhtmlFilePath(),self.FailedTestCaseLogDir))
            self.updateConfluenceHtmlFileName = os.path.basename(self.resultsHtmlFile.getHhtmlFilePath())
            self.resultsCSVFile.openCsv()
            self.resultsHtmlFile.openHtml()
            self.resultsHtmlFile.HtmlTitle("Wemo App Test Device Tool To Execute Failed Test Cases")
            self.resultsCSVFile.addRowToCsv(["Host PC",self.TestPCName])
            self.resultsHtmlFile.HtmlHeader("Host PC",self.TestPCName)
            self.resultsCSVFile.addRowToCsv(["Platform",self.TestPCPlatform])
            self.resultsHtmlFile.HtmlHeader("Platform",self.TestPCPlatform)
            self.resultsCSVFile.addRowToCsv(["Smart Phone Device",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone])
            self.resultsHtmlFile.HtmlHeader("Smart Phone Device",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone)
            self.resultsCSVFile.addRowToCsv(["Smart Phone OS Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION])
            self.resultsHtmlFile.HtmlHeader("Smart Phone OS Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION)
            self.resultsCSVFile.addRowToCsv(["App Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION])
            self.resultsHtmlFile.HtmlHeader("App Version",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION)
            self.resultsCSVFile.addRowToCsv(["App Release",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE])
            self.resultsHtmlFile.HtmlHeader("App Release",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE)
            self.resultsCSVFile.addRowToCsv(["App Link",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK])
            self.resultsHtmlFile.HtmlHeader("App Link",WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK)
            
            self.resultsCSVFile.addRowToCsv(["WeMo Under Test","WeMo Platform Feature","Test Case","Test Title","Result", "Errors","Time","Comments","Usage"])
            self.resultsHtmlFile.createHtmlTableHeader(["WeMo Under Test","WeMo Platform Feature","Test Case","Test Title", "Result", "Errors","Time","Comments","Usage"])
            testStartTime = time.time()
            self.WeMoAppAutomationLog.Info("WeMoApp Automation Test Start Time:%s"%str(testStartTime))
            self.service = os.listdir(failedTestCaseDirectory)
            self.totalTestCountInfoAndDetails = {}
            failedTestCase = None
            CurrentRunTime = datetime.datetime.now()
            for srv in self.service:
                self.WeMoAppAutomationLog.Info("Running the Service:%s"%str(srv))
                self.testCase = os.listdir(os.path.join(failedTestCaseDirectory, srv))
                self.WeMoAppAutomationLog.Info("Running the TestCases:%s for Service:%s"%(str(self.testCase),str(srv)))
                for tCase in self.testCase:
                    if tCase.find(".steps") == -1:
                        #This is not a test case file .. so skip it
                        self.WeMoAppAutomationLog.Info("This file:%s is not a test case file. So skipping it"%(str(tCase)))
                        continue
                    self.WeMoAppAutomationLog.Info("Running the TestCase:%s for Service:%s"%(str(tCase),str(srv)))
                    testID = "####"
                    testTitle = "####"
                    testResult = "PASS",
                    self.WeMoAppAutomationLog.Info("Opening the Test Case file:%s and reading the steps to be executed"%tCase)
                    try:
                        fp = open(os.path.join(failedTestCaseDirectory, srv, tCase), "r")
                    except:
                        self.WeMoAppAutomationLog.Critical("TestCase not found:%s"%os.path.join(failedTestCaseDirectory, srv, tCase))
                        continue
                    self.WeMoAppAutomationLog.Info("Reading the steps in the Testcase:%s"%tCase)
                    testSteps = fp.read()
                    self.WeMoAppAutomationLog.Info("Test Steps in the Testcase:%s"%testSteps)
                    fp.close()
                    testSteps = testSteps.split("\n")
                    #check deviceType to see whether needs run
                    deviceType = self.util.GetDeviceType(testSteps)
                    if ("ALL" not in deviceType) and (bool(set(deviceType).intersection(self.devicesInNetwork))==False):
                        self.WeMoAppAutomationLog.Warning("Skip the test case:%s as the device Type:%s is not in the Devices in the Network."%(tCase,deviceType))
                        continue
                    testType = self.util.GetTestType(testSteps)
                    self.WeMoAppAutomationLog.Info("Testcase:%s is a %s test case"%(tCase,testType))
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                        CurrentTimeForAndroidRun = datetime.datetime.now()
                        timeElapsed = CurrentTimeForAndroidRun - CurrentRunTime
                        timeElapsed = timeElapsed.total_seconds() /60 /60
                        if timeElapsed > 400:
                            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.AndroidPrimaryWeMoApp.result == True
                            #Rebooting the Primary Smart Phone for Android                              
                            self.AndroidPrimaryWeMoApp._rebootTheMobileDevice()
                            assert self.AndroidPrimaryWeMoApp.result == True 
                            #Resetting the Device Bridge for Android
                            self.AndroidPrimaryWeMoApp._resetDeviceBridge("Android") 
                            if self.AndroidPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("The Reset is being successful")
                            CurrentRunTime = datetime.datetime.now()
                        if timeElapsed > 200:
                            self.WeMoAppAutomationLog.Info("Reseting the device bridge in order to continue to Run smoothly")
                            self.AndroidPrimaryWeMoApp._resetDeviceBridge("Android") 
                            if self.AndroidPrimaryWeMoApp.result == True:
                                self.WeMoAppAutomationLog.Info("The Reset is being successful") 
                            CurrentRunTime = datetime.datetime.now()
                            self.AndroidPrimaryWeMoApp._clearApplicationData(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                            self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword)
                            self.WeMoAppAutomationLog.Info("The App Data is cleared from the Smart device")
                            CurrentRunTime = datetime.datetime.now()    
                            
                         #Rebooting the Secondary Smart Phone for Android    
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:   

                            if timeElapsed > 4:                            
                                self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
                                assert self.AndroidPrimaryWeMoApp.result == True                                                
                                #Resetting the Device Bridge for Android
                                self.AndroidPrimaryWeMoApp._rebootTheMobileDevice()
                                #self.AndroidPrimaryWeMoApp._resetDeviceBridge("Android") 
                                assert self.AndroidPrimaryWeMoApp.result == True 
                                CurrentRunTime = datetime.datetime.now()
                            if timeElapsed > 2:
                                self.AndroidPrimaryWeMoApp._clearApplicationData(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier)
                                self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AndroidAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword)
                                self.WeMoAppAutomationLog.Info("The App Data is cleared from the Smart device")
                                CurrentRunTime = datetime.datetime.now()
                            time.sleep(60)                                             
                            self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.AndroidPrimaryWeMoApp.result == True
                            
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                        CurrentTimeForiOSRun = datetime.datetime.now()
                        timeElapsed = CurrentTimeForiOSRun - CurrentRunTime
                        timeElapsed = timeElapsed.total_seconds() /60 /60
                        if timeElapsed > 200:
                            #Rebooting the Primary Smart Phone for iOS
                            self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                            assert self.iOSPrimaryWeMoApp.result == True
                            self.iOSPrimaryWeMoApp._rebootSmartDevice()
                            assert self.iOSPrimaryWeMoApp.result == True
                            time.sleep(60)
                            CurrentRunTime = datetime.datetime.now()
                            #Rebooting the Secondary Smart Phone for iOS
                            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                                self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName)
                                assert self.iOSPrimaryWeMoApp.result == True
                                self.iOSPrimaryWeMoApp._rebootSmartDevice()
                                assert self.iOSPrimaryWeMoApp.result == True
                                time.sleep(60)
                                self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                                assert self.iOSPrimaryWeMoApp.result == True
                                CurrentRunTime = datetime.datetime.now()
                    self.WeMoAppAutomationLog.Info("Creating a log file for the test case:%s"%tCase)
                    self.logFP = Logger(tCase.replace(".steps", ".log"),logDir=self.FailedTestCaseLogDir)
                    self.WeMoAppAutomationLog.Info("Creating the log file:%s for the test case:%s"%(os.path.join(self.FailedTestCaseLogDir,tCase.replace(".steps", ".log")),tCase))
                    self.wp.setLogger(self.logFP)
                    self.wemoUpnp.setLogger(self.logFP)
                    self.wemoUpnp_Insight.setLogger(self.logFP)
                    self.wemoUpnp_LightSwitch.setLogger(self.logFP)
                    self.wemoUpnp_Dimmer.setLogger(self.logFP)
                    self.wemoUpnp_LedBridge.setLogger(self.logFP)
                    self.rulesDB.setLogger(self.logFP)
                    self.wemoSmartUpnp.setLogger(self.logFP)
                    self.SlowCookerUpNp.setLogger(self.logFP)
                    self.wemoAppUtility.setLogger(self.logFP)
                    self.wemoAppHttpUtility.setLogger(self.logFP)
                    if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                        self.nest.setLogger(self.logFP)
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                        self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork or WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Insight.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Link.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Maker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Dimmer.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_SlowCooker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Humidifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_AirPurifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_HeaterA.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_HeaterB.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_CoffeeMaker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                            self.iOSPrimaryWeMoApp_Nest.setLogger(self.logFP)
                    if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                        self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Insight.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Link.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Maker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Dimmer.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_SlowCooker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Humidifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_AirPurifier.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_HeaterA.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_HeaterB.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_CoffeeMaker.setLogger(self.logFP)
                        if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                            self.AndroidPrimaryWeMoApp_Nest.setLogger(self.logFP)
                    testCaseStartTime = time.time()
                    testID, testTitle, testType = self.util.GetTestIDAndTitleAndType(failedTestCaseDirectory, srv, tCase)
                    self.testIdList =  testID.split("<br /><br />")
                    self.testIdPassFailDictionary = {}
                    for testCaseId in self.testIdList:
                        self.testIdPassFailDictionary[testCaseId] = "FAIL" + "<br /><br />"
                    testResult = self.RunTestCase(failedTestCaseDirectory, srv, tCase)
                    testCaseEndTime = time.time()
                    testCaseDuration = testCaseEndTime - testCaseStartTime
                    testCaseDuration1 = ""
                    if testCaseDuration > 60:
                        testCaseDuration = testCaseDuration / 60
                        if testCaseDuration > 60:
                            testCaseDuration = testCaseDuration / 60
                            testCaseDuration1 = testCaseDuration
                            testCaseDuration = "{0:.2f}".format(testCaseDuration) + " Hours"
                        else:
                            testCaseDuration1 = testCaseDuration
                            testCaseDuration = "{0:.2f}".format(testCaseDuration) + " Minutes"
                    else:
                        testCaseDuration1 = testCaseDuration
                        testCaseDuration = "{0:.2f}".format(testCaseDuration) + " Seconds"                   
                    self.WeMoAppAutomationLog.Info("Duration of the Test Case:%s is %s"%(tCase,str(testCaseDuration)))
                    self.WeMoAppAutomationLog.Info("Test Result of the Test Case:%s is %s"%(tCase,str(testResult)))
                    self.logFP.Info("\n\nTestResult: " + str(testResult))
                    self.logFP.Info("\n\nTest Case Duration: " + str(testCaseDuration))
                    self.logFP.__del__()
                    #testID, testTitle, testType = self.util.GetTestIDAndTitleAndType(self.TestCaseDir, srv, tCase)
                    TestIdPassFail = ""
                    for testCaseId in self.testIdPassFailDictionary:
                        self.totalTestCountInfoAndDetails[testCaseId] = self.testIdPassFailDictionary[testCaseId].replace("<br /><br />","").strip()
                        TestIdPassFail = TestIdPassFail + "%s:%s;"%(testCaseId,self.testIdPassFailDictionary[testCaseId])
                    if ("ALL" not in deviceType):
#                         devicesUnderTest = " ".join(deviceType)
                        devicesUnderTest = " ".join(list(set(deviceType).intersection(self.devicesInNetwork)))
                    if ("ALL" in deviceType):
                        devicesUnderTest = " ".join(self.devicesInNetwork)
                    MemoryUsage_DuringRun = "CPU Usage at Start:%s <br/>,Memory Usage at Start:%s <br/>CPU Usage at End:%s <br/>,Memory Usage at End:%s <br/>"%(self.CPU_Usage_At_Start,self.Memory_Usage_At_Start,self.CPU_Usage_At_End,self.Memory_Usage_At_End)
                    if testResult[0].strip() == "FAIL":
                        Failure_Rsn = None
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                            if self.iOSPrimaryWeMoApp.exception_msg != None :
                                Failure_Rsn = self.iOSPrimaryWeMoApp.exception_msg
                            else:
                                Failure_Rsn = " "
                        elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                            
                            if self.AndroidPrimaryWeMoApp.exception_msg != None:
                                Failure_Rsn = self.AndroidPrimaryWeMoApp.exception_msg 
                            else:
                                Failure_Rsn = " "
                        #self.resultsCSVFile.addRowToCsv([devicesUnderTest,srv,testID, testTitle, testResult[0].strip(), "%s  Failed Step:%s and Reason for Failure:%s"%Failure_Rsn.strip(),str(testCaseDuration),TestIdPassFail])
                        self.resultsHtmlFile.addRowToHtml([devicesUnderTest,srv,testID, testTitle,testResult[0].strip(),"%s <br /> Failed Step:%s and Reason for Failure:%s"%(Failure_Rsn,testResult[2].strip(),testResult[1].strip()),str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun],"Red")
                        self.resultsCSVFile.addRowToCsv([devicesUnderTest,srv,testID, testTitle, testResult[0].strip(), "Failed Step:%s and Reason for Failure:%s"%(testResult[2].strip(),testResult[1].strip()),str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun])                     
                    elif testResult[0].strip() == "PASS":
                        self.resultsCSVFile.addRowToCsv([devicesUnderTest,srv,testID, testTitle, testResult[0].strip(),"",str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun])
                        self.resultsHtmlFile.addRowToHtml([devicesUnderTest,srv,testID, testTitle,testResult[0].strip(),"",str(testCaseDuration),TestIdPassFail,MemoryUsage_DuringRun])
                    if testResult[0].strip() == "FAIL":
                        try:
                            failedTestCase = tCase
                            self.WeMoAppAutomationLog.Error("The test case:%s belonging to the Service:%s failed.Bringing the Wemo Devices to default state."%(tCase,srv))
                            self.WeMoAppAutomationLog.Info("Creating a App Log file for the failed test case:%s belonging to service:%s."%(tCase,srv))
                            self.logFP = Logger("%s-AppLogs.log"%tCase.replace(".steps",""),logDir=self.FailedTestCaseLogDir)
                            self.WeMoAppAutomationLog.Info("Creating the log file:%s Device Logs.log"%tCase.replace(".steps",""))
                            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                                self.iOSPrimaryWeMoApp.setLogger(self.logFP)
                                self.iOSPrimaryWeMoApp._getTheIOSDeviceLogs()
                            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                                self.AndroidPrimaryWeMoApp.setLogger(self.logFP)
                                self.AndroidPrimaryWeMoApp._getTheAndroidDeviceLogs()
                            self.logFP.__del__()
                            self.bringTheWeMoBackToDefaultAfterFailure(failedTestCase)
                        except:
                            self.WeMoAppAutomationLog.Error("Bringing the Wemo Devices to the default state resulted in an error for Service:%s and test cases:%s."%(srv,tCase))
                            self.WeMoAppAutomationLog.LogException()
                    # test case ends, generating seetest report
                    try:
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                            self.iOSPrimaryWeMoApp.generateReports()
                        if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
                            self.AndroidPrimaryWeMoApp.generateReports()
                    except Exception as e:
                        self.WeMoAppAutomationLog.Info("An exception occured during seetest report generation.Eception is <%s>"%str(e))
                        pass
        except:
            self.WeMoAppAutomationLog.Error("Running the Failed Test Cases resulted in an Error. Aborting the run for the Failed Test Case")
            self.WeMoAppAutomationLog.LogException()
        finally:
            #Need to modify the fucntion
            csvFilePath = self.resultsCSVFile.getCsvFilePath()
            self.WeMoAppAutomationLog.Info("Wemo App Automation Csv Report:%s created"%csvFilePath)
            self.resultsCSVFile.__del__()
            totalCount = len(self.totalTestCountInfoAndDetails)
            passCount = len([testCaseId for testCaseId in self.totalTestCountInfoAndDetails if self.totalTestCountInfoAndDetails[testCaseId]=="PASS"])
            failCount = len([testCaseId for testCaseId in self.totalTestCountInfoAndDetails if self.totalTestCountInfoAndDetails[testCaseId]=="FAIL"])
            self.resultsHtmlFile.HtmlHeader("Total Test Cases",str(totalCount))
            self.resultsHtmlFile.HtmlHeader("Passed Test Cases",str(passCount))
            self.resultsHtmlFile.HtmlHeader("Failed Test Cases",str(failCount))
            self.WeMoAppAutomationLog.Info("Passed Test Cases: " + str(passCount) + "\nSkipped Test Cases: " + str(skipCount) + "\nFailed Test Cases: " + str(failCount) + "\n")         
            testEndTime = time.time()
            duration = testEndTime - testStartTime
            duration1 = ""
            if duration > 60:
                duration = duration / 60
                if duration > 60:
                    duration = duration / 60
                    duration1 = duration
                    duration = "{0:.2f}".format(duration) + " Hours"
                else:
                    duration1 = duration
                    duration = "{0:.2f}".format(duration) + " Minutes"
            else:
                duration1 = duration
                duration = "{0:.2f}".format(duration) + " Seconds"
            self.resultsHtmlFile.HtmlHeader("Test Duration",str(duration))
            self.WeMoAppAutomationLog.Info("Test Duration: " + str(duration) + "\n")
            self.resultsHtmlFile.writeToHtml()  
            self.resultsHtmlFile.__del__()
            self.WeMoAppAutomationLog.__del__()
            
    def bringTheWeMoBackToDefaultAfterFailure(self,failedTestCase, checkCurrentYearAndDateOnlyForRulestestCases = 'Rules', doNotCheckAndEnableRemoteAccessForControlTestCases = 'Control', doNotCheckControllersForSetupTestCases = 'Setup', checkControllersStateForDiscoveryTestCases = 'Discovery'):
        try:
            # power_internet_check = True
            try:
                was_power_failure = False
                for device in self.WemoDevice.keys():
                    if self.wemoUpnp.getFriendlyName(self.WemoDevice[device]['WeMoWanIp']):
                        break
                else:
                    was_power_failure = True

                if was_power_failure:
                    self.WeMoAppAutomationLog.Info("Checking electricity...")
                    obj = wmi.WMI()
                    b=obj.query('select * from Win32_Battery')
                    status = b[0].BatteryStatus
                    if status != 2:
                        while status != 2:
                            self.WeMoAppAutomationLog.Info("Sleeping for 20 seconds before checking electricity again...")
                            time.sleep(20)
                            b=obj.query('select * from Win32_Battery')
                            status = b[0].BatteryStatus
                        self.WeMoAppAutomationLog.Info("Electricity resumed <%d>"%status)
                    self.WeMoAppAutomationLog.Info("Turning on wemo and dut controller...")
                    time.sleep(180)# for controllers to boot up
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    time.sleep(180) # for devices to boot up
                    ##Connect back to  local wireless router##
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.WeMoAppAutomationLog.Info("Verifying internet connectivity...")
                    while self.routerIp is None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.WeMoAppAutomationLog.Info("Sleeping for 20 seconds before checking internet again...")
                        time.sleep(20)
                    self.WeMoAppAutomationLog.Info("Internet connectivity resumed with laptop ip as <%s>"%self.routerIp)
            except Exception as e:
                self.WeMoAppAutomationLog.Info("An exception in power an net check logic. Excepton is <%s>"%str(e))

            self.WeMoAppAutomationLog.Info("The test case:%s failed and thus bringing the WeMo Devices to the default stage"%failedTestCase)
            if self.rerunFailedTestCaseInProgress == True:
                self.logFP = Logger("%s_Recovery.log"%failedTestCase.replace(".steps",""),logDir=self.FailedTestCaseLogDir)
            else: 
                self.logFP = Logger("%s_Recovery.log"%failedTestCase.replace(".steps",""))
            self.WeMoAppAutomationLog.Info("Creating the log file:%s_Recovery.log"%failedTestCase.replace(".steps",""))
            self.wemoUpnp.setLogger(self.logFP)
            self.wemoUpnp_Insight.setLogger(self.logFP)
            self.wemoUpnp_LightSwitch.setLogger(self.logFP)
            self.wemoUpnp_LedBridge.setLogger(self.logFP)
            self.wemoUpnp_Dimmer.setLogger(self.logFP)
            self.wemoSmartUpnp.setLogger(self.logFP)
            self.SlowCookerUpNp.setLogger(self.logFP)
            self.rulesDB.setLogger(self.logFP)
            self.wemoAppUtility.setLogger(self.logFP)
            self.wemoAppHttpUtility.setLogger(self.logFP)
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.NEST in self.devicesInNetwork):
                self.nest.setLogger(self.logFP)

            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS" and  checkCurrentYearAndDateOnlyForRulestestCases.lower() in str(failedTestCase.lower()):
                self.iOSPrimaryWeMoApp._closeApplication(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)
                currentYear = self.util.getTimeInStringFormat(self.util.getCurrentTime())['year']
                self.iOSPrimaryWeMoApp._syncTheTimeActualLocation(currentYear)

            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS":
                self.iOSPrimaryWeMoApp._closeApplication(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)
                self.iOSPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)
                self.iOSPrimaryWeMoApp._closeApplication(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifierForUninstall)

            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android":
				self.AndroidPrimaryWeMoApp._checkAndEnableRemoteAccess(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.IOSAppIdentifier,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity)
            
            ##Connect back to  local wireless router##
            if not was_power_failure:
                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                assert self.wemoAppUtility.result == True
                self.routerIp = self.wemoAppUtility.serverIPAddr
            

            #Set the Smart Device to Primary Smart Phone
            if WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "iOS" and WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                self.iOSPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                assert self.iOSPrimaryWeMoApp.result == True
            elif WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone == "Android" and WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SecondarySmartPhoneName != None:
                self.AndroidPrimaryWeMoApp._setDeviceUnderTest(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.PrimarySmartPhoneName)
                assert self.AndroidPrimaryWeMoApp.result == True   

            if not was_power_failure:
                #Turn on DUT Controllers  ##
                self.WeMoAppAutomationLog.Info("Check whether the WeMo Controller:%s is On"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SSID)
                # turning on controllers in case is from "rules" or "discovery"
                if (checkCurrentYearAndDateOnlyForRulestestCases.lower()  in str(failedTestCase.lower())) or (checkControllersStateForDiscoveryTestCases.lower() in str(failedTestCase.lower())):
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DUT_CONTROLLER_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.WeMoAppAutomationLog.Info("Check whether the WeMo Controller:%s is On"%WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SSID)
                    #Turn on WeMo Controllers  ##
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_CONTROLLER_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    #   Turn Off the Motion Controller
                    self.wemoAppUtility.turnOffMotionController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,self.routerIp,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                    assert self.wemoAppUtility.result == True

            #Turn On the Bulb Controllers ##
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                if len(self.deviceIdList) > 0:
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    if len(self.deviceIdList) > 1:
                        self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                        assert self.wemoAppUtility.result == True
                if len(self.osram_regular_deviceIdList) > 0:
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    if len(self.osram_regular_deviceIdList) > 1:
                        self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                        assert self.wemoAppUtility.result == True
                if len(self.osram_ttb_deviceIdList) > 0:
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    if len(self.osram_ttb_deviceIdList) > 1:
                        self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                        assert self.wemoAppUtility.result == True
                if len(self.osram_flex_deviceIdList) > 0:
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    if len(self.osram_flex_deviceIdList) > 1:
                        self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                        assert self.wemoAppUtility.result == True
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_1_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    if len(self.osram_gardenspot_deviceIdList) > 1:
                        self.wemoAppUtility.turnOnController(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_CONTROLLER_2_SSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                        assert self.wemoAppUtility.result == True
            #Bring Motion back to default
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION in self.devicesInNetwork):
                isMotionInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isMotionInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Motion:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isMotionInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isMotionInStationMode == True:
                    self.logFP.Info("Wemo Motion:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isMotionInStationMode == False:
                    self.logFP.Info("Check whether the Motion:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Motion:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Motion:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Motion:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Motion:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Motion:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Motion:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Motion:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo Motion:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getMotionFriendlyNameCount = 0
                while True:
                    if getMotionFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getMotionFriendlyNameCount = getMotionFriendlyNameCount + 1
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MOTION][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
            #Bring Switch to default
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH in self.devicesInNetwork):
                isSwitchInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isSwitchInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Switch:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isSwitchInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isSwitchInStationMode == True:
                    self.logFP.Info("Wemo Switch:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isSwitchInStationMode == False:
                    self.logFP.Info("Check whether the Switch:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Switch:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Switch:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Switch:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Switch:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getSwitchFriendlyNameCount = 0
                while True:
                    if getSwitchFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getSwitchFriendlyNameCount = getSwitchFriendlyNameCount + 1
                self.wemoUpnp.setBinaryState(0,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call setBinaryState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
            
            #Bring SwitchV2 to default
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 in self.devicesInNetwork):
                isSwitchV2InStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isSwitchV2InStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo SwitchV2:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isSwitchV2InStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isSwitchV2InStationMode == True:
                    self.logFP.Info("Wemo SwitchV2:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isSwitchV2InStationMode == False:
                    self.logFP.Info("Check whether the SwitchV2:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The SwitchV2:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo SwitchV2:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo SwitchV2:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo SwitchV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo SwitchV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo SwitchV2:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo SwitchV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo SwitchV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1 
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getSwitchV2FriendlyNameCount = 0
                while True:
                    if getSwitchV2FriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getSwitchV2FriendlyNameCount = getSwitchV2FriendlyNameCount + 1
                self.wemoUpnp.setBinaryState(0,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call setBinaryState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.SimulateOverTemp("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call SimulateOverTemp() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2 ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SWITCH_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
            
            #Bring Insight to default    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT in self.devicesInNetwork):
                isInsightInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isInsightInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Insight:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isInsightInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isInsightInStationMode == True:
                    self.logFP.Info("Wemo Insight:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isInsightInStationMode == False:
                    self.logFP.Info("Check whether the Insight:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Insight:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Insight:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Insight:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Insight:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Insight:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Insight:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Insight:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo Insight:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getInsightFriendlyNameCount = 0
                while True:
                    if getInsightFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getInsightFriendlyNameCount = getInsightFriendlyNameCount + 1
                self.wemoUpnp.setBinaryState(0,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call setBinaryState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp_Insight.setPowerThreshold("2000",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call setPowerThreshold() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))

                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()

            #Bring Insight_V2 to default    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 in self.devicesInNetwork):
                isInsightV2InStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isInsightV2InStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo InsightV2:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isInsightV2InStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isInsightV2InStationMode == True:
                    self.logFP.Info("Wemo InsightV2:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isInsightV2InStationMode == False:
                    self.logFP.Info("Check whether the InsightV2:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Insight:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo InsightV2:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo InsightV2:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo InsightV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo InsightV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo InsightV2:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo InsightV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo InsightV2:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getInsightV2FriendlyNameCount = 0
                while True:
                    if getInsightV2FriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getInsightV2FriendlyNameCount = getInsightV2FriendlyNameCount + 1
                self.wemoUpnp.setBinaryState(0,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call setBinaryState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2 ][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.INSIGHT_V2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
            
            #Bring Light Switch to default    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH in self.devicesInNetwork):
                isLightSwitchInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isLightSwitchInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Light Switch:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isLightSwitchInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isLightSwitchInStationMode == True:
                    self.logFP.Info("Wemo LightSwitch:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isLightSwitchInStationMode == False:
                    self.logFP.Info("Check whether the LightSwitch:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Light Switch:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Light Switch:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Light Switch:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Light Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Light Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Light Switch:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Light Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo Light Switch:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getLightSwitchFriendlyNameCount = 0
                while True:
                    if getLightSwitchFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getLightSwitchFriendlyNameCount = getLightSwitchFriendlyNameCount + 1
                self.wemoUpnp.setBinaryState(0,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call setBinaryState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LIGHT_SWITCH][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
            
            #Bring Dimmer to default    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER in self.devicesInNetwork):
                isDimmerInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isDimmerInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Dimmer:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isDimmerInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isDimmerInStationMode == True:
                    self.logFP.Info("Wemo LightSwitch:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isDimmerInStationMode == False:
                    self.logFP.Info("Check whether the LightSwitch:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Dimmer:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Dimmer:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Dimmer:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Dimmer:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Dimmer:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Dimmer:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Dimmer:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo Dimmer:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getDimmerFriendlyNameCount = 0
                while True:
                    if getDimmerFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getDimmerFriendlyNameCount = getDimmerFriendlyNameCount + 1
                self.wemoUpnp_Dimmer.setBinaryStateOfDimmer("0",brightness="100", fader="-1:-1",host=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp_Dimmer.responseCode != "200":
                    raise Exception("UPnP call setBinaryState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.SimulateOverTemp("0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call SimulateOverTemp() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Dimmer Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DIMMER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        
            #Bring WeMo Maker to default    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER in self.devicesInNetwork):
                isMakerInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isMakerInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Maker:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isMakerInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isMakerInStationMode == True:
                    self.logFP.Info("Wemo Maker:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isMakerInStationMode == False:
                    self.logFP.Info("Check whether the Maker:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Maker:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Maker:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Maker:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Maker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Maker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Maker:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Maker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        raise Exception("Wemo Maker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getMakerFriendlyNameCount = 0
                while True:
                    if getMakerFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getMakerFriendlyNameCount = getMakerFriendlyNameCount + 1
                self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Sensor=1,SwitchMode=0,SensorPresent=1,Switch=0)
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Maker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER in self.devicesInNetwork):
                isSlowCookerInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isSlowCookerInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo SlowCooker:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isSlowCookerInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isSlowCookerInStationMode == True:
                    self.logFP.Info("Wemo SlowCooker:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isSlowCookerInStationMode == False:
                    self.logFP.Info("Check whether the SlowCooker:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Slow Cooker:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo SlowCooker:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo SlowCooker:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo SlowCooker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo SlowCooker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo SlowCooker:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                SlowCookerIp = ssdp.ipOfWeMoDevice
                if SlowCookerIp == None:
                    raise Exception("SlowCooker Ip is None. Cannot diwscover the SlowCooker:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = SlowCookerIp
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getSlowCookerFriendlyNameCount = 0
                while True:
                    if getSlowCookerFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getSlowCookerFriendlyNameCount = getSlowCookerFriendlyNameCount + 1
                self.SlowCookerUpNp.SetSlowCookerState(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"0","0")
                if self.SlowCookerUpNp.responseCode != "200":
                    raise Exception("UPnP call SetSlowCookerState() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))         
                if self.FIRMWARE_UPGRADE == True:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.WeMoAppAutomationLog.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Wemo SlowCooker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    else:
                        self.WeMoAppAutomationLog.Info("Firmware Version on Environment:%s and firmware version fron Device:%s.Both are equal, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(400)                        
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        if ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        
                        if ssdp.ipOfWeMoDevice == None: 
                            self.WeMoAppAutomationLog.Critical("Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:                        
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo SlowCooker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SLOW_COOKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER in self.devicesInNetwork):
                isHumidifierInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isHumidifierInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Humidifier:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isHumidifierInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isHumidifierInStationMode == True:
                    self.logFP.Info("Wemo Humidifier:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isHumidifierInStationMode == False:
                    self.logFP.Info("Check whether the Humidifier:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The Humidifier:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo Humidifier:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo Humidifier:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo Humidifier:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo Humidifier:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo Humidifier:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.wemoSmartUpnp.GetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call GetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if len(self.wemoSmartUpnp.ruleList["rules"]) > 0:
                    self.logFP.Info("Deleting the Rules for the WeMo:%s on Ip:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    self.wemoSmartUpnp.SetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    assert self.wemoSmartUpnp.ruleList["errorCode"] == 0
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                HumidifierIp = ssdp.ipOfWeMoDevice
                if HumidifierIp == None:
                    raise Exception("Humidifier Ip is None. Cannot discover the Humidifier:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = HumidifierIp
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getHumidifierFriendlyNameCount = 0
                while True:
                    if getHumidifierFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getHumidifierFriendlyNameCount = getHumidifierFriendlyNameCount + 1
                self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],FanMode = 0)
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))

                if self.FIRMWARE_UPGRADE == True:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Wemo Humidifier Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(400)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],retries=50)
                        if ssdp.ipOfWeMoDevice == None:                    
                            self.wemoAppUtility.connectToRouter( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)                    
                        if ssdp.ipOfWeMoDevice == None: 
                            self.WeMoAppAutomationLog.Critical("Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Humidifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")               
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HUMIDIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                        
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER in self.devicesInNetwork):
                isAirPurifierInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isAirPurifierInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo AirPurifier:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isAirPurifierInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isAirPurifierInStationMode == True:
                    self.logFP.Info("Wemo AirPurifier:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isAirPurifierInStationMode == False:
                    self.logFP.Info("Check whether the AirPurifier:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The AirPurifier:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo AirPurifier:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo AirPurifier:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo AirPurifier:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo AirPurifier:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo AirPurifier:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.wemoSmartUpnp.GetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call GetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if len(self.wemoSmartUpnp.ruleList["rules"]) > 0:
                    self.logFP.Info("Deleting the Rules for the WeMo:%s on Ip:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    self.wemoSmartUpnp.SetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    assert self.wemoSmartUpnp.ruleList["errorCode"] == 0
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ## Once the device softreset the device port number changes. We are checking the IP of the Device before changing the Friendly name
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                AirPurifierIp = ssdp.ipOfWeMoDevice
                if AirPurifierIp == None:
                    raise Exception("AirPurifier Ip is None. Cannot discover the AirPurifier:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = AirPurifierIp
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getAirPurifierFriendlyNameCount = 0
                while True:
                    if getAirPurifierFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getAirPurifierFriendlyNameCount = getAirPurifierFriendlyNameCount + 1            
                self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 0,Ionizer = 0)
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    
                if self.FIRMWARE_UPGRADE == True:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Wemo AirPurifier Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(400)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],retries=50)                       
                        if ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)                
                        if ssdp.ipOfWeMoDevice == None:
                            self.WeMoAppAutomationLog.Critical("Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo AirPurifier Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")                                                
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.AIR_PURIFIER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()                    
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A in self.devicesInNetwork):
                isHeaterAInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isHeaterAInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo HeaterA:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isHeaterAInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isHeaterAInStationMode == True:
                    self.logFP.Info("Wemo HeaterA:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isHeaterAInStationMode == False:
                    self.logFP.Info("Check whether the HeaterA:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The HeaterA:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo HeaterA:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo HeaterA:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo HeaterA:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo HeaterA:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo HeaterA:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.wemoSmartUpnp.GetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call GetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if len(self.wemoSmartUpnp.ruleList["rules"]) > 0:
                    self.logFP.Info("Deleting the Rules for the WeMo:%s on Ip:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    self.wemoSmartUpnp.SetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    assert self.wemoSmartUpnp.ruleList["errorCode"] == 0
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                # Once the device softreset the device port number changes. We are checking the IP of the Device before changing the Friendly name
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                WeMo_HeaterA_Ip = ssdp.ipOfWeMoDevice                    
                if WeMo_HeaterA_Ip == None:
                    raise Exception("Wemo HeaterA:%s Ip is None. SSDP Failed. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = WeMo_HeaterA_Ip
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getHeaterAFriendlyNameCount = 0
                while True:
                    if getHeaterAFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getHeaterAFriendlyNameCount = getHeaterAFriendlyNameCount + 1
                self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 1)
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    
                if self.FIRMWARE_UPGRADE == True:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Wemo HeaterA Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(400)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],retries=50)
                        if ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                        
                        if ssdp.ipOfWeMoDevice == None:
                            self.WeMoAppAutomationLog.Critical("Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterA Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1) 
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_A][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()                    
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B in self.devicesInNetwork):
                isHeaterBInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isHeaterBInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo HeaterB:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isHeaterBInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isHeaterBInStationMode == True:
                    self.logFP.Info("Wemo HeaterB:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isHeaterBInStationMode == False:
                    self.logFP.Info("Check whether the HeaterB:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The HeaterB:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo HeaterB:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo HeaterB:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo HeaterB:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo HeaterB:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo HeaterB:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.wemoSmartUpnp.GetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call GetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if len(self.wemoSmartUpnp.ruleList["rules"]) > 0:
                    self.logFP.Info("Deleting the Rules for the WeMo:%s on Ip:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    self.wemoSmartUpnp.SetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    assert self.wemoSmartUpnp.ruleList["errorCode"] == 0
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                ## Once the device softreset the device port number changes. We are checking the IP of the Device before changing the Friendly name
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                WeMo_HeaterB_Ip = ssdp.ipOfWeMoDevice                    
                if WeMo_HeaterB_Ip == None:
                    raise Exception("Wemo HeaterB:%s Ip is None. SSDP Failed. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = WeMo_HeaterB_Ip
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getHeaterBFriendlyNameCount = 0
                while True:
                    if getHeaterBFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getHeaterBFriendlyNameCount = getHeaterBFriendlyNameCount + 1   
                self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 1)
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    
                if self.FIRMWARE_UPGRADE == True:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Wemo HeaterB Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(400)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],retries=50)
                        if ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)                
                    
                        if ssdp.ipOfWeMoDevice == None:
                            self.WeMoAppAutomationLog.Critical("Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo HeaterB Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.HEATER_B][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()                    
            
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER in self.devicesInNetwork):
                isCoffeeMakerInStationMode = None
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        isCoffeeMakerInStationMode = True
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo CoffeeMaker:%s Ip is None. Did not get associated to the Local Network. Check whether it is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        isCoffeeMakerInStationMode = False
                        break
                    self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                    assert self.wemoAppUtility.result == True
                    self.routerIp = self.wemoAppUtility.serverIPAddr
                    self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                    ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    discoveryCount = discoveryCount + 1     
                if isCoffeeMakerInStationMode == True:
                    self.logFP.Info("Wemo CoffeeMaker:%s is associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                elif isCoffeeMakerInStationMode == False:
                    self.logFP.Info("Check whether the HeaterB:%s is in Ap Mode"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                    self.wemoAppUtility.connectToTheController(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                    if self.wemoAppUtility.result == True:
                        self.logFP.Info("Connected to:%s."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.logFP.Info("The CoffeeMaker:%s is in the factory reset state. Setting up the WeMo using PairAndRegister()"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        self.wemoAppUtility.runSmartSetup(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWirelessMac],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceUniqueId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDeviceDescription],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartDevicePrivateKey],WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE,"10.22.22.1:49152")
                        if self.wemoAppUtility.result != True:
                            self.logFP.Critical("runSmartSetup() for Wemo CoffeeMaker:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            raise Exception("runSmartSetup() for Wemo CoffeeMaker:%s failed."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                        time.sleep(120)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = 0
                        while True:
                            if ssdp.ipOfWeMoDevice != None:
                                break
                            elif discoveryCount == 3:
                                self.logFP.Critical("Wemo CoffeeMaker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                                raise Exception("Wemo CoffeeMaker:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                            elif ssdp.ipOfWeMoDevice == None:
                                self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)
                                assert self.wemoAppUtility.result == True
                                self.routerIp = self.wemoAppUtility.serverIPAddr
                                self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                                discoveryCount = discoveryCount + 1
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                    else:
                        raise Exception("Wemo CoffeeMaker:%s is neither in Ap Mode or Station Mode. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSmartPhoneSsidName])
                self.wemoSmartUpnp.GetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call GetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                if len(self.wemoSmartUpnp.ruleList["rules"]) > 0:
                    self.logFP.Info("Deleting the Rules for the WeMo:%s on Ip:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    self.wemoSmartUpnp.SetRules(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],"NULL")
                    if self.wemoSmartUpnp.responseCode != "200":
                        raise Exception("UPnP call SetRules() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    assert self.wemoSmartUpnp.ruleList["errorCode"] == 0
                self.wemoUpnp.softResetWemo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call softResetWemo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                time.sleep(60)
                # Once the device softreset the device port number changes. We are checking the IP of the Device before changing the Friendly name
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                WeMo_CoffeeMaker_Ip = ssdp.ipOfWeMoDevice                
                if WeMo_CoffeeMaker_Ip == None:
                    raise Exception("Wemo CoffeeMaker:%s Ip is None. SSDP Failed. Aborting!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = WeMo_CoffeeMaker_Ip
                self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp.responseCode != "200":
                    raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                getCoffeeMakerFriendlyNameCount = 0
                while True:
                    if getCoffeeMakerFriendlyNameCount == 3:
                        raise Exception("Could not set the Friendly Name for the WeMo:%s on Ip:%s!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    elif self.wemoUpnp.FriendlyName == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName].strip():break
                    else:
                        self.wemoUpnp.changeFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call changeFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.wemoUpnp.getFriendlyName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getFriendlyName() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                    getCoffeeMakerFriendlyNameCount = getCoffeeMakerFriendlyNameCount + 1
                self.wemoSmartUpnp.SetAttributes(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp],Mode = 3,FilterAdvise=0)
                if self.wemoSmartUpnp.responseCode != "200":
                    raise Exception("UPnP call SetAttributes() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])) 
                if self.FIRMWARE_UPGRADE == True:
                    self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE IS SET TO TRUE.CHECKING FOR FIRMWARE ON ENVIRONMENT:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE EQUAL, THUS NO FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("Wemo CoffeeMaker Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
                    else:
                        self.WeMoAppAutomationLog.Info("FIRMWARE ON ENVIRONMENT:%s IS:%s AND FIRMWARE FROM DEVICE IS:%s.BOTH ARE DIFFERENT, THUS FIRMWARE UPGRADE"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.WeMoAppAutomationLog.Info("FIRMWARE UPGRADE TO :%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(400)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],retries=50)
                        if ssdp.ipOfWeMoDevice == None:
                            self.wemoAppUtility.connectToRouter( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                            if self.wemoAppUtility.result == False:
                                self.WeMoAppAutomationLog.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                                os._exit(1)
                            assert self.wemoAppUtility.result == True
                            self.routerIp = self.wemoAppUtility.serverIPAddr
                            self.WeMoAppAutomationLog.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%( WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword, WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                    
                        if ssdp.ipOfWeMoDevice == None:
                            self.WeMoAppAutomationLog.Critical("Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.")
                            if self.sendNoEmail == False:
                                self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo CoffeeMaker Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                            os._exit(1)                   
    
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.WeMoAppAutomationLog.Info("RESPONSE CODE FROM getMetaInfo():%s"%self.wemoUpnp.responseCode)
                        if self.wemoUpnp.responseCode != "200":
                            self.WeMoAppAutomationLog.Error("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                            raise Exception("UPNP CALL getMetaInfo() FAILED .COULD NOT GET META INFO. ABORTING THE TEST!!.")
                        self.WeMoAppAutomationLog.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() SEEMS TO BE CORRUPTED. ABORTING THE TEST!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            self.WeMoAppAutomationLog.Error("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                            raise Exception("getMetaInfo() DOES NOT CONTAIN ALL THE INFO. ABORTING THE TEST!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.COFFEE_MAKER][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()
                             
            #Bring Link and the Led Bulbs to default    
            if (WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK in self.devicesInNetwork):
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Link:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                        raise Exception("Wemo Link:%s Ip is None. Did not get associated to the Local Network."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.logFP.Info("Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1    
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.wemoUpnp_LedBridge.GetGroups(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                if self.wemoUpnp_LedBridge.responseCode != "200":
                    raise Exception("UPnP call GetGroups() for the WeMo:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                if len(self.wemoUpnp_LedBridge.GroupList) >= 1:
                    for i in range(len(self.wemoUpnp_LedBridge.GroupList)):
                        self.wemoUpnp_LedBridge.DeleteGroup(str(self.wemoUpnp_LedBridge.GroupList[i]["GroupID"]),self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp_LedBridge.responseCode != "200":
                            raise Exception("UPnP call DeleteGroup() for the Group:%s failed!."%(str(self.wemoUpnp_LedBridge.GroupList[i]["GroupID"])))
                self.logFP.Info("GETTING THE PAIRED LIST OF THE LED BRIDGE:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                self.logFP.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                if self.wemoUpnp_LedBridge.responseCode != "200":
                    self.logFP.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                    raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                BulbsInNetwork = 0
                getPairedListCount = 0 
                if len(self.deviceIdList) > 0:
                    BulbsInNetwork = BulbsInNetwork + len(self.deviceIdList)
                if len(self.osram_regular_deviceIdList) > 0:
                    BulbsInNetwork = BulbsInNetwork + len(self.osram_regular_deviceIdList)
                if len(self.osram_ttb_deviceIdList) > 0:
                    BulbsInNetwork = BulbsInNetwork + len(self.osram_ttb_deviceIdList)
                if len(self.osram_flex_deviceIdList) > 0:
                    BulbsInNetwork = BulbsInNetwork + len(self.osram_flex_deviceIdList)
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    BulbsInNetwork = BulbsInNetwork + len(self.osram_gardenspot_deviceIdList)
                while True:
                    if getPairedListCount == 3:
                        self.logFP.Error("The length of the Bulbs in Network:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(BulbsInNetwork),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                        raise Exception("The length of the Device Id List:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(BulbsInNetwork),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                    elif len(self.wemoUpnp_LedBridge.PairedDeviceList) >= BulbsInNetwork:break
                    else:
                        getPairedListCount = getPairedListCount + 1
                        #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                        self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.logFP.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                        if self.wemoUpnp_LedBridge.responseCode != "200":
                            self.logFP.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                            raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                DeviceIdList = []
                for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                    DeviceIdList.append(str(led["DeviceID"]))
                if len(self.deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            self.logFP.Info("Setting the Name:%s of LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode == "200":
                                assert self.wemoUpnp_LedBridge.Status == 1
                            else:
                                raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.logFP.Info("Setting the Device Status of LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            break
                    if len(self.deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.logFP.Info("Setting the Name:%s of LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.logFP.Info("Setting the Device Status of LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break 
                if len(self.osram_regular_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            self.logFP.Info("Setting the Name:%s of OSRAM_REGULAR_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode == "200":
                                assert self.wemoUpnp_LedBridge.Status == 1
                            else:
                                raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            break
                    if len(self.osram_regular_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.logFP.Info("Setting the Name:%s of OSRAM_REGULAR_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break
                if len(self.osram_ttb_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            self.logFP.Info("Setting the Name:%s of OSRAM_TTB_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode == "200":
                                assert self.wemoUpnp_LedBridge.Status == 1
                            else:
                                raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.logFP.Info("Setting the Device Status of OSRAM_TTB_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])) 
                            break
                    if len(self.osram_ttb_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.logFP.Info("Setting the Name:%s of OSRAM_TTB_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.logFP.Info("Setting the Device Status of OSRAM_TTB_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break 
                if len(self.osram_flex_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            self.logFP.Info("Setting the Name:%s of OSRAM_FLEX_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode == "200":
                                assert self.wemoUpnp_LedBridge.Status == 1
                            else:
                                raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.logFP.Info("Setting the Device Status of OSRAM_FLEX_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            break
                    if len(self.osram_flex_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.logFP.Info("Setting the Name:%s of OSRAM_FLEX_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.logFP.Info("Setting the Device Status of OSRAM_FLEX_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","370:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","24939:24701:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                break
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            self.logFP.Info("Setting the Name:%s of OSRAM_GARDENSPOT_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode == "200":
                                assert self.wemoUpnp_LedBridge.Status == 1
                            else:
                                raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.logFP.Info("Setting the Device Status of OSRAM_GARDENSPOT_LED_BULB_1:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","250:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","26214:9830:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                            if self.wemoUpnp_LedBridge.responseCode != "200":
                                raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                            break
                    if len(self.osram_gardenspot_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                self.logFP.Info("Setting the Name:%s of OSRAM_GARDENSPOT_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceName(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode == "200":
                                    assert self.wemoUpnp_LedBridge.Status == 1
                                else:
                                    raise Exception("UpNp Call SetDeviceName() failed. Cannot Set the Friendly Name:%s of Led Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.logFP.Info("Setting the Device Status of OSRAM_GARDENSPOT_LED_BULB_2:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30301","250:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10300","26214:9830:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"30008","0:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10008","255:0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))
                                self.wemoUpnp_LedBridge.SetDeviceStatus("NO",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId],"10006","0",IsGroupAction2 = None, DeviceID2 = None, CapabilityID2 = None, CapabilityValue2 = None, host = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                                if self.wemoUpnp_LedBridge.responseCode != "200":
                                    raise Exception("UpNp Call SetDeviceStatus() failed for Bulb:%s.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]))    
                                break
                ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                discoveryCount = 0
                while True:
                    if ssdp.ipOfWeMoDevice != None:
                        break
                    elif discoveryCount == 3:
                        self.logFP.Critical("Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.")
                        if self.sendNoEmail == False:
                            self.emailUtil.sendEmail("WeMo App Automation Exception Occured. Aborting the test.","Wemo Link Ip is None. Did not get associated to the Local Network. Aborting!!.", "admin")
                        os._exit(1) 
                    elif ssdp.ipOfWeMoDevice == None:
                        self.wemoAppUtility.connectToRouter(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SERVER_WIFI_INTERFACE)     
                        if self.wemoAppUtility.result == False:
                            self.logFP.Info("Cannot connect to the Local Router:%s whose password is:%s and security:%s. ABORTING THE TEST!!!"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                            os._exit(1)
                        assert self.wemoAppUtility.result == True
                        self.routerIp = self.wemoAppUtility.serverIPAddr
                        self.logFP.Info("HOORAY! Successfully connected to the Local Router:%s whose password is:%s and security:%s."%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSID,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessPassword,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.localWirelessSSIDSecurity))
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 5, self.routerIp)
                        discoveryCount = discoveryCount + 1     
                self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                self.logFP.Info("GETTING THE PAIRED LIST OF THE LED BRIDGE:%s."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber]))
                #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                self.logFP.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                if self.wemoUpnp_LedBridge.responseCode != "200":
                    self.logFP.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                    raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                getPairedListCount = 0 
                while True:
                    if getPairedListCount == 3:
                        self.logFP.Error("The length of the Bulbs in Network:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(BulbsInNetwork),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                        raise Exception("The length of the Device Id List:%d Length of Paired List from the Link:%d.Aborting the test!!."%(int(BulbsInNetwork),int(len(self.wemoUpnp_LedBridge.PairedDeviceList))))
                    elif len(self.wemoUpnp_LedBridge.PairedDeviceList) >= BulbsInNetwork:break
                    else:
                        getPairedListCount = getPairedListCount + 1
                        #self.wemoUpnp_LedBridge.setSerialNumber(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber])
                        self.wemoUpnp_LedBridge.GetEndDevices("PAIRED_LIST",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        self.logFP.Info("Response Code from GetEndDevices('PAIRED_LIST'):%s"%self.wemoUpnp_LedBridge.responseCode)
                        if self.wemoUpnp_LedBridge.responseCode != "200":
                            self.logFP.Error("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                            raise Exception("UpNp GetEndDevices('PAIRED_LIST') failed. Aborting the test!!.")
                DeviceIdList = []
                for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                    DeviceIdList.append(str(led["DeviceID"]))
                if len(self.deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                self.logFP.Error("Expected Friendly Name of LED_BULB_1:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                raise Exception("Expected Friendly Name of LED_BULB_1:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                            else:
                                break
                    if len(self.deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break 
                if len(self.osram_regular_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_REGULAR_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                            else:
                                break
                    if len(self.osram_regular_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_REGULAR_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_REGULAR_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                if len(self.osram_ttb_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_TTB_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                            else:
                                break
                    if len(self.osram_ttb_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_TTB_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_TTB_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                if len(self.osram_flex_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_FLEX_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                            else:
                                break
                    if len(self.osram_flex_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_FLEX_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_FLEX_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                if len(self.osram_gardenspot_deviceIdList) > 0:
                    if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                        self.logFP.Error("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        raise Exception("OSRAM_GARDENSPOT_LED_BULB_1:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                    for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                        if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                            if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_1][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                            else:
                                break
                    if len(self.osram_gardenspot_deviceIdList) > 1:
                        if self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId] not in DeviceIdList:
                            self.logFP.Error("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                            raise Exception("OSRAM_GARDENSPOT_LED_BULB_2:%s is not in the GetEndDevices('PAIRED_LIST').Aborting the test!!."%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId])
                        for led in self.wemoUpnp_LedBridge.PairedDeviceList:
                            if str(led["DeviceID"]) == self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.DeviceId]:
                                if led['FriendlyName']!=self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName]:
                                    self.logFP.Error("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                    raise Exception("Expected Friendly Name of LED_BULB_2:%s\nFriendly Name from the Device:%s\n.They are not equal.Aborting the test!!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_LED_BULB][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.OSRAM_GARDENSPOT_LED_BULB_2][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFriendlyName],led['FriendlyName']))
                                else:
                                    break
                if self.FIRMWARE_UPGRADE == True:
                    self.logFP.Info("Firmware Upgrade is set to true.Checking firmware version on the environment:%s"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT))
                    currentFirmwareVersion = self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
                    self.wemoAppUtility.getTheFirmwareVersionDetails(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK)
                    assert self.wemoAppUtility.result == True
                    assert self.wemoAppUtility.firmwareVersionInfo != None
                    if self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip() == currentFirmwareVersion:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are equal, Thus no firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Wemo Light Switch Firmware Version is:%s"%self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]) 
                    else:
                        self.logFP.Info("Firmware Version on Environment:%s is:%s and firmware version fron Device:%s.Both are different, Thus firmware upgrade"%(WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WEMO_APP_ENVIRONMENT,self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),currentFirmwareVersion))
                        self.logFP.Info("Firmware Upgrade to:%s"%(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()))
                        self.wemoUpnp.updateFirmware(self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip(),"19-Jul-2013",self.wemoAppUtility.firmwareVersionInfo["FirmwareVersionURL"].strip() ,"9f0d0134426e78716c26dc7374c26b3d", "0",self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        assert self.wemoUpnp.updateFwStatus == "success"
                        time.sleep(300)
                        ssdp.discover(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],"urn:Belkin:service:basicevent:1",3, 50, self.routerIp)
                        assert ssdp.ipOfWeMoDevice != None
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp] = ssdp.ipOfWeMoDevice
                        self.wemoUpnp.getMetaInfo(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp])
                        if self.wemoUpnp.responseCode != "200":
                            raise Exception("UPnP call getMetaInfo() for the WeMo:%s on Ip:%s failed!."%(self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoSerialNumber],self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoWanIp]))
                        self.logFP.Info("META INFO:%s"%self.wemoUpnp.MetaInfo)
                        if self.wemoUpnp.MetaInfo.find("|") == -1:
                            raise Exception("getMetaInfo() seems to be corrupted. Aborting the test!!.")
                        self.MetaInfo = self.wemoUpnp.MetaInfo.split("|")
                        if len(self.MetaInfo) != 6:
                            raise Exception("getMetaInfo() does not contain all the info. Aborting the test!!.")
                        assert self.MetaInfo[3].strip() == self.wemoAppUtility.firmwareVersionInfo["FirmwareVersion"].strip()
                        self.WemoDevice[WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.LINK][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion] = self.MetaInfo[3].strip()       
        except:
            self.WeMoAppAutomationLog.Error("Bringing the WeMo to the default state resulted in an error.")
            self.WeMoAppAutomationLog.LogException()
            self.logFP.LogException()
            assert 1 == 0
        finally:
            self.logFP.__del__()
            
    def updateDataBaseForGraph(self):
        self.appAutomationDictionary['Smart_Device'] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SmartPhone
        self.appAutomationDictionary['Smart_Device_OS_Version'] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.SMART_DEVICE_OS_VERSION
        self.appAutomationDictionary['App_Version'] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_VERSION
        self.appAutomationDictionary['App_Release'] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_RELEASE
        self.appAutomationDictionary['App_Link'] = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.APP_LINK
        WeMoDevices = ""
        for wemoDevice in self.WemoDevice:
            WeMoDevices = WeMoDevices + "%s:%s "%(wemoDevice,self.WemoDevice[wemoDevice][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion])
        self.appAutomationDictionary['WeMo_Devices'] = WeMoDevices
        FirmwareVersions = ""
        for wemoDevice in self.WemoDevice:
            FirmwareVersions = FirmwareVersions + "%s,"%self.WemoDevice[wemoDevice][WEMO_APP_AUTOMATION_SNS_INSIGHT_LS_CONSTS.WeMoFirmwareVersion]
        self.appAutomationDictionary['Firmware_Version_of_WeMo'] = FirmwareVersions
              
    def VerifyEqual(self, a, b):
        try:
            assert a == b
        except AssertionError:
            raise Exception("Not Equal:", a, b)

    def VerifyNotEqual(self, a, b):
        try:
            assert a != b
        except AssertionError:
            raise Exception("Equal:", a, b)
    
    def VerifyEqualEither(self, a, b, c):
        try:
            assert a == b
        except AssertionError:
            try:
                assert a == c
            except AssertionError:
                raise Exception("Not Equal:", a, b, c)

    def VerifyExisting(self, a, b):
        try:
            assert b in a
        except AssertionError:
            raise Exception("string not existing", a, b)

    def VerifyLarger(self, a, b):
        try:
            assert int(a) > int(b)
        except AssertionError:
            raise Exception("Not Greater", a, b)
    
    def VerifySmaller(self, a, b):
        try:
            assert int(a) < int(b)
        except AssertionError:
            raise Exception("Not Smaller", a, b)
    
    def _stop(self):
        self.trace.Info("Please override this method in derived class")
        self.trace.Info("This method should implement the logic to stop all the tests")
        self.trace.Info("This method should also set the status to STOPPED")
            
    def _pause(self):
        self.trace.Info("Please override this method in derived class")
        self.trace.Info("This method should implement the logic to pause all the tests")
        self.trace.Info("This method should also set the status to PAUSED")

    def _resume(self):
        self.trace.Info("Please override this method in derived class")
        self.trace.Info("This method should implement the logic to resume all the tests")
        self.trace.Info("This method should also set the status to RESUMED")
if __name__ == '__main__':
    WeMoAppAutomation_SNS_INSIGHT_LS = WEMO_APP_AUTOMATION_SNS_INSIGHT_LS("WeMoAppAutomation", "WeMo App Automation Test Device Tool")
    WeMoAppAutomation_SNS_INSIGHT_LS._start()