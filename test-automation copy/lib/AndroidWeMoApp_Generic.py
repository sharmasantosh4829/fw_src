#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os, sys
import logging
import traceback
from time import strftime
import socket
import unittest, time, re
from ExperitestClient import Client
import string
import subprocess
import datetime
from time import strftime
import xmlrpclib
import fnmatch, csv
import zipfile
from optparse import OptionParser
import shutil
import traceback
import Trace
from Logger import *
from WirelessProfiler import *
# from AndroidWeMoApp_Expericlient import *
import ssdp
from UpnpApi import *
from WeMoSmartUpnpApi import *


class AndroidWeMoApp_Generic:
    def __init__(self,smartPhoneDeviceName,smartPhonePort, delay = 0.5):
        # self.WeMoAppLog = Logger(os.path.basename("AndroidWeMoApp_Generic.py").replace(".py","_%s_"%smartPhoneDeviceName.split(":")[-1].strip()+strftime("%Y-%m-%d_%H-%M-%S")+".log"))
        self.WeMoAppLog = None
        self.host = "localhost"
        self.port = smartPhonePort
        self.ExperitestClient = Client() 
        self.wp = WirelessProfiler()
        self.ExperitestClient.init(self.host, self.port)
        self.ExperitestClient.setApplicationTitle(smartPhoneDeviceName)
        self.SmartPhoneInfo = self.ExperitestClient.getDevicesInformation() 
        # self.ExperitestClient = AndroidWeMoApp_Expericlient(self.host, self.port,smartPhoneDeviceName)
        # self.ExperitestClient.setProjectBaseDirectory(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("AndroidWeMoApp_Generic.py")), os.pardir)), "lib", "AndroidWeMoImages"))
        # ##Need to set the path for the reports
        # # self.ExperitestClient.setReporter("xml","reports")
        # self.ExperitestClient.setShowPassImageInReport(True)
        self.result = None
        self.FirmwareVersion = None
        self.AppVersion = None
        self.WemoActivationPin = None
        self.RecipeId = None
        self.remoteAccessEnabled = None
        self.WeMoFriendlyName = None
        self.ruleName = None
        self.defaultWeMoFriendlyName = None
        self.defaultEmailAddress = None
        self.delay = delay
        DEFUALT_OFFSET_VALUE = self.ExperitestClient.p2cy(50)
        OFFSET_VALUE_SPECIFIC = self.ExperitestClient.p2cy(60)
        self.is_fresh_app = False
        self.w = WeMoSmartUpnpApi()
        self.u = UpnpApi()
    ######################################
    #General Key Events for Android Phone#
    ######################################
    def _resetDeviceBridge(self,deviceType=None):
        """
        Resetting the Device Bridge to refresh the connection
        """
        try:
            self.exception_msg = None
            self.result = None
            if (deviceType != None) and (deviceType!="Android"):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The device type has to be 'Android'.")
                raise Exception("The device type has to be 'Android'.")
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Resetting the Device Bridge to refresh the connection.")
            if deviceType == None:
                self.ExperitestClient.resetDeviceBridge()
            elif deviceType != None:
                self.ExperitestClient.resetDeviceBridgeOS(deviceType)
            time.sleep(10)
            self.ExperitestClient.openDevice()
            time.sleep(3)
            self.result = True
        except:
            self.exception_msg = "Failed to reset the device bridge"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _resetDeviceBridge() encountered and Error.")
                self.WeMoAppLog.LogException()
                 
    def _closeDevice(self):
        """
        Closing the Device
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Closing the Device to refresh the connection.")
            time.sleep(5)
            self.ExperitestClient.closeDevice()
            time.sleep(5)
            self.result = True
        except:
            self.exception_msg = "Failed to close the device bridge"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _resetDeviceBridge() encountered and Error.")
                self.WeMoAppLog.LogException()
                 
    def _openDevice(self):
        """
        Opening the Device
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Opening the Device to refresh the connection.")
            time.sleep(5)
            self.ExperitestClient.openDevice()
            time.sleep(5)
            self.result = True
        except:
            self.exception_msg = "Failed to Open the device bridge"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _resetDeviceBridge() encountered and Error.")
                self.WeMoAppLog.LogException()
                 
                         
    def _rebootSmartDevice(self):
        """
        Reboot the Mobile device Connected to the SystemError 
        """ 
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Reboot the Mobile device Connected to the SystemError ")
            time.sleep(2)
            self.ExperitestClient.reboot(timeout=120000)
            time.sleep(20)
            self.result = True
        except:
            self.exception_msg = "Failed to Reboot the Android device"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _rebootSmartDevice() encountered and Error.")
                self.WeMoAppLog.LogException()
                        
    def _lockAndroid(self):
        """
        Unlocking the Android Smart Device Phone
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Unlocking the Android On by sending {UNLOCK}.")
            self.ExperitestClient.sendText("{POWER}")
            time.sleep(1)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to lock the Android Device"
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _lockAndroid() encountered and Error.")
                self.WeMoAppLog.LogException()
        
           
    def _unlockAndroid(self):
        """
        Unlocking the Android Smart Device Phone
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Unlocking the Android Phone by sending {UNLOCK}.")
            self.ExperitestClient.sendText("{UNLOCK}")
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to unlock the Android Device"
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unlockAndroid() encountered and Error.")
                self.WeMoAppLog.LogException()
                         
    def _wakeAndroid(self):
        """
        Wake the Android Smart Device Phone
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Waking the Android On by sending {WAKE}.")
            self.ExperitestClient.sendText("{WAKE}")
            time.sleep(1)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to wake the Android Device"
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _wakeAndroid() encountered and Error.")
                self.WeMoAppLog.LogException()               
                 
                
    def _setDeviceUnderTest(self,Device):
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the device under test.")
            time.sleep(1)
            self.ExperitestClient.setDevice(Device)
            time.sleep(2)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to Set the Android device under Test"
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setDeviceUnderTest() encountered and Error.")
                self.WeMoAppLog.LogException()                  
                         
    def _homeScreen(self):
        """
        Go to the Home Screen of the Android Phone
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking the {HOME} button of the Android Phone.")
            self.ExperitestClient.sendText("{HOME}")
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to Go to Home screen on the Android Phone "
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _homeScreen() encountered and Error.")
                self.WeMoAppLog.LogException()
                 
    def _openAndroidMenu(self):
        """
        Open the Menu on the Android Phone
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Open the Menu on the Android Phone.")
            self.ExperitestClient.sendText("{F2}")
            time.sleep(1)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg ="Failed to Open the Android Menu"
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _openAndroidMenu() encountered and Error.")
                self.WeMoAppLog.LogException()


    def _clickOnDoneButtonToConfirmChangesInWeMoApp(self):
        """
        Clicking on the Done button to confirm changes in WeMo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Done button to confirm changes in WeMo App")

            self._isAppLaunched()
            assert self.result == True
            self._verifyAndClickTheElement("WEB", "xpath=//*[@text='Done']")
            time.sleep(6*self.delay)
        except:
            self.exception_msg = "Failed to click on <Done> button on the WeMo app. Please refer the screen captured with reference to the issue and logs for more precise details."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnDoneButtonToConfirmChangesInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnSaveButtonToConfirmChangesInWeMoApp(self):
        """
        Clicking on the Save button to confirm changes in WeMo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Save button to confirm changes in WeMo App")

            self._isAppLaunched()
            assert self.result == True

            self._verifyAndClickTheElement("WEB", "xpath=//*[@text='Save']")
            time.sleep(2*self.delay)

        except:
            self.exception_msg = "Failed to click on <Save> button to save changes on WeMo App. Please refer the screen captured and logs for exact details."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSaveButtonToConfirmChangesInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnBackButtonToGoBackInWeMoApp(self):
        """
        Click the Back button on the Android Phone
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking the {ESC} button of the Android Phone to go to the previous screen.")
            self.ExperitestClient.sendText("{ESC}")
            time.sleep(2*self.delay)
            self.result = True
        except:
            self.exception_msg = "Failed to click on the Back button on the Android Phone"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnBackButtonToGoBackInWeMoApp() encountered and Error.")
                self.WeMoAppLog.LogException()
                 
    def _clickOnBackButtonToGoBackInWeMoApp_rules(self):
        """
        Click the Back button on the Android Phone
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("dummy function for step files compatibility with iOS")
            self.result = True
        except:
            self.exception_msg = "Failed to click on the Back button on the Android Phone"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnBackButtonToGoBackInWeMoApp_rules() encountered and Error.")
                self.WeMoAppLog.LogException()

    def clickOnInfoButton(self):
        """
        Clicking on Info(question mark) button. 
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on Info(question mark) button. ")
            for i in range(2):
                if self.ExperitestClient.isElementFound("WEB", "id=support_link") == True:
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=support_link")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Warning('The Info button is not found.May be it did not appear.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to click on the Info Button "    
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnInfoButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 ###########################################
    
    ##########################################################################################
    #Application Handling Functions (Install,Uninstall,Launch App, App Close, Clear App Data)#
    ##########################################################################################
    def _installWemoApp(self,appPath,keepdata=True):
        """
        Installs the Wemo App on the Android Phone
        @param appPath: The Wemo App Path on the machine
        @type appPath: String 
        """
        self.result = None
        self.is_fresh_app = True
        try:
                
            if not os.path.exists(appPath):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Cannot install the Application as the appPath:%s does not exists."%appPath)
                raise Exception("Cannot install the Application as the appPath:%s does not exists."%appPath)
            
            self.exception_msg = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Installing the Wemo App:%s."%appPath)
            self.ExperitestClient.install2(appPath, True, keepdata)
            time.sleep(10)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to install the WeMo App on the Android Phone "
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _installWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def _uninstallWemoApp(self,appIdentifier):
        """
        Uninstall the Wemo App from the Android Phone
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String 
        """
        self.result = None
        try:
            self.exception_msg = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Uninstall Wemo App:%s."%appIdentifier.split("/")[0].strip())
            self._clearApplicationData(appIdentifier)
            self.ExperitestClient.uninstall(appIdentifier.split("/")[0].strip())
            time.sleep(10)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            self.exception_msg = "Failed to Un-install the WeMo App on the Android Phone "
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _uninstallWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _launchWemoApp(self,appIdentifier,stopRunning = True):
        """
        Launch the Wmo App on the Android Phone
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launching the Wemo App:%s and waiting for it."%appIdentifier)
            self.ExperitestClient.launch(appIdentifier , True, stopRunning)
            # temp code to collect logs at launch
            # self._getTheAndroidDeviceLogs()
            # time.sleep(20)
            # self._getTheAndroidDeviceLogs()
            # temp code ends
            if self.ExperitestClient.waitForElement("WEB","xpath=//*[@text='Personalize']",0,20*1000):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("wemo app launched and is on setup screen")
                self.result = True
            else:
                self.ExperitestClient.waitForElement("WEB","xpath=//*[@css='ANCHOR.refresh.refresh_img.headerControls']",0,30*1000)
                for i in range(5):
                    if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@css='ANCHOR.refresh.refresh_img.headerControls']"):
                        # handling the whats new banner
                        if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='wemo_whatisnew']",0):
                            self.ExperitestClient.click("WEB", "xpath=//*[contains(@class,'closeBtn') and @top='true']",0,1)
                        time.sleep(2*self.delay)
                        self.result = True
                        break
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("wemo app launched on device screen. Checking for the pop ups.")
                        self._handlePopUpOnWeMoApp()
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('App did not get launched')
                    raise Exception('Raising the Exception as the wemo app could not be launched.')

                if self.is_fresh_app:
                    self.ExperitestClient.waitForElement("WEB","text=Not Now",0,65*1000)
                    if self.ExperitestClient.isElementFound("WEB", "text=Not Now"):
                        self.ExperitestClient.click("WEB", "text=Not Now")
                    self.is_fresh_app = False

        except:
            self.exception_msg = "Tried to launch the %s app and the app did not launch. Please check the App for more details."%(appIdentifier)
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _launchWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()             
                         
    def _handlePopUpOnWeMoApp(self,MoreFeature_Check = True):
        """
        This function will verify the Randomly occurring pop-up on the WeMo App 
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("This function will verify the Randomly occurring pop-up on the WeMo App")
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for Pop up's on WeMo app and handle the same.")
            Text_OnScreen = []
            List_of_PopUps = {
                                'Firmware Update':'Not Now',
                                'Firmware Update Available':'Not Now',
                                'New Firmware Available':'Not Now',
                                'Warming time is over' : 'OK',
                                'Ding!' : 'OK',
                                'Message from WeMo' : 'OK',
                                'Filter Change Detected':'Ok',
                                'seems to be missing its filters':'OK',
                                'Lost Connection':'Okay',
                                'More Features':'Not now',
                                'needs new filters soon.':'OK',
                                'Order new filters':'OK',
                                'Time to refresh!': 'OK', 
                                'WeMo?' : 'No Thanks',
                                'Grouping LED Lightbulbs' : 'Close',
                                "Coffee's ready!" : "OK",
                                "Hide This?" : "Cancel",
                                "Learn":"close"
                            }
             
            try:                
                Text_OnScreen = self.ExperitestClient.getText("WEB").split("\n")
                if Text_OnScreen != None:
                    ZONE = "WEB"
                NativeText_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")
                Text_OnScreen += NativeText_OnScreen
            except:
                Text_OnScreen = self.ExperitestClient.getText("TEXT").split("\n")
                if Text_OnScreen != None:
                    ZONE = "TEXT"    
     
            for i in range(10):                  
                popup_break_flag = True 
                for text_message in List_of_PopUps.keys():
                    for message_on_smartdevice in Text_OnScreen:    
                        if text_message in message_on_smartdevice:
                            if text_message == 'Firmware Update':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Firmware Update']/../..//*[@text='Not Now']",1):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[@text='Firmware Update']/../..//*[@text='Not Now']",1,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                
                                elif self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Firmware Update']/../..//*[@text='Not Now']",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[@text='Firmware Update']/../..//*[@text='Not Now']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.") 


                            if text_message == 'New Firmware Available':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='New Firmware Available']/../..//*[@text='Not Now']",1):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[@text='New Firmware Available']/../..//*[@text='Not Now']",1,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                
                                elif self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='New Firmware Available']/../..//*[@text='Not Now']",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[@text='New Firmware Available']/../..//*[@text='Not Now']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                
                            
                            
                            if text_message == 'Firmware Update Available':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Firmware Update Available']/../..//*[@text='Not Now']",1):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[@text='Firmware Update Available']/../..//*[@text='Not Now']",1,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                
                                elif self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Firmware Update Available']/../..//*[@text='Not Now']",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[@text='Firmware Update Available']/../..//*[@text='Not Now']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.") 
                                                        
                            
                            if text_message == "Hide This?":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","text=The device won't appear until it becomes active again",0):
                                    try:
                                        if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Hide This?' and @nodeName='DIV']/..//*[contains(@text,'Cancel')]")):
                                            time.sleep(1)
                                            self.ExperitestClient.click("WEB", "xpath=//*[@text='Hide This?' and @nodeName='DIV']/..//*[contains(@text,'Cancel')]",0,1)
                                            self.result = True
                                       
                                        elif(self.ExperitestClient.isElementFound("WEB", "id=hide_device")):
                                            time.sleep(1)
                                            self.ExperitestClient.click("WEB", "id=hide_device_cnl",0,1)
                                            self.result = True
                                            
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")                         
                                                        
                            if text_message == "Ding!":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text=concat('The Cook Timer has finished. I', \"'\", 'll keep things warm.')]",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                            
                            #if text_message == "Hide This?"                
    
                            if text_message == "Warming time is over": 
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Warming time is over']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                        
                            if text_message == "Message from WeMo":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE", "class=android.widget.FrameLayout",1):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")      

                            if text_message == "Coffee's ready!":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE", 'xpath=//*[@text="Coffee\'s ready!"]',0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")                                            
                                        
                            if text_message == "seems to be missing its filters":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'seems to be missing its filters.')]",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[contains(@text,'seems to be missing its filters.')]/..//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                            
                            if text_message == "Filter Change Detected":
                                popup_break_flag = False
                                try:
                                    self.ExperitestClient.longClick("WEB", "text=Ok", 0, 1, 0, 0)
                                    Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                except:
                                    Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    if self.WeMoAppLog != None:
                                        self.WeMoAppLog.Info("It seems like another pop-up over shaded Lost Connection pop up Lets try again...")
                            
                            if text_message == "Lost Connection":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB", "text=Lost Connection",0) and self.ExperitestClient.isFoundIn("NATIVE", "text=Lost Connection", 0, "Inside", "TEXT", "Lost Connection", 0, 0):                  
                                    try:
                                        self.ExperitestClient.longClick("WEB", "text=Okay", 0, 1, 0, 0)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("It seems like another pop-up over shaded Lost Connection pop up Lets try again...")
                            
                            if  MoreFeature_Check == True:
                                if text_message == "More Features":
                                    popup_break_flag = False
                                    if self.ExperitestClient.isElementFound("WEB","text=Not now",0):
                                        try:
                                            self.ExperitestClient.click("WEB", "xpath=//*[@text='Not now']", 0, 1)
                                            Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        except:
                                            Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                            if self.WeMoAppLog != None:
                                                self.WeMoAppLog.Info("It seems like another More Feature pop up was over shaded by some other pop up Lets try again...")
                                                
                                    elif self.ExperitestClient.isElementFound("WEB","text=Not Now",0):
                                        popup_break_flag = False
                                        try:
                                            self.ExperitestClient.click("WEB", "xpath=//*[@text='Not Now']", 0, 1)
                                            Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        except:
                                            Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n") 
                                            if self.WeMoAppLog != None:
                                                self.WeMoAppLog.Info("It seems like another More Feature pop up was over shaded by some other pop up Lets try again...")
                            
                            else:
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Info("We are verifying the more feature pop-up on the discovery page, so lets not click on more feature pop-up")
                            
                            if text_message == "Grouping LED Lightbulbs":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","text=Grouping LED Lightbulbs",0):
                                    try:
                                        self.ExperitestClient.click("WEB", "css=A.led-wt-cloz.ui-link[href='#']", 0, 1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("It seems like another More Feature pop up was over shaded by some other pop up Lets try again...")
                                            
                            
                            if text_message == "Time to refresh!":
                                popup_break_flag = False 
                                try:
                                    #self.ExperitestClient.longClick("WEB","xpath=//*[@text='Time to refresh!']/../..//*[@text='OK']", 0, 1, 0, 0)
                                    self.ExperitestClient.click("WEB","xpath=//*[@text='Time to refresh!']/../..//*[@text='OK']", 0, 1) 
                                    Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")                                    
                                except:
                                    Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    if self.WeMoAppLog != None:                                
                                        self.WeMoAppLog.Info("It seems like another Time to refresh pop up was over shaded by some other pop up Lets try again...")
                                    
                            if text_message == "Order new filters":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'Order new filters')]/../..//*[@text='OK']",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[contains(@text,'Order new filters')]/../..//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None: 
                                            self.WeMoAppLog.Info("The pop up was over shaded.")  
        
                            if text_message == "needs new filters soon.":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'needs new filters soon.')]/..//*[@text='OK']",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[contains(@text,'needs new filters soon.')]/..//*[@text='OK']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None: 
                                            self.WeMoAppLog.Info("The pop up was over shaded.")

                            if text_message == "WeMo?":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@id='rate_me_title']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@id='btn_rate_no']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")

                            if text_message == "Learn":
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='wemo_whatisnew' and @top='true']",0):
                                    try:
                                        self.ExperitestClient.click("WEB","xpath=//*[contains(@class,'closeBtn') and @top='true']",0,1)
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                    except:
                                        Text_OnScreen = self.ExperitestClient.getText(ZONE).split("\n")
                                        if self.WeMoAppLog != None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                            
                            
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("No Pop up found at this point of time.")
                self.result = True
        except:
            self.exception_msg = "Failed to verify the Pop-up on WeMo app "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _handlePopUpOnWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
            
                        
    def _isAppLaunched(self):
        """
        Check whether the App is launched or not
        """
        try:
            if "wemo".lower() in self.ExperitestClient.getCurrentApplicationName().lower():
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("wemo app is in launched state")
            else:
                self.result = False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("wemo app crashed.")
                raise Exception('Raising the Exception as the wemo app has crashed.')

        except:
            self.exception_msg = "Failed to check if App is launched or not or App has not being launched "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _isAppLaunched() encountered and Error")
                self.WeMoAppLog.LogException()


    def _getCPUStats(self):
        '''
        Get CPU Stats 
        '''
        try: 
            self.result = None 
            self.exception_msg = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Start Monitoring the CPU statistics.")
    
            self.ExperitestClient.startMonitor("cpu")
            self.ExperitestClient.startMonitor("memory")
            time.sleep(10)
            self.CPU_Usage = self.ExperitestClient.getCounter("cpu")
            self.Memory_Usage = self.ExperitestClient.getCounter("memory")
            self.result = True 
        
        except:
            self.exception_msg = "Failed to get CPU Usage after App Launch."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getCPUStats() encountered and Error")
                self.WeMoAppLog.LogException()     
                
    def _closeApplication(self,appIdentifier):
        """
        Closing the Wemo App on the Android Phone
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String 
        """
        self.exception_msg = None
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Closing the application:%s."%appIdentifier.split("/")[0].strip())
 
        try:
            # if (self.ExperitestClient.isElementFound("WEB","css=SPAN.wemo_logo",0)):
            #     self._getCPUStats()
            self.ExperitestClient.applicationClose((appIdentifier.split("/")[0].strip()))
            time.sleep(self.delay)
            self.result = True
        except:
            self.exception_msg = "Failed to close the Application " 
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _closeApplication() encountered and Error")
                self.WeMoAppLog.LogException()
                        
    def _clearApplicationData(self,appIdentifier):
        """
        Clearing the Application Data of the Wemo App
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String 
        """
        self.result = True
        # self.exception_msg = None
        # self.result = None
        # if self.WeMoAppLog != None:
        #     self.WeMoAppLog.Info("Clearing the Application Data of the application:%s."%appIdentifier.split("/")[0].strip())
        # try:
        #     time.sleep(1)
        #     self.ExperitestClient.applicationClearData(appIdentifier.split("/")[0].strip())
        #     time.sleep(1)
        #     self.result = True
        # except:
        #     self.exception_msg = "Failed to clear the Application "
        #     self._screenCapture()
        #     self._getTheAndroidDeviceLogs()
        #     self.result = False
        #     if self.WeMoAppLog != None:
        #         self.WeMoAppLog.Error("The method _clearApplicationData() encountered and Error")
        #         self.WeMoAppLog.LogException()
                 
    def _getTheAndroidDeviceLogs(self):
        """
        Get the Android Device Logs from the Android Device
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Getting the Android Device Logs from the Android Device")
        try:
            self.exception_msg = None 
            self.result = None
            time.sleep(1)
              
            deviceLogPath = self.ExperitestClient.getDeviceLog()
            time.sleep(1)
            if os.path.exists(deviceLogPath):
                deviceLogFile = open(deviceLogPath,'r')
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("==============+++++") 
                    self.WeMoAppLog.Info("Android Device Log:")
                    self.WeMoAppLog.Info("===================")
                    self.WeMoAppLog.Info(deviceLogFile.read())
                    self.WeMoAppLog.Info("===================")
                deviceLogFile.close()
                self.result = True 
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Could not get the Device Logs of the Android Device")
                self.result = False
        except:
            self.exception_msg = "Failed to get device logs from Android Phone "
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheAndroidDeviceLogs() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _screenCapture(self,currentLogFileName = "%Y-%m-%d_%H-%M-%S"):
        """
        Capture the Screen on the Android Device
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Capture the Screen on the Android Device")
        try:
            self.exception_msg = None
            capturedFilePath = self.ExperitestClient.capture()
            LogDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("AndroidWeMoApp_Generic.py")), os.pardir)), "logs")
            if self.WeMoAppLog != None : 
                currentLogFilePath = self.WeMoAppLog.getLogFilePath() 
            if os.path.exists(currentLogFilePath):
                currentLogFileName = (os.path.basename(currentLogFilePath)).strip().replace(".log","")
            time.sleep(5)
            if os.path.exists(capturedFilePath):
                os.rename(capturedFilePath, os.path.join(LogDir,"%s_%s.png"%(strftime("%Y-%m-%d_%H-%M-%S"),currentLogFileName)))
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Could not get the Captured File Path on the Android Device")
        except:
            self.exception_msg = "Failed to take the Screen shot "
            if self.WeMoAppLog != None:
                self.WeMoAppLog.LogException()
                                 
    def _getTheSmartDeviceInfo(self):
        """
        Get the Android Smart Device Info
        """
        if self.WeMoAppLog != None:   
            self.WeMoAppLog.Info("Getting the Android Smart Device Info:%s"%self.SmartPhoneInfo)
        return self.SmartPhoneInfo
    ##########################################################################################
    
    ########################################
    #Handling the Wemo App Preup Screens#
    ########################################
    def _checkForGetStartedTab(self):
        """
        Verify whether the Get Started .
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Get Started Tab on the Setup Help Page to show how to Setup the Wemo.")

            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=welcome_getstarted_btn")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=welcome_getstarted_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=welcome_getstarted_btn" could not be found.')
        except:
            self.exception_msg = "Failed the verify the get started page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForGetStartedTab() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def clickOnGetStartedTab(self):
        """
        Click on the Get Started Button on the Wemo App.
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Get Started Tab on the Setup Help Page to show how to Setup the Wemo.")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=welcome_getstarted_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=welcome_getstarted_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=welcome_getstarted_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=welcome_getstarted_btn" could not be found.')
        except:
            self.exception_msg = "Failed to click on Get started page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnGetStartedTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnSwitchAndMotionSetupDemoButton(self):
        """
        Click on the Switch/Motion button to go through the Demo of how to set up the Switch/Sensor on the Wemo App.
        """
        try: 
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Switch/Motion button to go through the Demo of how to set up the Switch/Sensor on the Wemo App.")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=WeMo  Switch/Insight")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=WeMo  Switch/Insight")
                    time.sleep(1)
                    self.result = True
                    break
                
                elif (self.ExperitestClient.isElementFound("WEB","text=WeMo setup needs your help.",0)):
                    if (self.ExperitestClient.isElementFound("WEB","text=Not Now",0)):
                        self.ExperitestClient.click("WEB","text=Not Now",0,1)
                        self.result = True 
                        
                time.sleep(1)
            else:
                self.exception_msg = "The Function failed as the text= WeMo  Switch/Insight couldn't be found or the pop-up has over shaded the text on the App  "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensorSwitch" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensorSwitch" could not be found.')
        except:
            self.exception_msg = "Failed to click on the Switch and motion setup demo button"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnSwitchAndMotionSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnLightSwitchSetupDemoButton(self):
        """
        Click on the Light Switch button to go through the Demo of how to set up the Light Switch on the Wemo App.
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Light Switch button to go through the Demo of how to set up the Light Switch on the Wemo App.")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=wemo_lightSwitch")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=wemo_lightSwitch")
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("WEB","text=WeMo setup needs your help.",0)):
                    if (self.ExperitestClient.isElementFound("WEB","text=Not Now",0)):
                        self.ExperitestClient.click("WEB","text=Not Now",0,1)
                        self.result = True 
                        
                time.sleep(1)
            else:
                self.exception_msg = "The Function failed as the text= wemo_lightSwitch couldn't be found or the pop-up has over shaded the text on the App  "                    
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=wemo_lightSwitch" could not be found.')
                raise Exception('Raising the Exception as the element:"id=wemo_lightSwitch" could not be found.')
        except:
            self.exception_msg = "Failed to click on the Light switch setup demo button"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnLightSwitchSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()


    def clickOnAirPurifierSetupDemoButton(self):
        """
        Click on the Light Switch button to go through the Demo of how to set up the Light Switch on the Wemo App.
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Airpurifier  button to go through the Demo of how to set up the AirPurifier on the Wemo App.")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=jarden_airPurifier")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=jarden_airPurifier")
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("WEB","text=WeMo setup needs your help.",0)):
                    if (self.ExperitestClient.isElementFound("WEB","text=Not Now",0)):
                        self.ExperitestClient.click("WEB","text=Not Now",0,1)
                        self.result = True 
                
                else:
                    self.ExperitestClient.swipe2("Down",700,1000) 
                    
                time.sleep(1)
            else:
                self.exception_msg = "The Function failed as the text= jarden_airPurifier couldn't be found or the pop-up has over shaded the text on the App  "                    
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=jarden_airPurifier" could not be found.')
                raise Exception('Raising the Exception as the element:"id=jarden_airPurifier" could not be found.')
        except:
            self.exception_msg = "Failed to click on the Light switch setup demo button"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnAirPurifierSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()

    def clickOnHeaterSetupDemoButton(self):
        """
        Click on the Light Switch button to go through the Demo of how to set up the Light Switch on the Wemo App.
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Heater  button to go through the Demo of how to set up the Heater on the Wemo App.")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=jarden_heater")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=jarden_heater")
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("WEB","text=WeMo setup needs your help.",0)):
                    if (self.ExperitestClient.isElementFound("WEB","text=Not Now",0)):
                        self.ExperitestClient.click("WEB","text=Not Now",0,1)
                        self.result = True 
                
                else:
                    self.ExperitestClient.swipe2("Down",700,1000) 
                    
                time.sleep(1)
            else:
                self.exception_msg = "The Function failed as the text= jarden_heater couldn't be found or the pop-up has over shaded the text on the App  "                    
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=jarden_heater" could not be found.')
                raise Exception('Raising the Exception as the element:"id=jarden_heater" could not be found.')
        except:
            self.exception_msg = "Failed to click on the Light switch setup demo button"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnHeaterSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()
                

                
    def _checkPlugMeInHelpScreen(self):
        """
        Check for the Plug Me In Box on the Wemo App Screen
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Plug Me In Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Plug Me In")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Plug Me In" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Plug Me In" could not be found.')
        except:
            self.exception_msg = "Failed to verify the Plug Me Help screen "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkPlugMeInHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkOpenSettingsHelpScreen(self):
        """
        Check for the Open Settings Box on the Wemo App Screen
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Open Settings Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Open Settings")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Open Settings" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Open Settings" could not be found.')
        except:
            self.exception_msg = "Failed to verify the check for Open Settings Help screen " 
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkOpenSettingsHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkTapWifiHelpScreen(self):
        """
        Check for the Tap WiFi Box on the Wemo App Screen
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Tap WiFi Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Tap WiFi")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Tap WiFi" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Tap WiFi" could not be found.')
        except:
            self.exception_msg = "Failed to verify the Wifi Help screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkTapWifiHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkSelectWiFiScreenInWemoApp(self):
        """
        Check for the Select Wifi in Wemo App Screen
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying that Select Wifi Screen in WeMo App.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Select Your Home Wi-Fi Network']")):
                    self.result = True
                    break
                time.sleep(1)
            else: 
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element xpath=//*[@text=Select Your Home Wi-Fi Network] is not found.')
        except:
            self.exception_msg = "Failed to  Check for the Wemo Switch Setup Screen when selecting Wifi from Network list "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkSelectWiFiScreenInWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkSelectWemoNetworkHelpScreen(self):
        """
        Check for the Select the WeMo Network Box on the Wemo App Screen
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Select the WeMo Network Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Select the WeMo Network")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Select the WeMo Network" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Select the WeMo Network" could not be found.')
        except:
            self.exception_msg = "Failed to verify the Select WeMo Network help screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkSelectWemoNetworkHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkOpenWemoAppHelpScreen(self):
        """
        Check for the Open the WeMo app text on the Wemo App Help Screen.
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Open the WeMo app Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Open the WeMo app to complete the setup.")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Open the WeMo app to complete the setup." could not be found.')
                raise Exception('Raising the Exception as the element:"text=Open the WeMo app to complete the setup." could not be found.')
        except:
            self.exception = "Failed to verify the Open WeMo app Help screen "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkOpenWemoAppHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                  
    def clickOnTheNextArrowForSetupHelp(self,IndexValue=0):
        """
        Click on the Forward Arrow on the Setup Help Screen on the Wemo App
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Next arrow on the Setup help page.")
            
            for i in range(10):   
                # Smart framework            
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.owl-pagination")):
                    if (self.ExperitestClient.isElementFound("WEB", "css=DIV.owl-page.active",IndexValue)):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The App is already the current page ,to be verified")
                        time.sleep(1)
                        self.result = True
                        break                            
                    
                    elif (self.ExperitestClient.isElementFound("WEB", "css=DIV.owl-page",IndexValue)):        
                        self.ExperitestClient.click("WEB", "css=DIV.owl-page",IndexValue)     
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The App is in the current page ,to be verified")                        
                        time.sleep(1)
                        self.result = True
                        break            

                elif(self.ExperitestClient.isElementFound("WEB", "css=P.switch_motion_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.switch_motion_next")
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.light_switch_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.light_switch_next")
                    time.sleep(1)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.slow_cooker_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.slow_cooker_next")
                    time.sleep(1)
                    self.result = True
                    break   
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.heater_smart_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.heater_smart_next")
                    time.sleep(1)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.air_purifier_smart_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.air_purifier_smart_next")
                    time.sleep(1)
                    self.result = True
                    break   
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.humidifier_smart_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.humidifier_smart_next")
                    time.sleep(1)
                    self.result = True
                    break                       
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.coffeeMaker_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.coffeeMaker_next")
                    time.sleep(1)
                    self.result = True
                    break               
                elif(self.ExperitestClient.isElementFound("WEB", "css=P.led_switch_next")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "css=P.led_switch_next")
                    time.sleep(1)
                    self.result = True
                    break   
                elif(self.ExperitestClient.elementSwipe("WEB", "css=DIV.slider", 0, "Right", 0, 2000)):
                    time.sleep(1)
                    self.result = True
                    break 					
                                    
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:css=P.switch_motion_next or element:css=P.light_switch_next could not be found.")
                raise Exception("Raising the Exception as the element:css=P.switch_motion_next or element:css=P.light_switch_next could not be found.")
        except:
            self.exception_msg = "Failed to Click on the NExt Arrow on the Setup Help page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheNextArrowForSetupHelp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTheBackArrowForSetupHelp(self):
        """
        Click on the Backward Arrow on the Setup Help Screen on the Wemo App
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Back arrow on the Setup help page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("default", "BackArrowOnSetupHelpScreen")):
                    time.sleep(1)
                    self.ExperitestClient.click("default", "BackArrowOnSetupHelpScreen")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:BackArrowOnSetupHelpScreen could not be found.")
                raise Exception("Raising the Exception as the element:BackArrowOnSetupHelpScreen could not be found.")
        except:
            self.exception_msg = "Failed to Click on the back arrow on the Setup help screen "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheBackArrowForSetupHelp() encountered and Error")
                self.WeMoAppLog.LogException()


                 
    def clickOnExitSetupHelpForSwitchAndMotion(self):
        """
        Clicking on the exit button to exit the Set up Help Screen for Switch and Motion
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Exit button on the Setup help page to close the help page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=switch_motion_close")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=switch_motion_close",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=switch_motion_close" could not be found.')
                raise Exception('Raising the Exception as the element:"id=switch_motion_close" could not be found.')
        except:
            self.exception_msg = "Failed to click on the Exit Button to exit from the setup screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnExitSetupHelpForSwitchAndMotion() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def clickOnExitSetupHelpForLightSwitch(self):
        """
        Clicking on the exit button to exit the Set up Help Screen for Light Switch
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Exit button on the Setup help page to close the help page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=light_slider_close")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=light_slider_close",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=light_slider_close" could not be found.')
                raise Exception('Raising the Exception as the element:"id=light_slider_close" could not be found.')
        except:
            self.exception_msg = "Failed to click on the Exit Button to exit from the setup screen for Light Switch"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnExitSetupHelpForLightSwitch() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _closeTheSwitchMotionAndLightSwitchDemoPage(self):
        """
        Clicking on the exit button to exit the Siwtch/Motion and Light Switch Demo Help Screen Page
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info(" Clicking on the exit button to exit the Siwtch/Motion and Light Switch Demo Help Screen Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=closeDemoHome")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=closeDemoHome")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=closeDemoHome" could not be found.')
                raise Exception('Raising the Exception as the element:"id=closeDemoHome" could not be found.')
        except:
            self.exception_msg = "Failed to close the Switch Motion and Light Switch demo Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _closeTheSwitchMotionAndLightSwitchDemoPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnWemoSwitchAndMotionSetupDemoButton(self):
        """
        Clicking on the Demo Button for the Switch and Motion for the Setup Help on the Wemo App
        """
        try:
            self.exception = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Demo button on the Setup help page to open the Demo video for the Switch and the Motion.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=switch_setupInstructions_video")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=switch_setupInstructions_video")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=switch_setupInstructions_video" could not be found.')
                raise Exception('Raising the Exception as the element:"id=switch_setupInstructions_video" not be found.')
        except:
            self.exception_msg = "Failed to  Click on the Demo Button for the Switch and Motion for the Setup Help on the Wemo App "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnWemoSwitchAndMotionSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def clickOnWemoLightSwitchSetupDemoButton(self):
        """
        Clicking on the Demo Button for the Light Switch  for the Setup Help on the Wemo App
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Demo button on the Setup help page to open the Demo video for the Light Switch.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=View Installation Video")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=View Installation Video")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=View Installation Video" could not be found.')
                raise Exception('Raising the Exception as the element:"text=View Installation Video" not be found.')
        except:
            self.exception_msg = "Failed to Click on the Demo button on the Setup help page to open the Demo video for the Light Switch."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnWemoSwitchAndMotionSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnWemoSetupFAQ(self):
        """
        Clicking on the FAQ button on the Wemo Switch and Motion Help Page
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the FAQ button on the Wemo Switch and Motion Help Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=FAQ")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=FAQ")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=FAQ" could not be found.')
                raise Exception('Raising the Exception as the element:"text=FAQ" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the FAQ button on the Wemo Switch and Motion Help Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnWemoSetupFAQ() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnLearnMoreAboutWemoSetup(self):
        """
        Click on the Learn More about WeMo link.
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Learn More About Link on the Setup help page to open the Learn More About Wemo Help Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Learn more about WeMo")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Learn more about WeMo")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Learn more about WeMo" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Learn more about WeMo" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Learn More about WeMo link. "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnLearnMoreAboutWemoSetup() encountered and Error")
                self.WeMoAppLog.LogException()
                 ########################################
    def clickOnWemoDemoButton(self,Identifier):
        """
        Clicking on the Demo Button for the Switch and Motion for the Setup Help on the Wemo App
        """
        try:
            self.exception = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Demo button on the Setup help page to open the Demo video for the Switch and the Motion.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "%s" % Identifier)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "%s" % Identifier)
                    time.sleep(1)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB","text=WeMo setup needs your help.",0)):
                    if (self.ExperitestClient.isElementFound("WEB","text=Not Now",0)):
                        self.ExperitestClient.click("WEB","text=Not Now",0,1)
                        self.result = True 
                        
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=switch_setupInstructions_video" could not be found.')
                raise Exception('Raising the Exception as the element:"id=switch_setupInstructions_video" not be found.')
        except:
            self.exception_msg = "Failed to  Click on the Demo Button for the Switch and Motion for the Setup Help on the Wemo App "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnWemoSwitchAndMotionSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()                 
    
    ####################################
    #Selecting the SSID in the Wemo App#
    ####################################
    
    def _checkForGetStartedTabNotVisible(self):
        """
        Verify that the Get Started Button is not shown.
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying that the Get Started Button is not shown while Setting up the Wemo with the Router.")
            
            for i in range(15):
                if not (self.ExperitestClient.isElementFound("WEB", "id=welcome_getstarted_btn")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=welcome_getstarted_btn" is found.')
                raise Exception('Raising the Exception as the element:"id=welcome_getstarted_btn" is found.')
        except:
            self.exception_msg = "Failed to Verify that the Get Started Button is not shown."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForGetStartedTabNotVisible() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForWeMoSetupScreen(self):
        """
        Check for the Wemo device Setup Screen when setting up the Wemo Switch and Sensor
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying that Wemo Setup Screen is displayed which displays the Wireless Networks to connect to.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Select Your Home Wi-Fi Network']")):
                    self.result = True
                    break
            else: 
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Select Your Home Wi-Fi Network is not found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Select Your Home Wi-Fi Network is not found.')
        except:
            self.exception_msg = "Failed to  Check for the Wemo Setup Screen when setting up the Wemo"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForWeMoSetupScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _selectTheSSIDInTheNetworkListInWemoApp(self,ssid,security="WPA2"):
        """
        Select the SSID in the Network List in the Wemo App. 
        @param ssid: The Wireless SSID to which the Wemo will connect to.
        @type ssid: String
        @param security: The Wireless Security (WPA2,None or other)
        @type security: String    
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Selecting the SSID:%s whose wireless Security is:%s"%(ssid,security))
            self._getTheAndroidDeviceLogs()

            if security == "WPA2":
                for i in range(15):
                    if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']"%ssid) == True:
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']"%ssid)
                        time.sleep(2 * self.delay)
                        self.result = True
                        break
                    else:
                        time.sleep(20 * self.delay)
                        self.ExperitestClient.swipe2("Down",700,300)
                        self._getTheAndroidDeviceLogs()
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%(ssid))
                    raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%(ssid))
            if security == "None":
                for i in range(5):
                    if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']"%ssid) == True:
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']"%ssid)
                        time.sleep(2)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ssid)
                    raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ssid)
        except:
            self.exception_msg = "Failed to Select the SSID in the Network List in the Wemo App. "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheSSIDInTheNetworkListInWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                     
    
    def _verifySelectedWifiNetworkSSID(self,ssid,security="WPA2"):
        """
        Verify whether the Selected Network Security SSID is the right Network SSID. 
        @param ssid: The Wireless SSID to which the Wemo will connect to.
        @type ssid: String
        @param security: The Wireless Security (WPA2,None or other)
        @type security: String      
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Selected Network Security SSID is the right Network SSID.")
            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("WEB", "xpath=//*[@id='selectedWifiNetworkSsid']",0,"text").strip() == ssid):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Wireless Network:%s selected is the right Wireless Network."%(ssid))
                    self.result = True
                    break
            else:
                self.WeMoAppLog.Error('Raising the Exception as the element:"id=selectedWifiNetworkSsid" could not be found.')
                raise Exception('Raising the Exception as the element:"id=selectedWifiNetworkSsid" could not be found.')
        except:
            self.exception_msg = "Failed to Verify the Selected Network Security SSID ."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifySelectedWifiNetworkSSID() encountered and Error")
                self.WeMoAppLog.LogException()
    

    
    def _enterWirelessSecurityPasswordInWemoApp(self,dummy=None,password=None):
        """
        Enter the Wireless Network Password for the Wemo to connect to the Wireless Network in the Wemo App.
        @param password: The Wireless Security Password for the Wireless Network Selected
        @type password: String    
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Entering the Wireless Network Password:%s in the Network Password field"%(password)) 
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='ap_password_input']"):
                    self.ExperitestClient.elementSendText("WEB", "xpath=//*[@id='ap_password_input']", 0, password)
                    self.ExperitestClient.closeKeyboard()
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=ap_password_input" could not be found.')
                raise Exception('Raising the Exception as the element:"id=ap_password_input" could not be found.')
        except:
            self.exception_msg = "Failed to Enter the Wireless Network Password for the Wemo to connect to the Wireless Network in WeMo App "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterWirelessSecurityPasswordInWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                     
    def _clickOnJoinButtonToAssociateWemoToRouter(self):
        """
        Click on the Save button to confirm the changes on Saving the Router Password in the WeMo Setup Page
        The name of th function is inline with iOS
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on Saving the Router Password in the WeMo Switch Setup Page")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Save']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Save']")
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Save] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Save] could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Save button to confirm the changes on Saving the Router Password in the WeMo Switch Setup Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnJoinButtonToAssociateWemoToRouter() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForSavingTheRouterPasswordInWeMoSwitchSetupPage(self):
        """
        Click on the Cancel button to cancel the changes on Saving the Router Password in the WeMo Switch Setup Page
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on Saving the Router Password in the WeMo Switch Setup Page")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Cancel")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Cancel" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Cancel button to cancel the changes on Saving the Router Password in the WeMo Switch Setup Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForSavingTheRouterPasswordInWeMoSwitchSetupPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 ###################################################################################################
    
    ######################################################
    #Handling the Setup Successful Screen in the Wemo App#
    ######################################################
    def _checkForRemoteAccess(self,ssid,password,WeMoSmartPhoneSSIDName,WeMoSerialNumber,security="WPA2"): 
        """
        Check for the Remote Access Pop UP on the Setup Successful Screen.
        Verify that the Remote Access is enabled. If not then try again to Enable it.
        """
        try:
            self.exception_msg = None
            self.result = None
            remoteAccessNotEnableOccurence = 0
            connectionToRouterFailed = 0
            self.result = None  
            self.remoteAccessEnabled = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Remote Access Pop Up on the Setup Successful screen of the Wemo App")
            for i in range(5):
                if ((self.ExperitestClient.isElementFound("WEB", "xpath=//*[@class='android.widget.LinearLayout']") == True) and (self.ExperitestClient.getTextIn2("WEB", "xpath=//*[@class='android.widget.LinearLayout']", 0, "WEB", "Inside", 0, 0).strip() == "Remote Access Enabled")) or (self._checkForWeMoConnectivityLost() == True) or (self.ExperitestClient.isElementFound("WEB", "id=device_container")) or (self.ExperitestClient.isElementFound("WEB", "id=mainContainer")) or (self.ExperitestClient.isElementFound("WEB", "id=welcome_getstarted_btn")) or ((self.ExperitestClient.isElementFound("WEB", "id=try_again_btn") == True) and (self.ExperitestClient.isElementFound("WEB", "text=No Network Connection") == True)) or (self.ExperitestClient.isElementFound("WEB", "text=Remote Access Enabled", 0)) or (self.ExperitestClient.isElementFound("WEB", "text=Firmware Update", 0)) or (self.ExperitestClient.isElementFound("WEB", "text=More Features", 0)):
                    self.result = True
                    self.remoteAccessEnabled = True
                    if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Not Now']") == True):
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='Not Now']") 
                        break
                # elif (remoteAccessNotEnableOccurence == 5) or (connectionToRouterFailed == 5):
                #     if self.WeMoAppLog != None:
                #         self.WeMoAppLog.Error("Connection cannot be established with the Router. Please check the Connectivity.")
                #     try:
                #         if self.WeMoAppLog != None:
                #             self.WeMoAppLog.Info("Creating Wireless Profile for the WeMo Device:%s over Wifi"%WeMoSmartPhoneSSIDName)
                #         self.wp.createWirelessProfile(WeMoSmartPhoneSSIDName, "none")
                #         if self.WeMoAppLog != None:
                #             self.WeMoAppLog.Info("Adding Wireless Profile for the WeMo Device:%s over Wifi"%WeMoSmartPhoneSSIDName)
                #         self.wp.addWirelessProfile(WeMoSmartPhoneSSIDName)
                #         if self.WeMoAppLog != None:
                #             self.WeMoAppLog.Info("Connecting to the WeMo Device:%s over Wifi"%WeMoSmartPhoneSSIDName)
                #         (result, message) = self.wp.connectToWirelessProfile(WeMoSmartPhoneSSIDName, "Wireless Network Connection")
                #         time.sleep(30)
                #     except:
                #         if self.WeMoAppLog != None:
                #             self.WeMoAppLog.Critical("Exception in creating/adding/connecting to wireless SSID:%s."%WeMoSmartPhoneSSIDName)
                #         raise Exception("Exception in creating/adding/connecting to wireless SSID:%s."%WeMoSmartPhoneSSIDName)
                #     if result == False:
                #         if self.WeMoAppLog != None:
                #             self.WeMoAppLog.Critical("Server could not connect to:%s. Error Message:%s.WeMo got asscoiated to the Router without enabling Remote Access.Bummer!!"%(WeMoSmartPhoneSSIDName,message))
                #             self.WeMoAppLog.Critical("Factory Resetting the WeMo:%s!!"%(WeMoSmartPhoneSSIDName,message))
                #         ssdp.discover(WeMoSerialNumber,"urn:Belkin:service:basicevent:1")
                #         self.WeMoIP = ssdp.ipOfWeMoDevice
                #         if self.WeMoIP == None:
                #             if self.WeMoAppLog != None:
                #                 self.WeMoAppLog.Error("Wemo with the Serial Number:%s did not get discovered. UPNP Error or SSDP Discovery Failed."%WeMoSerialNumber)
                #             #raise Exception("Wemo with the Serial Number:%s did not get discovered. UPNP Error or SSDP Discovery Failed."%WeMoSerialNumber)
                #         if self.WeMoAppLog != None:
                #             self.WeMoAppLog.Info("Factory Resetting the WeMo")
                #
                #         try:
                #             self.UPNP.wemoHardReset(self.WeMoIP)
                #             if self.UPNP.responseCode != "200":
                #                 if self.WeMoAppLog != None:
                #                     self.WeMoAppLog.Error("UPnP call wemoHardReset failed.Cannot Factory Reset the WeMo. Aborting the test!.")
                #                 raise Exception("UPnP call wemoHardReset failed.Cannot Factory Reset the WeMo. Aborting the test!.")
                #             time.sleep(90)
                #         except:
                #             if self.WeMoAppLog != None:
                #                 self.WeMoAppLog.Error("Cannot Factory Reset the Wemo. UPNP Call Failed!")
                #             raise Exception("Cannot Factory Reset the Wemo. UPNP Call Failed!")
                #         raise Exception("Connection cannot be established with the Router. Please check the Connectivity.")
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error("Server successfully connected to:%s.IP Address of the Server:%s.WeMo still in AP Mode.Hooray!!"%(WeMoSmartPhoneSSIDName,message))
                        raise Exception("Connection cannot be established with the Router. Please check the Connectivity.")
                                        
                elif self._checkForWeMoNotAbleToConnectToTheRouter() == True:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Warning("Sorry Connection of the WeMo to the Router failed. Trying Again.")
                    connectionToRouterFailed = connectionToRouterFailed + 1 
                    self._checkForGetStartedTabNotVisible() 
                    assert self.result == True
                    self._checkForWeMoSetupScreen()
                    if self.result == True : 
                        self._selectTheSSIDInTheNetworkListInWemoApp(ssid,security)
                        assert self.result == True
                        self._verifySelectedWifiNetworkSSID(ssid,security)
                        assert self.result == True
                        self._enterWirelessSecurityPasswordInWemoApp(password=password)
                        assert self.result == True
                        self._clickOnJoinButtonToAssociateWemoToRouter()
                        assert self.result == True
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The App is still trying to connect to the home netwrok , so lets wait for it to complete")
                elif self._checkForConnectionToWeMoFailed() == True:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Warning("Sorry Connection To WeMo Failed. Trying Again.")
                    raise Exception("Sorry Connection To WeMo Failed. Trying Again.")
                elif self._checkForRemoteAccessNotEnabledPopUp() == True:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Warning("Sorry Remote Access is not enabled.")
                        self.WeMoAppLog.Warning("Trying again to enable Remote Access.")
                    remoteAccessNotEnableOccurence = remoteAccessNotEnableOccurence + 1
                    self.clickOnTryAgainButtonToEnableRemoteAccess()
                    assert self.result == True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=status_holder_header" could not be found.')
                raise Exception('Raising the Exception as the element:"id=status_holder_header" could not be found.')
        except:
            self.exception_msg = "Remote Access Pop-up couldn't be found while performing setup of the WeMo Device"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.remoteAccessEnabled = False
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForConnectionToWeMoFailed(self):
        """
        Check for the Connection To WeMo Failed message while associating the WeMo to the Router
        """
        try:
            self.exception_msg = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Connection To WeMo Failed message while associating the WeMo to the Router")
            time.sleep(1)
            if (self.ExperitestClient.isElementFound("WEB", "text=Sorry...") == True) and (self.ExperitestClient.isElementFound("WEB", "text=Connection to WeMo Failed") == True):
                return True
            return False
        except:
            self.exception_msg = "Failed to verify WeMo Failed message while associating the WeMo to the Router"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForConnectionToWeMoFailed() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForWeMoNotAbleToConnectToTheRouter(self):
        """
        Check for the pop up box which say "WeMo App was unable to connect to the router"
        """
        try:
            self.exception_msg = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the pop up box which say WeMo App was unable to connect to the router")
            if (self.ExperitestClient.isElementFound("WEB", "id=setup_password_fail_ok_button") == True):
                self.ExperitestClient.click("WEB", "id=setup_password_fail_ok_button")
                return True
            return False
        except:
            self.exception_msg = "Failed to  Verify for the pop up box which say 'WeMo App was unable to connect to the router' "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForWeMoNotAbleToConnectToTheRouter() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTryAgainButtonToAssociateWeMoToRouter(self):
        """
        Clicking on the Try Again Button to associate the WeMo to the Router
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Try Again Button to associate the WeMo to the Router")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=Sorry...") == True) and (self.ExperitestClient.isElementFound("WEB", "text=Connection to WeMo Failed") == True):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Sorry..." or "text=Connection to WeMo Failed" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sorry..." or "text=Connection to WeMo Failed" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "id=try_again_btn") == True):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=try_again_btn")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=try_again_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sorry..." or "text=Connection to WeMo Failed" could not be found.')
        except:
            self.exception_msg = "Failed to click on Try Again Button to associate the WeMo to the Router"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTryAgainButtonToAssociateWeMoToRouter() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForRemoteAccessNotEnabledPopUp(self):
        """
        Check for the Pop up which says to Remote Access Not Enabled
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Pop up which says to Remote Access Not Enabled")
            if (self.ExperitestClient.isElementFound("WEB", "id=remote_status_body") == True) and (self.ExperitestClient.elementGetText("WEB", "id=remote_status_body", 0).strip() == "Sorry, we were unable to setup your remote access just now.To try later, go to Application Menu > Remote Access"):
                return True
            return False
        except:
            self.exception_msg = "Failed to Verify for the Pop up which says to Remote Access Not Enabled"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForRemoteAccessNotEnabledPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnLaterButtonForNotEnableRemoteAccess(self):
        """
        Click on the Later button on the Remote Access Not Enabled Pop up
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Later button on the Remote Access Not Enabled Pop up")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=remote_status_body") == True) and (self.ExperitestClient.elementGetText("WEB", "id=remote_status_body", 0).strip() == "Sorry, we were unable to setup your remote access just now.To try later, go to Application Menu > Remote Access"):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=remote_status_body" could not be found.')
                raise Exception('Raising the Exception as the element:"id=remote_status_body" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Later")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Later")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=remote_status_ok_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=remote_status_ok_btn" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Later button on the Remote Access Not Enabled Pop up "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnLaterButtonForNotEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTryAgainButtonToEnableRemoteAccess(self):
        """
        Click on the Try Again button on the Remote Access Not Enabled Pop up
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Try Again button on the Remote Access Not Enabled Pop up")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=remote_status_body") == True) and (self.ExperitestClient.elementGetText("WEB", "id=remote_status_body", 0).strip() == "Sorry, we were unable to setup your remote access just now.To try later, go to Application Menu > Remote Access"):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=remote_status_body" could not be found.')
                raise Exception('Raising the Exception as the element:"id=remote_status_body" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Try Again")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Try Again")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=remote_status_try_again_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=remote_status_try_again_btn" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Try Again button on the Remote Access Not Enabled Pop up "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTryAgainButtonToEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForWeMoConnectivityLost(self):
        try:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Alert which says that the WeMo Connectivity is Lost.")
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='remote_status_body']")):
                    if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='remote_status_body']"):
                        self.ExperitestClient.click("WEB","xpath=//*[@text='OK']")
                        self.ExperitestClient.click("WEB","xpath=//*[@text='OK']") #hack
                        self.result =  True
                        break
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Warning("The Smart Phone Got connected to the Remote Network. Does not have the Key yet.")
                        self.WeMoAppLog.Warning("The Smart Phone Got connected to the Remote Network. Does not have the Key yet.")
                        self.result = True
                else:
                    time.sleep(10 * self.delay)
            self.result =  True
            return True
        except:
            self.exception_msg = "Wemo connectivity lost pop up did not come"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForWeMoConnectivityLost() encountered and Error")
                self.WeMoAppLog.LogException()
     
    def _verifyAndCheckForThePersonalizePage(self):
        """
        Verify and check for the Personalize Page while launching the Wemo App during Setup
        Email should not be seen
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True 
            # WemoDefaultNames = {"Switch":"WeMo Switch","Sensor":"WeMo Motion","Insight":"WeMo Insight","Motion":"WeMo Motion","Light":"WeMo LightSwitch","AirPurifier":"AirPurifierPersonalize","Humidifier":"HumidifierPersonalize","SlowCooker":"SlowCookerPersonalize","CoffeeMaker":"CoffeeMakerPersonalize","HeaterA":"HeaterAPersonalize","Maker":"WeMo Maker","HeaterB":"HeaterAPersonalize","InsightV2":"WeMo Insight"}
            # if WeMoDeviceType not in WemoDefaultNames:
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')
            #     raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify and check for the Personalize Page for the default name while launching the Wemo App during Setup")
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Personalize']") == True:
                    self.result = True
                    break
                else:
                    time.sleep(2*self.delay)
                
            # for i in range(5):
            #     if self.ExperitestClient.elementGetProperty("WEB","xpath=//*[@id='friendly_name']",0,"placeholder").__contains__(WemoDefaultNames[WeMoDeviceType]):
            #         self.result = True
            #         break
    
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Personalize] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Personalize] could not be found.')

            for i in range(2):
                if not self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Email']"):
                    self.result = True
                    break
        except:
            self.exception_msg = "Failed to Verify the default name of the wemo during the setup."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyAndCheckForThePersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getDefaultWemoFriendlyName(self):
        """
        Get the default WeMo Friendly Name for the WeMo Device in the Setup Successful Screen
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True         
            self.result = None
            self.defaultWeMoFriendlyName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the default WeMo Friendly Name for the WeMo Device in the Setup Successful Screen")
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("WEB", "text=Personalize") == True:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Personalize" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Personalize" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("WEB", "id=friendly_name") == True:
                    time.sleep(1)
                    self.defaultWeMoFriendlyName = self.ExperitestClient.elementGetText("WEB", "id=friendly_name",0).strip()
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=friendly_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=friendly_name" could not be found.')
            assert self.defaultWeMoFriendlyName != None
        except:
            self.exception_msg = "Failed to Get the default WeMo Friendly Name for the WeMo Device in the Setup Successful Screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            self.defaultWeMoFriendlyName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getDefaultWemoFriendlyName() encountered and Error")
                self.WeMoAppLog.LogException()
                               
    def _enterWemoFriendlyName(self,WemoFriendlyName,WemoSmartPhoneSSIDName):
        """
        Enter the Wemo Friendly Name in the Wemo Name Field in the Setup Successful Screen
        @param WemoFriendlyName: The Wemo Friendly Name for the Wemo Switch or the Sensor
        @type WemoFriendlyName : String 
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True 
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Entering the Wemo Friendly Name:%s in the Wemo Name Field"%WemoFriendlyName)
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Personalize']") == True:
                    self.result = True
                    break

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Personalize" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Personalize" could not be found.')

             
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='friendly_name']") == True:
                    self.ExperitestClient.elementSendText("WEB", "xpath=//*[@id='friendly_name']",0,WemoFriendlyName)
                    self.ExperitestClient.closeKeyboard()
                    if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Alert']",0)):
                        if (self.ExperitestClient.isElementFound("WEB","text=OK",0)):
                            self.ExperitestClient.click("WEB","text=OK",0,1)
                            self.ExperitestClient.click("WEB","text=OK",0,1)
                            self.result = True
                            break
                    else:
                        self.result = True
                        break

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=friendly_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=friendly_name" could not be found.')
        except:
            self.exception_msg = "Failed to Enter the Wemo Friendly Name in the Wemo Name Field in the Setup Successful Screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterWemoFriendlyName() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForSavingTheWemoFriendlyName(self):
        """
        Click on the Done button to confirm the changes on Saving the Wemo Friendly Name
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True  
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on Saving the Wemo Friendly Name")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Done']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Done']")
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE","text=Alert",0)):
                    if (self.ExperitestClient.isElementFound("WEB","text=OK",0)):
                        self.ExperitestClient.click("WEB","text=OK",0,1)
                        self.ExperitestClient.click("WEB","text=OK",0,1)
                        self.result = True
                
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Done" could not be found.')
        except:
            self.exception_msg = "Failed to  Click on the Done button to confirm the changes on Saving the Wemo Friendly Name"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForSavingTheWemoFriendlyName() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForSavingTheWemoFriendlyName(self):
        """
        Click on the Cancel button to cancel the changes on Saving the Wemo Friendly Name
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True         
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on Saving the Wemo Friendly Name")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Cancel")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Cancel" could not be found.')
        except:
            self.exception = "Failed to  Click on the Cancel button to cancel the changes on Saving the Wemo Friendly Name "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForSavingTheWemoFriendlyName() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyRememberWiFiSettingsInPersonalizePage(self):
        """
        Verify Remember WiFi Settings is checked in Personalize Page
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True         
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Remember Wi-Fi Settings Tab is checked in the Personalize Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Remember Wi-Fi Settings",1)):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remember Wi-Fi Settings"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remember Wi-Fi Settings" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=Remember Wi-Fi Settings", 1, "Left", "default", "RememberWifiChecked", 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remember Wi-Fi Settings" or "RememberWifiChecked" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remember Wi-Fi Settings" or "RememberWifiChecked" could not be found.')
        except:
            self.exception_msg = "Failed to Verify Remember WiFi Settings is checked in Personalize Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRememberWiFiSettingsInPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()


    def _uncheckRememberWiFiSettingsInPersonalizePage(self):
        """
        Uncheck Remember WiFi Settings in Personalize Page
        """
        try:
            self.exception_msg = None
            self._isAppLaunched()
            assert  self.result == True
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("UnCheck the Remember Wi-Fi Settings Tab in the Personalize Page.Make sure it is unchecked.")
            self.ExperitestClient.swipeWhileNotFound("Down",200,"WEB","xpath=//*[@text='Remember Wi-Fi Settings']",500,2,False)
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Remember Wi-Fi Settings']",0)):
                    self.result = True
                    break
                self.ExperitestClient.swipeWhileNotFound("Down",200,"WEB","xpath=//*[@text='Remember Wi-Fi Settings']",500,2,False)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remember Wi-Fi Settings"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remember Wi-Fi Settings" could not be found.')

            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@class='off' and @id='remember_wifi']", 0):
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is already unchecked.")
            else:
                self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='remember_wifi']", 0)
                self.ExperitestClient.click("WEB", "xpath=//*[@id='remember_wifi']",0,1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isElementFound("WEB", "xpath=//*[@class='off' and @id='remember_wifi']", 0)
                self.result = True

        except:
            self.exception_msg = "Failed to Uncheck Remember WiFi Settings in Personalize Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _uncheckRememberWiFiSettingsInPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()

                         
    def _clickOnPersonalizeButton(self,verify_email=True):
        """
        Click on the Proceed button to confirm the changes on Wemo Personalize Page
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True         
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Proceed button to confirm the changes on Wemo Personalize Page")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@css='A.save_setup.ui-link']",0)):
                    self.ExperitestClient.click("WEB", "xpath=//*[@css='A.save_setup.ui-link']",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[@text="Proceed"]" could not be found.')
                raise Exception('Raising the Exception as the element:"xpath=//*[@text="Proceed"]" could not be found.')
            time.sleep(5*self.delay)
            if verify_email:
                for i in range(5):
                    # hack: as there are scenarios where we will not be able to know the status of app(fresh or old) and the sequence of test cases to determine whether the email opt in screen
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Email']"):  # will appear or not; however email opt in feature will be tested in setup cases 89 and 90
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Handling email screen after clicking proceed button")
                        self.verifyEmailOptIn(True)
                        break
       
        except:
            self.exception_msg = "Failed to Click on the Proceed button to confirm the changes on Wemo Personalize Page "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnPersonalizeButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getDefaultEmailAddress(self):
        """
        Get the default Email Address in the Setup Successful Screen
        """
        try:
            self.exception_msg = None
            self.result = None
            self.defaultEmailAddress = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the default Email Address in the Setup Successful Screen")
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "id=email_address") == True:
                    time.sleep(1)
                    self.defaultEmailAddress = self.ExperitestClient.elementGetText("WEB", "id=email_address",0).strip()
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=email_address" could not be found.')
                raise Exception('Raising the Exception as the element:"id=email_address" could not be found.')
            assert self.defaultEmailAddress != None
        except:
            self.exception_msg = "Failed to Get the default Email Address in the Setup Successful Screen "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            self.defaultEmailAddress = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getDefaultEmailAddress() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyEmailAddress(self,emailAddress):
        """
        Verify Email Address in the Setup Successful Screen
        """
        try:
            self._isAppLaunched() 
            assert  self.result == True          
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify Email Address in the Setup Successful Screen")
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "id=email_address") == True:
                    time.sleep(1)
                    assert self.ExperitestClient.elementGetText("WEB", "id=email_address",0).strip() == emailAddress
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=email_address" could not be found.')
                raise Exception('Raising the Exception as the element:"id=email_address" could not be found.')
        except:
            self.exception_msg = "Failed to  Verify Email Address in the Setup Successful Screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyEmailAddress() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnEmailTabInSetUpPage(self):
        """
        Click on the Email Tab on the Setup Successful Screen 
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Email Tab on the Setup Successful Screen")
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "text=Setup Successful") == True:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Setup Successful" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Setup Successful" could not be found.')
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "id=email_address") == True:
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=email_address",0,1)
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=email_address" could not be found.')
                raise Exception('Raising the Exception as the element:"id=email_address" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Email Tab on the Setup Successful Screen  "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()   
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnEmailTabInSetUpPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _enterEmailOnTheEmailPage(self,emailAdress=None):
        """
        Enter the Email Address on the Email Page in the Setup Successful Screen
        @param emailAdress: The email address to be entered
        @type emailAdress : String 
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Enter the Email Address:%s on the Email Page in the Setup Successful Screen"%emailAdress)
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "text=Email") == True:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Email" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Email" could not be found.')
             
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "id=setup_email") == True:
                    time.sleep(1)
                    if emailAdress!=None:
                        self.ExperitestClient.elementSendText("WEB", "id=setup_email",0,emailAdress)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=setup_email" could not be found.')
                raise Exception('Raising the Exception as the element:"id=setup_email" could not be found.')
        except:
            self.exception_msg = "Enter the Email Address on the Email Page in the Setup Successful Screen"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()   
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterEmailOnTheEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _confirmChangesForSavingTheEmail(self):
        """
        Click on the Done button to confirm the changes on Saving the Email
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on Saving the Email")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=set_email_done_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=set_email_done_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=set_email_done_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=set_email_done_btn" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Done button to confirm the changes on Saving the Email "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForSavingTheEmail() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForSavingTheEmail(self):
        """
        Click on the Cancel button to cancel the changes on Saving the Email
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on Saving the Email")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=set_email_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=set_email_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=set_email_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=set_email_cancel_btn" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Cancel button to cancel the changes on Saving the Email "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForSavingTheEmail() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForEmailErrorPopUp(self):
        """
        Check for the Email Error Popup when Invalid Email is Entered
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Email Error Popup when Invalid Email is Entered")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=setup_email_validation_popup")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=setup_email_validation_popup" could not be found.')
                raise Exception('Raising the Exception as the element:"id=setup_email_validation_popup" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Invalid Email")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Invalid Email" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Invalid Email" could not be found.')
        except:
            self.exception_msg = "Failed to verify the Email Error Popup when Invalid Email is Entered"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForEmailErrorPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTheOkButtonToCloseTheEmailErrorPopUp(self):
        """
        Check for the Email Error Popup when Invalid Email is Entered and click on Ok button
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Email Error Popup when Invalid Email is Entered and click on Ok button")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=setup_email_validation_popup")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=setup_email_validation_popup" could not be found.')
                raise Exception('Raising the Exception as the element:"id=setup_email_validation_popup" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Invalid Email")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Invalid Email" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Invalid Email" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=setup_email_validation_ok_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=setup_email_validation_ok_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=setup_email_validation_ok_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=setup_email_validation_ok_btn" could not be found.')
        except:
            self.exception_msg = "Failed to verify Email Error Popup when Invalid Email is Entered and click on Ok button "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()    
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheOkButtonToCloseTheEmailErrorPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 ############################################################################################
    
    #################################################
    #Handling the Device List Screen on the Wemo App#
    #################################################            
    def _clickOnRefreshButton(self,duration=10):
        """
        Clicking on the Refresh button on the Wemo App
        """
        try:
            self.exception_msg = None 
            self.result = None
            self._isAppLaunched() 
            assert self.result == True

            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Refresh button on the WeMo App")

            self._verifyAndClickTheElement("WEB","xpath=//*[@class='refresh refresh_img headerControls']")
            time.sleep(duration*self.delay)
        
        except:
            self.exception_msg = "Failed to Click on the Refresh button on the Wemo App "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnRefreshButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnCancelButtonForNotRecreatingTheDeviceList(self):
        """
        Click on the Cancel button when the Recreate Device List Pop Up appears
        """
        try:
            self.exception_msg = None 
            self.result = None
            popUpFound = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button when the Reload Device List? Pop Up appears")
            for i in range(3):
                if(self.ExperitestClient.isElementFound("WEB", "id=reload_device")):
                    self.result = True
                    popUpFound = True
                    break
                time.sleep(1)
            else:
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('The "Reload Device List?" Pop up did not appear.')
            
            if popUpFound == True:
                for i in range(5):
                    if(self.ExperitestClient.isElementFound("WEB", "id=reload_device_cancel_button")):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "id=reload_device_cancel_button",0,1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=reload_device_cancel_button" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=reload_device_cancel_button" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Cancel button when the Recreate Device List Pop Up appears"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnCancelButtonForNotRecreatingTheDeviceList() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnYesButtonForRecreatingTheDeviceList(self):
        """
        Click on the Yes button when the Reload Device List Pop Up appears
        """
        try:
            self.exception_msg = None 
            self.result = None
            popUpFound = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Yes button when the Reload Device List Pop Up appears")
            for i in range(3):
                if(self.ExperitestClient.isElementFound("WEB", "id=reload_device")):
                    time.sleep(1)
                    self.result = True
                    popUpFound = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB","text=Cancel",0)):
                    self.ExperitestClient.click("WEB","text=Cancel",0,1)
                    self.result = True             
                        
                time.sleep(1)
            else:
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('The "Reload Device List?" Pop up did not appear.')
            
            if popUpFound == True:
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=reload_device_yes_button")):
                        time.sleep(1)
                        try: 
                            self.ExperitestClient.click("WEB", "id=reload_device_yes_button",0,1)
                            break
                        except:
                            if (self.ExperitestClient.isElementFound("WEB","text=Cancel",0)):
                                self.ExperitestClient.click("WEB","text=Cancel",0,1)
                                self.result = True 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info('The "Click was unsuccessufull , so trying again to click an element.')     
                    
                    elif (self.ExperitestClient.isElementFound("WEB","text=Cancel",0)):
                                self.ExperitestClient.click("WEB","text=Cancel",0,1)
                                self.result = True             
                                                
                    time.sleep(1)
                    self.result = True
                        
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info('Raising the Exception as the element:"id=reload_device_yes_button" could not be found.')
                    #raise Exception('Raising the Exception as the element:"id=reload_device_yes_button" could not be found.')
        except:
            self.exception_msg = "Failed to Click on the Yes button when the Reload Device List Pop Up appears"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnYesButtonForRecreatingTheDeviceList() encountered and Error")
                self.WeMoAppLog.LogException()
                                
    def _verifyRefreshButtonNotFoundWhenClickedOnEditButton(self):
        """
        Verify Refresh button not found on the Wemo App when clicked On the Edit Buttton
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched() 
            assert  self.result == True         
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Refresh button not found On the WeMo App when clicked on the Edit buttton")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='refresh_device_list']",0))== False:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=refresh_device_list" is found.')
                raise Exception('Raising the Exception as the element:"text=Refresh Devices list" is found.')
        except:        
            self.exception_msg = "Failed to Verify Refresh button not found on the Wemo App when clicked On the Edit Buttton"
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRefreshButtonNotFoundWhenClickedOnEditButton() encountered and Error")
                self.WeMoAppLog.LogException()
                                
    
    def _verifyWemoDeviceInDeviceListContainer(self,WemoFriendlyName, refresh = True):
        """
        Verify whether the Wemo Deivice is present in the Device List Container or not
        @param WemoFriendlyName: The friendly name of the Wemo Device
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Going to devices page and verifying whether the WeMo Device: <%s> is present in the Device List Container or not"%WemoFriendlyName)
            # if not self.ExperitestClient.isElementFound("WEB", "xpath=//*[@class='deviceIcon tabIcon' and @top='true']"):
            #     self._goToTheDevicesPage()
            self.exception_msg = None
            self._isAppLaunched()
            assert self.result == True
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']"%WemoFriendlyName,0):
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    self.ExperitestClient.swipe("Down",250)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"%s"could not be found.'%(WemoFriendlyName))
                raise Exception('Raising the Exception as the element:"%s" could not be found.'%(WemoFriendlyName))

        except:
            self.exception_msg = "Failed to identify the WeMo Device <%s>in the Device Discovery Page"%WemoFriendlyName
            self._screenCapture()
            self._getTheAndroidDeviceLogs() 
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheDefaultNameOnTheWeMoApp(self,FriendlyName,refresh=True):
        """
        Verify whether the Wemo Deivice is present in the Device List Container or not
        @param FriendlyName: The Friendly name of the device on the WeMo App
        @type ledMacAddress: String 
        """
        try:
            self.exception_msg = None 
            self._isAppLaunched()
            assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the WeMo Device:%s is present in the Device List Container or not"%FriendlyName)
            OFFSET=self.ExperitestClient.p2cy(70)
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=device_list_container")) and (self.ExperitestClient.isElementFound("WEB", "text=%s"%FriendlyName)) and (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/..//*[@text='Not Detected']"%FriendlyName, 0) == False) :
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "id=mainContainer")) and (self.ExperitestClient.isElementFound("WEB", "text=%s"%FriendlyName)) and (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/..//*[@text='Not Detected']"%FriendlyName, 0) == False) :
                    self.result = True
                    break
                else : 
                    if (self.ExperitestClient.isElementFound("WEB", "id=device_list_container")):
                            self.ExperitestClient.elementSwipe("WEB", "id=device_list_container",0, "Down",OFFSET,2000) 
                            if self.ExperitestClient.isElementFound("WEB","text=%s"%FriendlyName,0): 
                                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/..//*[@text='Not Detected']"%FriendlyName, 0) == False):
                                    self.result = True
                                    break
                            else:
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Info("Led Buld is still not found on the Device discovery Page , So swipe2 again to find it")
                                if refresh==True:
                                    self._clickOnRefreshButton() 
                                    assert self.result == True 
                    elif (self.ExperitestClient.isElementFound("WEB", "id=mainContainer")):
                            self.ExperitestClient.elementSwipe("WEB", "id=mainContainer",0, "Down",OFFSET,2000) 
                            if self.ExperitestClient.isElementFound("WEB","text=%s"%FriendlyName,0): 
                                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/..//*[@text='Not Detected']"%FriendlyName, 0) == False):
                                    self.result = True
                                    break
                            else:
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Info("Led Buld is still not found on the Device discovery Page , So swipe2 again to find it")
                                if refresh==True:
                                    self._clickOnRefreshButton() 
                                    assert self.result == True       
                    else:
                        if refresh==True:
                            self._clickOnRefreshButton() 
                            assert self.result == True   
                    time.sleep(5)                         
                
            else:
                self.exception_msg = "The default Name of the WeMo Device failed as the default of the Device = %s was not changed or idetified on the App"%FriendlyName
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the Wemo device = %s couldnt be found on the App '%FriendlyName.strip())
                raise Exception('Raising the Exception as the Wemo device = %s couldnt be found on the App '%FriendlyName.strip())
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheDefaultNameOnTheWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()

                
    def _verifyWemoDeviceIsNotPresentInDeviceListContainer(self,WeMoFriendlyName,refresh=True):
            """"
            Verify Wemo Deivice is not present in the Device List Container 
            @param WeMoFriendlyName: The Serial Number of the Wemo Device
            @type WeMoFriendlyName: String
             """
            try:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Verify whether the WeMo Device:<%s> is present in the Device List Container or not"%WeMoFriendlyName)
                self.exception_msg = None 
                self._isAppLaunched()
                assert  self.result == True            
                for i in range(10):
                    if(self.ExperitestClient.verifyElementNotFound("WEB","text=%s"%WeMoFriendlyName)):
                        self.result = True
                        break
                        time.sleep(1)
                        if refresh==True:
                            self._clickOnRefreshButton()
                            assert self.result == True
                        time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=Looking for devices..." could not be found.'%WeMoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=Looking for devices..." could not be found.'%WeMoFriendlyName)
            except:
                self.exception_msg = "Failed to verify the WeMo Device was not present in the List"
                self._screenCapture()
                self._getTheAndroidDeviceLogs()
                self._homeScreen()
                self.result = False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The method _verifyWemoDeviceIsNotPresentInDeviceListContainer() encountered and Error")
                    self.WeMoAppLog.LogException()                  
        
    def _verifyNotDetectedWemoDeviceInDeviceListContainer(self, WemoFriendlyName, refresh = True):
        """
        Verify whether the Wemo device in the Device List Container is Not Detected
        @param WemoSerialNumber: The Serial Number of the Wemo Device

        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying if <%s> is in not detected state."%WemoFriendlyName)
            # self._isAppLaunched()
            # assert self.result == True

            # WemoFriendlyName = "WeMo_%s"%WemoSerialNumber.strip()[-3:]
            for i in range(5):
                try:
                    if (self.ExperitestClient.isFoundIn("WEB", "xpath=//*[@text='%s']"%WemoFriendlyName, 1, "Down", "WEB", "xpath=//*[@text='Not Detected']", 0, 100)) == True:
                        self.WeMoAppLog.Info("The Device is in not detected State")
                        self.result = True
                        break

                except:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True                 
                    self._clickOnRefreshButton()
                    assert self.result == True
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element %s could not be found or it is not in not detected state'%(WemoFriendlyName))
                raise Exception('Raising the Exception as the element %s could not be found or it is not in not detected state'%(WemoFriendlyName))
                                    
        except:
            self.exception_msg = "Failed to Identify the Not-Detected Devices on the Device List"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyNotDetectedWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnNotDetectedWemoDeviceInDeviceListContainer(self, WemoFriendlyName, refresh=False):
        """
        Verify whether the Wemo device in the Device List Container is Not Detected and click On it
        @param WemoSerialNumber: The Serial Number of the Wemo Device

        """
        try:
            self.exception_msg = None 
            self._isAppLaunched()
            assert self.result == True

            # WemoFriendlyName = "WeMo_%s"%WemoSerialNumber.strip()[-3:]
            for i in range(5):
                if (self.ExperitestClient.isFoundIn("WEB", "xpath=//*[@text='%s']"%WemoFriendlyName, 1, "Down", "WEB", "xpath=//*[@text='Not Detected']", 0, 100)) == True:
                    self.WeMoAppLog.Info("The Device is in not detected State")
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']"%WemoFriendlyName, 1,1)
                    self.result = True
                    break

                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element %s could not be found or it is not in not detected state'%(WemoFriendlyName))
                raise Exception('Raising the Exception as the element %s could not be found or it is not in not detected state'%(WemoFriendlyName))
        except:
            self.exception_msg = "Failed to verify the Wemo Deivice in the Device List Container is Not Detected and click On it"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnNotDetectedWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyHideThisPopUpWhenClickedOnNotDetectedDevices(self):
        """
        Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices")            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Hide This?' and @nodeName='DIV']",0)):
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "id=hide_device")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element "Hide This?" is not found')
                raise Exception('Raising the Exception as the element "Hide This?" is not found')
        except:
            self.exception_msg = "Failed to Verify the Hide pop-up When clicked on the Not detected device"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyHideThisPopUpWhenClickedOnNotDetectedDevices() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnCancelButtonOnHideThisPopUp(self):
        """
        Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices and click on Cancel
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices")            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Hide This?' and @nodeName='DIV']/..//*[contains(@text,'Cancel')]")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Hide This?' and @nodeName='DIV']/..//*[contains(@text,'Cancel')]",0,1)
                    self.result = True
                    break 
            
                elif(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text=' Cancel']")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text=' Cancel']",0,1)
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Hide This?']/../..//*[contains(@text,'Cancel')]",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Hide This?']/../..//*[contains(@text,'Cancel')]",0,1)
                    self.result = True
                    break
                
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element "Hide This?" is not found')
                raise Exception('Raising the Exception as the element "Hide This?" is not found')
        except:
            self.exception_msg = "Failed to click on cancel button on hide this popup"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnCancelButtonOnHideThisPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnHideButtonOnHideThisPopUp(self):
        """
        Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices and click on Cancel
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices")            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Hide' and @nodeName='ANCHOR']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Hide' and @nodeName='ANCHOR']",0,1)
                    self.result = True
                    break  

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element "Hide This?" is not found')
                raise Exception('Raising the Exception as the element "Hide This?" is not found')
        except: 
            self.exception_msg = "Failed to Click on the Hide Button on the Hide Pop-up"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnHideButtonOnHideThisPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                         
            
            
    #################################################
    #Handling the Device List Screen on the Wemo App#
    #################################################
    def _getWeMoPowerState(self, WemoFriendlyName):
        """
        Check whether the Wemo is turned on or turned off
        @param WemoFriendlyName: The Wemo Friendly Name
        @return power_status: "on" or "off"
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Getting the power status for the WeMo <%s>."%WemoFriendlyName)
        try:
            self.result = None
            self.power_state = None

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-0')]"%WemoFriendlyName)):
                    self.result = True
                    self.power_state = "off"
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-1')]"%WemoFriendlyName)):
                    self.result = True
                    self.power_state = "on"
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the power state of <%s> could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the power state of <%s> could not be found.'%WemoFriendlyName)
        except:
            self.exception_msg = "Raising the Exception as the power state of wemo could not be determined."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getWeMoPowerState() encountered and Error")
                self.WeMoAppLog.LogException()

    def _isWeMoTurnedOn(self, WemoFriendlyName, refresh = True):
        """
        Check whether the Wemo is present in the Device List Container and whether it is turned on.
        @param WemoFriendlyName: The Wemo Friendly Name to be turned On
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned on"%WemoFriendlyName)
        try:
            # self.result = True
            self.exception_msg = None
            self._isAppLaunched()
            assert self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=mainContainer")) and (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']"%WemoFriendlyName)):
                    self.result = True
                    break
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("WeMo App encountered and error while identifying the Element on the Discovery Page , lets try once again ")
                    self._handlePopUpOnWeMoApp()
                    self._verifyWeMoDeviceCompletelyDisplayedOnScreen(WemoFriendlyName)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=mainContainer" or device:%s could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"id=mainContainer" or device:%s could not be found.'%WemoFriendlyName)

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'switch_on')]"%WemoFriendlyName)):
                    self.result = True
                    break

                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-1')]"%WemoFriendlyName)):
                    self.result = True
                    break

                else:
                    if refresh:
                        self._clickOnRefreshButton()
                        assert self.result == True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" was not found to be turned on.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" was not found to be turned on.'%WemoFriendlyName)
        except:
            self.exception_msg = "Failed ,as the WeMo Device was not found to be turned ON on the Devices Page "
            self._screenCapture()
            try:
                self.WeMoAppLog.Info( "LS      is: %s"%(str(self.u.getBinaryState("192.168.1.77:49153"))))
                self.WeMoAppLog.Info( "Insight is: %s"%(str(self.u.getBinaryState("192.168.1.91:49153"))))
                self.WeMoAppLog.Info( "Socket  is: %s"%(str(self.u.getBinaryState("192.168.1.67:49153"))))
                self.w.GetAttributes("192.168.1.71:49153")
                self.WeMoAppLog.Info( "Maker   is: %s"%(str(self.w.attributeList[0]['value'])))
            except Exception as e:
                self.WeMoAppLog.Info("Exception during except of iswemoturnedon.Exception is <%s>"%str(e))
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _isWeMoTurnedOn() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _isWeMoTurnedOff(self, WemoFriendlyName, refresh = True):
        """
        Check whether the Wemo is present in the Device List Container and whether it is turned off.
        @param WemoFriendlyName: The Wemo Friendly Name to be turned Off
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned off"%WemoFriendlyName)
        try:
            # self.result = True
            self.exception_msg = None
            self._isAppLaunched()
            assert self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=mainContainer")) and (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("WeMo App encountered and error while identifying the Element <%s> on the Discovery Page , lets try once again "%WemoFriendlyName)
                    time.sleep(self.delay)
                    self._verifyWeMoDeviceCompletelyDisplayedOnScreen(WemoFriendlyName)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=mainContainer" or device:%s could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"id=mainContainer" or device:%s could not be found.'%WemoFriendlyName)

            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'switch_off')]"%WemoFriendlyName)):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-0')]"%WemoFriendlyName)):
                    self.result = True
                    break
                else:
                    if refresh:
                        self._clickOnRefreshButton()
                        assert self.result == True
            else:
                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" was not found to be turned off.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" was not found to be turned off.'%WemoFriendlyName)
        except:
            self.exception_msg = "Failed ,as the WeMo Device was not found to be turned off on the Devices Page "
            self._screenCapture()
            try:
                self.WeMoAppLog.Info( "LS      is: %s"%(str(self.u.getBinaryState("192.168.1.77:49153"))))
                self.WeMoAppLog.Info( "Insight is: %s"%(str(self.u.getBinaryState("192.168.1.91:49153"))))
                self.WeMoAppLog.Info( "Socket  is: %s"%(str(self.u.getBinaryState("192.168.1.67:49153"))))
                self.w.GetAttributes("192.168.1.71:49153")
                self.WeMoAppLog.Info( "Maker   is: %s"%(str(self.w.attributeList[0]['value'])))
            except Exception as e:
                self.WeMoAppLog.Info("Exception during except of iswemoturnedon.Exception is <%s>"%str(e))
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _isWeMoTurnedOff() encountered and Error")
                self.WeMoAppLog.LogException()
 
    #############################################################
    def _turnOnWemo(self, WemoFriendlyName, refresh = False):
        """
        Check whether the Wemo is present in the device List Container and Turn On the Wemo.
        @param WemoFriendlyName: The Wemo Friendly Name to be turned On

        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned on"%WemoFriendlyName)
        try:
            # self.result = True
            self.exception_msg = None
            self._isAppLaunched()
            assert  self.result == True
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']"%WemoFriendlyName,0)):
                    if ((self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'switch_on')]"%WemoFriendlyName)) != False) or ((self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-1')]"%WemoFriendlyName)) !=False):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Wemo Device:%s is already turned On"%WemoFriendlyName)
                        self.result = True
                        break
                    else:
                        if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-0')]"%WemoFriendlyName)):
                            self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-0')]"%WemoFriendlyName, 0,1)
                            time.sleep(2)
                            if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-1')]"%WemoFriendlyName)):
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Info("Wemo Device:%s is turned On"%WemoFriendlyName)
                                self.result = True
                                break
                            else:
                                self._getTheAndroidDeviceLogs()
                                self._handlePopUpOnWeMoApp() # to handle firmware pop up

                else:
                    self._handlePopUpOnWeMoApp()
                    self._verifyWeMoDeviceCompletelyDisplayedOnScreen(WemoFriendlyName)

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element: "text=%s" could not be found or it can not be turned on.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:  "text=%s" could not be found or it can not be turned on.'%WemoFriendlyName)
        except:
            self.exception_msg = "Failed to Turn On the WeMo Device on the Devices Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _turnOnWemo() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _turnOffWemo(self,WemoFriendlyName,refresh=True):
        """
        Check whether the Wemo is present in the device List Container and turn it Off.
        @param WemoFriendlyName: The Wemo Friendly Name to be turned Off

        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned off"%WemoFriendlyName)
        try:
            # self.result = True
            self.exception_msg = None
            self._isAppLaunched()
            assert  self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)

            for i in range (5):
                if (self.ExperitestClient.isElementFound("WEB","text=%s"%WemoFriendlyName,0)):
                    if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'switch_off')]"%WemoFriendlyName)) or (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-0')]"%WemoFriendlyName)):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Wemo Device:%s is already turned Off"%WemoFriendlyName)
                        self.result = True
                        break
                    else:
                        if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-1')]"%WemoFriendlyName)):
                            self.ExperitestClient.click("WEB","xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-1')]"%WemoFriendlyName, 0,1)
                            time.sleep(2*self.delay)
                            if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'powerState-0')]"%WemoFriendlyName)):
                                self.result = True
                                break
                            else:
                                self.exception_msg = 'Device <%s> could not be turned off.'%WemoFriendlyName
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Error('Device <%s> could not be turned off.'%WemoFriendlyName)
                                raise Exception('Device <%s> could not be turned off.'%WemoFriendlyName)
                        elif (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/../..//*[contains(@css,'switch_on')]"%WemoFriendlyName)):
                            self.ExperitestClient.click("WEB","xpath=//*[@text='%s']/../..//*[contains(@css,'switch_on')]"%WemoFriendlyName, 0,1)
                            time.sleep(2*self.delay)
                            if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'switch_off')]"%WemoFriendlyName)):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                        else:
                            if refresh==True:
                                self._clickOnRefreshButton()
                                assert self.result == True
                else:
                    self._handlePopUpOnWeMoApp()
                    self._verifyWeMoDeviceCompletelyDisplayedOnScreen(WemoFriendlyName)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found or it can not be turned off.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" or it can not be turned off'%WemoFriendlyName)
        except:
            self.exception_msg = "Failed to Turn off the WeMo Device on the Devices Page"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _turnOffWemo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyElementNotFound(self, zone, element, index = 0):
        """
        Verify whether the element is not found
        @param zone:The zone to search for an element
        @type zone:String
        @param element:The element to be searched for
        @type element:String
        @param index:The index at which the element lies in the page
        @type index:Integer
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the element:%s is not found in zone:%s at index:%d"%(element,zone,index))
        try:
            for i in range(5):
                if not (self.ExperitestClient.isElementFound(zone, element, index)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The element:%s is not found."%element)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s is found."%element)
                raise Exception("Raising the Exception as the element:%s is found."%element)
        except:
            self.exception_msg = "Raising the Exception as the element:%s is found."%element
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyElementNotFound() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnAnElement(self,zone,element,index=0,clickCount=1):
        """
        Click on an element
        @param zone:The zone to search for an element
        @type zone:String
        @param element:The element to be searched for
        @type element:String
        @param index:The index at which the element lies in the page
        @type index:Integer
        @param clickCount:The number of clicks to be performed on an element
        @type index:Integer
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the element:%s"%element)
        try:
            for i in range(5):
                if (self.ExperitestClient.isElementFound(zone, element,index)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The element:%s is found."%element)
                    self.ExperitestClient.click(zone, element, index, clickCount)
                    time.sleep(2*self.delay)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s is not found."%element)
                raise Exception("Raising the Exception as the element:%s is not found."%element)
            return self.result
        except:
            self.exception_msg = "Raising the Exception as the element:%s is not found."%element
            self._screenCapture()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnAnElement() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyElementFound(self,zone,element,index=0):
        """
        Verify whether the element is found
        @param zone:The zone to search for an element
        @type zone:String
        @param element:The element to be searched for
        @type element:String
        @param index:The index at which the element lies in the page
        @type index:Integer
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the element:%s is found in zone:%s at index:%d"%(element,zone,index))
        try:
            for i in range(5):
                if(self.ExperitestClient.isElementFound(zone, element,index)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The element:%s is found."%element)
                    self.result = True
                    break
                else:
                    self.result = False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error("The element:%s could not be found.Trying again"%element)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s could not be found."%element)
                raise Exception("Raising the Exception as the element:%s could not be found."%element)
        except:
            self.exception_msg = "Raising the Exception as the element:%s could not be found."%element
            self._screenCapture()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyElementFound() encountered and Error")
                self.WeMoAppLog.LogException()

    def _pickElementFromVisibleList(self, element, index):
        try:
            self.result = None
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB", "%s"%element, index):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element %s is found."%element)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipeWhileNotFound("Down",200,"WEB", "%s"%element,delay=1000, rounds=5, click=False)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s could not be found."%element)
                raise Exception("Raising the Exception as the element:%s could not be found."%element)

        except:
            self.exception_msg = "Element <%s> can not be selected from the list."%element
            self._screenCapture()
            if (self.ExperitestClient.isElementFound("WEB", "text=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("WEB", "nclick:text=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("WEB", "text=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("WEB", "nclick:text=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("WEB", "text=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("WEB", "nclick:text=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("WEB", "text=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("WEB", "nclick:text=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("WEB", "nclick:text=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("WEB", "text=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("WEB", "text=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _pickElementFromVisibleList() encountered and Error")
                self.WeMoAppLog.LogException()

    def _sendText(self,text):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Sending the text:%s"%text)
        try:
            time.sleep(self.delay)
            self.ExperitestClient.sendText(text)
            time.sleep(self.delay)
            self.result = True
        except:
            self.exception_msg = "Sending text <%s> failed"%text
            self._screenCapture()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:text=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:text=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:text=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:text=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:text=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _sendText() encountered and Error")
                self.WeMoAppLog.LogException()
    ####################################################################    

    
    def _verifyMotionSensed(self,WemoFriendlyName):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it's motion is sensed.
        @param WemoFriendlyName: The Wemo Firendly Name whose Motion is to be sensed 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify motion sensing for <%s>"%WemoFriendlyName)
        try:
            time.sleep(5*self.delay)
            self.result = None
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/..//*[@text='Motion']"%WemoFriendlyName) or \
                    self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/..//*[contains(@text,'Motion sensed:')]"%WemoFriendlyName):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Motion" or text=Motion sensed" is not found')
                raise Exception('Raising the Exception as the element:"text=Motion" or text=Motion sensed" is not found')
        except:
            self.exception_msg = "Failed to verify the 'Motion Sensed' Message for WeMo Motion on the Device Page "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyMotionSensed() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyNoMotionSensed(self,WemoSerialNumber):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it's motion is sensed.
        @param WemoFriendlyName: The Wemo Firendly Name whose Motion is to be sensed 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the WeMo's:%s motion is sensed"%WemoSerialNumber)
        try:
            self.exception_msg = None
            self._isAppLaunched()
            assert  self.result == True        

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoSerialNumber)
            if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                self.result = True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            
            for i in range(3):
                WeMoMotionText = self.ExperitestClient.getTextIn2("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip(), 0, "WEB", "Inside", 0, 0).strip()
                if (WeMoMotionText.find("No motion")!=-1):
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.exception_msg = "Failed to Verify the No Motion message on the WeMo Motion device tile  "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=No motion" is not found')
                raise Exception('Raising the Exception as the element:"text=No motion" is not found')
        except:        
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyNoMotionSensed() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def _verifyConnectToWiFiSmartReachabilityAlert(self):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it's motion is sensed.
        @param WemoFriendlyName: The Wemo Firendly Name whose Motion is to be sensed 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify whether the Smart Reachability alert Connect to Wifi is found")
        try:
            self.exception_msg = None
            self._isAppLaunched()
            assert  self.result == True        
            
            for i in range(3):
                if(self.ExperitestClient.isElementFound("WEB", \
                    "text=Connect to Wi-Fi or go to Settings and allow WeMo to use cellular data.")) == True:
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.exception_msg = "Failed to Verify the Smart Reachability alert Connect to Wifi"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Connect to Wi-Fi or go to Settings and allow WeMo to use cellular data." is not found')
                raise Exception('Raising the Exception as the element:"text=Connect to Wi-Fi" is not found')
        except:        
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyNoMotionSensed() encountered and Error")
                self.WeMoAppLog.LogException()         
    def _verifyDefaultWeMoIcon(self,WemoSerialNumber,WeMoDeviceType,refresh=True):
        """
        Verify default WeMo Icon of the WeMo Device
        @param WemoSerialNumber: The Serial Number of the Wemo Device
        @type WemoSerialNumber: String 
        @param WeMoDeviceType: The WeMo Device Type
        @type WeMoDeviceType: String 
        """
        try:      
            self.exception_msg = None
            OFFSET_VAL= self.ExperitestClient.p2cy(50)
            WEMODEVICES = {"Switch":"Socket","Sensor":"Sensor","Motion":"Sensor","Insight":"Insight","SlowCooker":"Crockpot","HeaterA":"HeaterA","HeaterB":"HeaterB","Humidifier":"Humidifier","Light":"Lightswitch","AirPurifier":"AirPurifier","CoffeeMaker":"CoffeeMaker","Maker":"Maker","InsightV2":"Insight"}
            WEMODEVICES_IMAGES = {"Switch":"SwitchImage","Sensor":"SensorImage","Motion":"SensorImage","Insight":"InsightImage","SlowCooker":"Crockpot","HeaterA":"HeaterA","HeaterB":"HeaterB","Humidifier":"Humidifier","Light":"LightSwitchImage","AirPurifier":"AirPurifier","CoffeeMaker":"CoffeeMaker","Maker":"MakerImage","InsightV2":"InsightImage"}
            if WeMoDeviceType not in WEMODEVICES:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')
                raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Wemo Device Type is:%s"%WeMoDeviceType)
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoSerialNumber) 
            self._isAppLaunched()
            assert self.result == True             
            for i in range(10):     
                if (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                    time.sleep(10)      
                    
                if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                    if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])):  
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                  
                        self.result = True
                        break 

                if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                    if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])):  
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                  
                        self.result = True
                        break                
                
                elif(self.ExperitestClient.swipeWhileNotFound2("Down",OFFSET_VAL,2000,"WEB","id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()),0,1000,5,False)):    
                    if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False): 
                        if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])): 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("WEMo Device default Iconis found in Devices list")                  
                            self.result = True
                            break 
                            
                    elif(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                         
                        self.result = True
                        break                         
                    else:
                        if refresh==True:
                            self._clickOnRefreshButton()
                            assert self.result ==  True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WeMo Device is Found in the Devices List but its in not detected state,So lets try refreshing the Devices list and try again")
                        
                elif(self.ExperitestClient.swipeWhileNotFound2("Up",OFFSET_VAL,2000,"WEB","id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()),0,1000,5,False)):    
                    if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False): 
                        if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])): 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("WEMo Device default Icon  is found in Devices list")                  
                            self.result = True
                            break                
                        
                    elif(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                    
                        self.result = True 
                        break                         
                    else:
                        if refresh==True:
                            self._clickOnRefreshButton()
                            assert self.result ==  True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WeMo Device is Found in the Devices List but its in not detected state,So lets try refreshing the Devices list and try again")                    
                else:                           
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True                 
                    self._clickOnRefreshButton()
                    assert self.result == True
                    time.sleep(2)             
            self.result = True                
        except:
            self.exception_msg = "Failed to Verify default WeMo Icon of the WeMo Device. Please check the screen shot to More Detail information on the issue"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyDefaultWeMoIcon() encountered and Error")
                self.WeMoAppLog.LogException()
                     
    def _verifyCustomWeMoIcon(self,WemoSerialNumber,WeMoDeviceType,refresh=True):
        """
        Verify default WeMo Icon of the WeMo Device
        @param WemoSerialNumber: The Serial Number of the Wemo Device
        @type WemoSerialNumber: String 
        @param WeMoDeviceType: The WeMo Device Type
        @type WeMoDeviceType: String 
        """
        try:      
            self.exception_msg = None
            OFFSET_VAL= self.ExperitestClient.p2cy(50)
            WEMODEVICES = {"Switch":"Socket","Sensor":"Sensor","Motion":"Sensor","Insight":"Insight","SlowCooker":"Crockpot","HeaterA":"HeaterA","HeaterB":"HeaterB","Humidifier":"Humidifier","Light":"Lightswitch","AirPurifier":"AirPurifier","CoffeeMaker":"CoffeeMaker","Maker":"Maker","InsightV2":"Insight"}
            WEMODEVICES_IMAGES = {"Switch":"SwitchImage","Sensor":"SensorImage","Motion":"SensorImage","Insight":"InsightImage","SlowCooker":"Crockpot","HeaterA":"HeaterA","HeaterB":"HeaterB","Humidifier":"Humidifier","Light":"LightSwitchImage","AirPurifier":"AirPurifier","CoffeeMaker":"CoffeeMaker","Maker":"MakerImage","InsightV2":"InsightImage"}
            if WeMoDeviceType not in WEMODEVICES:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')
                raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Wemo Device Type is:%s"%WeMoDeviceType)
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoSerialNumber) 
            self._isAppLaunched()
            assert self.result == True             
            for i in range(10):     
                if (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                    time.sleep(10)      
                    
                if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                    if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])):  
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                  
                        self.result = True
                        break 

                if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                    if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])):  
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                  
                        self.result = True
                        break                
                
                elif(self.ExperitestClient.swipeWhileNotFound2("Down",OFFSET_VAL,2000,"WEB","id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()),0,1000,5,False)):    
                    if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False): 
                        if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])): 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("WEMo Device default Iconis found in Devices list")                  
                            self.result = True
                            break 
                            
                    elif(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                         
                        self.result = True
                        break                         
                    else:
                        if refresh==True:
                            self._clickOnRefreshButton()
                            assert self.result ==  True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WeMo Device is Found in the Devices List but its in not detected state,So lets try refreshing the Devices list and try again")
                        
                elif(self.ExperitestClient.swipeWhileNotFound2("Up",OFFSET_VAL,2000,"WEB","id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()),0,1000,5,False)):    
                    if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False): 
                        if(self.ExperitestClient.isElementFound("default", "%s"%WEMODEVICES_IMAGES[WeMoDeviceType])): 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("WEMo Device default Icon  is found in Devices list")                  
                            self.result = True
                            break                
                        
                    elif(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()))) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:%s-1_0-%s:sensor:switch"%(WEMODEVICES[WeMoDeviceType],WemoSerialNumber.strip()), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WEMo Device default Icon is found in Devices list")                    
                        self.result = True 
                        break                         
                    else:
                        if refresh==True:
                            self._clickOnRefreshButton()
                            assert self.result ==  True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("WeMo Device is Found in the Devices List but its in not detected state,So lets try refreshing the Devices list and try again")                    
                else:                           
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True                 
                    self._clickOnRefreshButton()
                    assert self.result == True
                    time.sleep(2)             
            self.result = True                
        except:
            self.exception_msg = "Failed to Verify default WeMo Icon of the WeMo Device. Please check the screen shot to More Detail information on the issue"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyDefaultWeMoIcon() encountered and Error")
                self.WeMoAppLog.LogException()
    def _verifyLookingForDevicesScreen(self,refresh=True):
        """
        Check whether the Looking for devices... screen is there in the Device List Screen.
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check whether the Looking for devices... screen is there in the Device List Screen.")
        try:
            self.exception_msg = None 
            self.result = None
            for i in range(3):
                if refresh==True:
                    self._clickOnRefreshButton()
                    assert self.result == True
                if (self.ExperitestClient.isElementFound("WEB", "text=Looking for devices...")):
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Looking for devices..." is not found')
                raise Exception('Raising the Exception as the element:"text=Looking for devices..." is not found')
        except:
            self.exception_msg = "Failed to Verify the 'Looking For devices ... ' Message on the Device discovery page "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyLookingForDevicesScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                         
               
    def _goToTheDevicesPage(self,refresh=True):
        """
        Go to the Devices Page which contains the Device List Container
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Go to the Devices Page which contains the device list container")
        try:
            self.exception_msg = None
            # self._isAppLaunched()
            # assert self.result == True

            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "css=A.device_btn.ui-link")):  # for rules page devices icon
                    self.ExperitestClient.click("WEB", "css=A.device_btn.ui-link")
                    time.sleep(5*self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@class='deviceIcon tabIcon' and @top='true']")):  # for devices page devices icon
                    self.ExperitestClient.click("WEB", "xpath=//*[@class='deviceIcon tabIcon' and @top='true']")
                    time.sleep(10*self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Cancel' and @top='true']")):  # for going to devices page from edit page of wemo
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Go to the Devices Page from edit page of wemo.")
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Cancel' and @top='true']")
                    time.sleep(2*self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Devices Connected']")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Go to the Devices Page from remote access page.")
                    self._verifyAndClickTheElement("WEB","xpath=//*[@class='backbutton']")
                    time.sleep(self.delay)
                    self._verifyAndClickTheElement("WEB","xpath=//*[@class='closeMenu backbutton']")
                    time.sleep(5*self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Legal']")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Go to the Devices Page from settings and about page.")
                    self._verifyAndClickTheElement("WEB","xpath=//*[@class='backbutton']")
                    time.sleep(self.delay)
                    self._verifyAndClickTheElement("WEB","xpath=//*[@class='closeMenu backbutton']")
                    time.sleep(10*self.delay)
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                time.sleep(self.delay)
            else:

                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=device_btn" could not be found.')
        except:
            self.exception_msg = "The Devices Button was not found on the App "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _goToTheDevicesPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    #############################
    #Remote Access Tab Functions#
    #############################
    def _clickOnRemoteAccessTab(self):
        """
        Clicking on the Remote Access Tab
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Remote Access Tab")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Remote Access']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Remote Access']")
                    time.sleep(6*self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "id=more_remote_access")):
                    self.ExperitestClient.click("WEB", "id=more_remote_access")
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    if self.ExperitestClient.isElementFound("WEB","id=more_items",0) == False:
                        self._clickOnMoreTab() 
                        assert self.result == True 
                        
                    elif self.ExperitestClient.isElementFound("WEB","text=Settings",0) == False:
                        self._clickOnMoreTab() 
                        assert self.result == True
            else:
                self.exception_msg = "The Remote Access tab was not found in the Settings page of the WeMo App"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=remoteAccess" could not be found.')
                raise Exception('Raising the Exception as the element:"text=remoteAccess" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnRemoteAccessTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForRemoteAccessPopUpInTheRemoteAccessPage(self):
        """
        Check for the Remote Access Pop UP on the Remote Access Page.
        """
        try:
            self.result = None
            remote_enabled = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Checking for the Remote Access Pop Up on the Remote Access Page of the Wemo App")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "id=enable_remote_access_popup")) and (self.ExperitestClient.isElementFound("WEB", "text=Remote Access Enabled")) and (self.ExperitestClient.isElementFound("WEB", "id=enable_remote_access_popup_ok")):
                    self.ExperitestClient.click("WEB", "id=enable_remote_access_popup_ok")
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Remote access got enabled.")
                    time.sleep(self.delay)
                    self.result = True
                    remote_enabled = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB","text=Sorry, your remote access couldn't be enabled. Check your internet connection and ensure a WeMo Device is paired, then go to More tab to try again.",0)):
                    self.ExperitestClient.click("WEB","xpath=//*[@id='remote_access_fail_popup_ok']",0,1)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Workaround for a bug WEMO-51027")
                    self._verifyAndClickTheElement("WEB","xpath=//*[@class='backbutton']")
                    time.sleep(6*self.delay)
                    if self.ExperitestClient.isFoundIn("WEB","xpath=//*[@id='more_remote_access']",0,"Inside","WEB","xpath=//*[@text='Enabled']"):
                        self.result = True
                        remote_enabled = True
                        break
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Remote access could not be enabled. Clicking again on enable remote access and sleeping for 30s")
                        self._verifyAndClickTheElement("WEB","xpath=//*[@id='more_remote_access']")
                        self.ExperitestClient.click("WEB","id=enable_remote_access",0,1)
                        time.sleep(60*self.delay)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Waiting for <4s> for remote access to get enabled.")
                    self._handlePopUpOnWeMoApp()
                    time.sleep(8*self.delay)

            else:
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Warning('Raising the Warning as the element:"id=enable_remote_access_popup" and text=Remote Access Enable" and "id=enable_remote_access_popup_ok" could not be found.')
            return remote_enabled
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForRemoteAccessPopUpInTheRemoteAccessPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _clickOnForgetAndDisableRemoteAccess(self):
        """
        Click on Forget And Disbale button on the Remote Access Page
        """
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Forget And Disable button on the Remote Access Page.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Remote Access']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remote Access" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Forget and Disable']")) == True:
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Forget and Disable']",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "id=enable_remote_access")) == True and (self.ExperitestClient.isElementFound("WEB", "text=Not Enabled")):
                    self.ExperitestClient.click("WEB", "id=enable_remote_access")
                    time.sleep(10*self.delay)
                    self.result = True 
                    self._checkForRemoteAccessPopUpInTheRemoteAccessPage()
                    assert self.ExperitestClient.isElementFound("WEB", "id=reset_button") == True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=reset_button" could not be found.')
                raise Exception('Raising the Exception as the element:"id=reset_button" could not be found.')
            assert self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Not Enabled']") == True
            assert self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Enable Remote Access']") == True
        except:
            self.exception_msg = "Raising the Exception as the remote access status can not be queried."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            self.WeMoAppLog.Error("The method _clickOnForgetAndDisableRemoteAccess() encountered and Error")
            self.WeMoAppLog.LogException()
                 
    def _clickOnEnableRemoteAccess(self):
        """
        Click on Enable Remote Access on the Remote Access Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Enable Remote Access button on the Remote Access Page.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Remote Access']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remote Access" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Enable Remote Access']")) == True and (self.ExperitestClient.isElementFound("WEB", "text=Not Enabled")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Enable Remote Access']")
                    self.ExperitestClient.waitForElement("WEB", "xpath=//*[@id='enable_remote_access_popup_ok']",0,5*60*1000)
                    self.result = True
                    break      
                else:
                    self._handlePopUpOnWeMoApp()
                    assert  self.result == True 
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=enable_remote_access" could not be found.')
                raise Exception('Raising the Exception as the element:"id=enable_remote_access" could not be found.')


            if self._checkForRemoteAccessPopUpInTheRemoteAccessPage():
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Remote access got enabled")
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Remote access could not be enabled")
                raise Exception('Remote access could not be enabled')
        except:
            self.exception_msg = "Raising the Exception as the element remote access can not be enabled."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForRemoteAccessDisabled(self):
        """
        Check whether Remote Access is disabled or not
        """
        try:
            self.result = None
            self.remoteAccessEnabled = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check whether Remote Access is disabled or not.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Forget and Disable' and @onScreen='true']")):
                    self.result = True
                    self.remoteAccessEnabled = True
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Remote access is enabled.")
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Enable Remote Access' and @onScreen='true']")):
                    self.result = True
                    self.remoteAccessEnabled = False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Remote access is not enabled.")
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remote Access" could not be found.')

        except:
            self.exception_msg = "Raising the Exception as the remote access status can not be determined"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:  
                self.WeMoAppLog.Error("The method _checkForRemoteAccessDisabled() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForSmartPhoneInRemoteAccessPage(self,smartPhone): 
        """
        Check for the Smart Phone in the Remote Access Page
        """
        try:
            # self._isAppLaunched()
            # assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Smart Phone:%s in the Remote Access Page."%smartPhone)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Remote Access")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                    time.sleep(10)  
                elif (self.ExperitestClient.isElementFound("WEB", "id=enable_remote_access_popup")) and (self.ExperitestClient.isElementFound("WEB", "text=Remote Access Enabled")) and (self.ExperitestClient.isElementFound("WEB", "id=enable_remote_access_popup_ok")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=enable_remote_access_popup_ok")
                    time.sleep(1)
                    self.result = True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Element "text=Remote Access"could not be found, so lets try again once more')
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remote Access" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=device_container")):
                    time.sleep(1)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "id=mainContainer")):
                    time.sleep(1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=mainContainer" could not be found.')
                raise Exception('Raising the Exception as the element:"id=device_container" or "id=mainContainer" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isFoundIn("WEB", "id=device_container", 0, "Inside", "WEB", "text=%s"%smartPhone, 0, 0)):
                    self.result = True
                    break
                if (self.ExperitestClient.isFoundIn("WEB", "id=mainContainer", 0, "Inside", "WEB", "text=%s"%smartPhone, 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%smartPhone)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%smartPhone)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForSmartPhoneInRemoteAccessPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _turnOnRemoteAccessForSmartPhoneInRemoteAccessPage(self,smartPhone):
        """
        Check for the Smart Phone in the Remote Access Page and turn On the Remote Access
        """
        try:
            # self._isAppLaunched()
            # assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Smart Phone:%s in the Remote Access Page and turn On the Remote Access."%smartPhone)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Remote Access")):
                    self.result = True
                    break 
                else:
                    self.ExperitestClient.swipe2("Up",500,500)
                    
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remote Access" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=device_container")):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=mainContainer" could not be found.')
                raise Exception('Raising the Exception as the element:"id=device_container" or "id=mainContainer" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isFoundIn("WEB", "id=device_container", 0, "Inside", "WEB", "text=%s"%smartPhone, 0, 0)):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%smartPhone)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%smartPhone)
            
            if (self.ExperitestClient.isFoundIn("WEB","text=%s"%smartPhone,0,"Right","WEB","css=DIV.on_off_widget_on",0,0)):            
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_on')]"%smartPhone, 0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Remote Access for the Smart Phone:%s is allready On"%smartPhone)
                    self.result =True
            else:                
                if (self.ExperitestClient.isFoundIn("WEB","text=%s"%smartPhone,0,"Right","WEB","css=DIV.on_off_widget_off",0,0)):            
                    if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_off')]"%smartPhone, 0)):
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_off')]"%smartPhone, 0, 1)
                        time.sleep(1)
                    assert self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_on')]"%smartPhone, 0) == True
                    time.sleep(1)
                    self.result = True
                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _turnOnRemoteAccessForSmartPhoneInRemoteAccessPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _turnOffRemoteAccessForSmartPhoneInRemoteAccessPage(self,smartPhone):
        """
        Check for the Smart Phone in the Remote Access Page and turn Off the Remote Access
        """
        try:
            # self._isAppLaunched()
            # assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Smart Phone:%s in the Remote Access Page and turn Off the Remote Access."%smartPhone)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Remote Access")):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Up",500,500)                      
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remote Access" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=device_container")):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container"could not be found.')
                raise Exception('Raising the Exception as the element:"id=device_container" could not be found.') 
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "id=device_container", 0, "Inside", "WEB", "text=%s"%smartPhone, 0, 0)):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%smartPhone)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%smartPhone)
            
            if (self.ExperitestClient.isFoundIn("WEB","text=%s"%smartPhone,0,"Right","WEB","css=DIV.on_off_widget_off",0,0)):            
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_off')]"%smartPhone, 0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Remote Access for the Smart Phone:%s is allready Off"%smartPhone)
                    self.result =True
            else:                
                if (self.ExperitestClient.isFoundIn("WEB","text=%s"%smartPhone,0,"Right","WEB","css=DIV.on_off_widget_on",0,0)):            
                    if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_on')]"%smartPhone, 0)):
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_on')]"%smartPhone, 0, 1)
                        time.sleep(1)
                    assert self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/../..//*[contains(@css,'DIV.on_off_widget_off')]"%smartPhone, 0) == True
                    time.sleep(1)
                    self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _turnOnRemoteAccessForSmartPhoneInRemoteAccessPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 ##########################################################################################################
    
    ##################################
    #Settings And About Tab Functions#
    ##################################
    def _clickOnSettingsAndAboutTab(self):
        """
        Clicking on the Settings And About Tab
        """
        try:
       
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Settings And About Tab")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "id=more_settings_and_about")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_settings_and_about")
                    time.sleep(1)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "id=settingsAbout")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=settingsAbout")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_settings_and_about" or "id=settingsAbout" could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_settings_and_about" or "id=settingsAbout "could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                    time.sleep(10)                    

                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnSettingsAndAboutTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTheLocationTab(self):
        """
        Clicking on the Location Tab in the Settings and About Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Location tab on the Settings and About Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=location_container")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=location_container")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=location_container" could not be found.')
                raise Exception('Raising the Exception as the element:"id=location_container" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Location")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Location"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Location" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheLocationTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _enterTheLocationInLocationPage(self,locationName):
        """
        Entering the Location Name in the Location Page in the Settings and About Page
        @param locationName: The Location Name which is entered in the text box
        @type locationName: String.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Entering the Location in the textbox in the Location Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Location")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Location"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Location" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=searchField")):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=searchField", 0, locationName)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=searchField" could not be found.')
                raise Exception('Raising the Exception as the element:"id=searchField" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterAndSaveTheLocationInLocationPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmTheChangesMadeOnLocationPage(self):
        """
        Click on the Save button to save the changes made on the Location Page.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to save the changes made on the Location Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Location")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Location"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Location" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Save")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Save")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Save"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Save" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmTheChangesMadeOnLocationPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelTheChangesMadeOnLocationPage(self):
        """
        Click on the Cancel button to cancel the changes made on the Location Page.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes made on the Location Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Location")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Location"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Location" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Cancel")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Cancel"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelTheChangesMadeOnLocationPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTheOkButtonOnLocationAlertPopUp(self):
        """
        Click on the Ok button on the Location Alert Pop Up.
        """
        try:
            self.result = None
            popUp = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Ok button on the Location Alert Pop Up.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "id=your_current_location")):
                    self.result = True
                    popUp = True
                    break
                time.sleep(1)
            else:
                popUp = False
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('"id=your_current_location" Location Pop Up did not appear. May be the location is allready set.')
                
            if popUp == True:
                for i in range(15):
                    if (self.ExperitestClient.isElementFound("WEB", "id=your_current_location_ok_btn")):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "id=your_current_location_ok_btn")
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=your_current_location_ok_btn"could not be found.')
                    raise Exception('Raising the Exception as the element:"id=your_current_location_ok_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheOkButtonOnLocationAlertPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnDontAllowButtonOnLocationAlertPopUp(self):
        """
        Click on the Dont Allow button on the Location Alert Pop Up.
        """
        try:
            self.result = None
            popUp = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Dont Allow button on the Location Alert Pop Up.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "id=your_current_location")):
                    self.result = True
                    popUp = True
                    break
                time.sleep(1)
            else:
                popUp = False
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('"id=your_current_location" Location Pop Up did not appear. May be the location is allready set.')
            
            if popUp == True:
                for i in range(15):
                    if (self.ExperitestClient.isElementFound("WEB", "id=your_current_location_dont_allow")):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "id=your_current_location_dont_allow")
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=your_current_location_dont_allow"could not be found.')
                    raise Exception('Raising the Exception as the element:"id=your_current_location_dont_allow" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnDontAllowButtonOnLocationAlertPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _verifyTheEmailInSettingsAndAboutPage(self,emailAddress=None):
        """
        Verifying the Email in the Email Tab in the Settings and About Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying the Email:%s in the Email Tab in the Settings and About Page."%emailAddress)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=more_setting_email")):
                    time.sleep(1)
                    if emailAddress!=None:
                        assert self.ExperitestClient.elementGetText("WEB", "id=more_setting_email", 0).strip() == emailAddress
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_setting_email" could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_setting_email" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheEmailTabInSettingsAndAboutPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def clickOnTheEmailTab(self):
        """
        Clicking on the Email Tab in the Settings and About Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Email tab on the Settings and About Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=more_setting_email")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_setting_email")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_setting_email" could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_setting_email" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Email")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Email"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Email" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "id=set_email_cancel_btn")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=set_email_cancel_btn")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheEmailTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _enterTheEmailInEmailPage(self,emailAddress=None):
        """
        Entering the Email Address in the Email Page in the Settings and About Page
        @param emailAddress: The Email Address which is entered in the text box
        @type emailAddress: String. Should be of the format test@*.com (*=gmail,yahoo etc)  
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Entering the Email Address in the Email Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Email")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Email"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Email" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=setup_email")):
                    if emailAddress!=None:
                        self.ExperitestClient.elementSendText("WEB", "id=setup_email", 0, emailAddress)
                        time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=setup_email" could not be found.')
                raise Exception('Raising the Exception as the element:"id=setup_email" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "id=set_email_cancel_btn")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=set_email_cancel_btn")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterAndSaveTheEmailInEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForInvalidEmailPopUpInEmailPage(self):
        """
        Check for the Invalid Email Error Popup in the Email Page when an invalid email is there.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the Invalid Email Error Popup in the Email Page when an invalid email is there.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Invalid Email")) and (self.ExperitestClient.isElementFound("WEB", "id=error_msg")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=OK")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Invalid Email" or "id=error_msg" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Invalid Email" or "id=error_msg" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "id=set_email_cancel_btn")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=set_email_cancel_btn")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForInvalidEmailPopUpInEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmTheChangesMadeOnEmailPage(self):
        """
        Click on the Done button to confirm the changes made on the Email Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes made on the Email Page.")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Email")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Email"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Email" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=set_email_done_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=set_email_done_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:                    
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=set_email_done_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=set_email_done_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "id=set_email_cancel_btn")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=set_email_cancel_btn")
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmTheChangesMadeOnEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _cancelTheChangesMadeOnEmailPage(self):
        """
        Click on the Cancel button to cancel the changes made on the Email Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes made on the Email Page.")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Email")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Email"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Email" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=set_email_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=set_email_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=set_email_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=set_email_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelTheChangesMadeOnEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheAppVersionFromSettingsAndAboutPage(self,appVersion):
        """
        Verify the App Version from the Settings and About Page.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the App Version:%s from the Settings and About Page."%appVersion)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=app_version")):
                    assert self.ExperitestClient.getTextIn2("WEB", "id=app_version", 0, "WEB", "Inside", 0, 0).split()[0].strip() == appVersion
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=app_version" could not be found.')
                raise Exception('Raising the Exception as the element:"id=app_version" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheAppVersionFromSettingsAndAboutPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _getTheAppVersionFromSettingsAndAboutPage(self):
        """
        Get the WeMo App Version from the Settings and About Page.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            self.AppVersion = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the WeMo App Version from the Settings and About Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=app_version")):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=app_version" could not be found.')
                raise Exception('Raising the Exception as the element:"id=app_version" could not be found.')
            
            self.AppVersion = self.ExperitestClient.getTextIn2("WEB", "id=app_version", 0, "WEB", "Inside", 0, 0).strip()
            assert self.AppVersion != None
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheAppVersionFromSettingsAndAboutPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTheFirmwareVersionsTab(self):
        """
        Clicking on the Firmware Versions Tab in the Settings and About Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Firmware Version tab on the Settings and About Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=more_firmware_versions")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_firmware_versions")
                    time.sleep(1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_firmware_versions" could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_firmware_versions" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Firmware Versions")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                    time.sleep(10)                    
                    
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Firmware Versions"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Firmware Versions" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheFirmwareVersionsTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getTheFirmwareVersionOfTheWemo(self,WemoFriendlyName):
        """
        Getting the Firmware Version of the Wemo from the Firmware Versions Page of the Wemo App
        @param WemoFriendlyName: The Wemo Firendly Name whose Firmware to search for 
        @type WemoFriendlyName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            self.FirmwareVersion = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the Firmware Version of the Wemo:%s."%WemoFriendlyName)
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Firmware Versions")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Firmware Versions"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Firmware Versions" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=firmware_version_container")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=firmware_version_container"could not be found.')
                raise Exception('Raising the Exception as the element:"id=firmware_version_container" could not be found.')
            
            FirmwareVersionList = self.ExperitestClient.getText("WEB").split("\n")
            
            for i in range(len(FirmwareVersionList)):
                if FirmwareVersionList[i].strip() == WemoFriendlyName:
                    self.FirmwareVersion = FirmwareVersionList[i+1].strip()
                    break             
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheFirmwareVersionOfTheWemo() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheFirmwareVersionOfTheWemo(self,WemoFriendlyName,firmwareVersion):
        """
        Verify the Firmware Version of the Wemo from the Firmware Versions Page of the Wemo App
        @param WemoFriendlyName: The Wemo Firendly Name whose Firmware to search for 
        @type WemoFriendlyName: String
        @param firmwareVersion: The firmware version of the Wemo 
        @type firmwareVersion: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True        

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Firmware Version of the Wemo:%s."%WemoFriendlyName)
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Firmware Versions")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Firmware Versions"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Firmware Versions" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=firmware_version_container")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=firmware_version_container"could not be found.')
                raise Exception('Raising the Exception as the element:"id=firmware_version_container" could not be found.')
            
            FirmwareVersionList = self.ExperitestClient.getText("WEB").split("\n")
            for i in range(len(FirmwareVersionList)):
                if FirmwareVersionList[i].strip() == WemoFriendlyName:
                    FirmwareVersion = FirmwareVersionList[i+1].strip()
                    break
            assert FirmwareVersion == firmwareVersion         
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheFirmwareVersionOfTheWemo() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def clickOnRememberWifiSettingsTab(self):
        """
        Clicking on the Remember Wi-Fi Settings Tab in the Settings and About Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Remember Wi-Fi Settings tab on the Settings and About Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Remember Wi-Fi Settings")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Remember Wi-Fi Settings")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Remember Wi-Fi Settings" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Remember Wi-Fi Settings" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnRememberWifiSettingsTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _rememberWifiSettings(self):
        """
        Check the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is checked
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is checked.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(5):    
                if (self.ExperitestClient.isElementFound("WEB", "text=Remember Wi-Fi Settings")):
                    if (self.ExperitestClient.isElementFound("WEB", "css=LABEL.ui-grid-solo-fieldset.ui-btn.ui-corner-all.ui-btn-inherit.ui-btn-icon-right.ui-checkbox-on", 0)):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is already checked.")
                        self.result = True
                        time.sleep(1)
                        break 
                        
                    elif(self.ExperitestClient.isElementFound("WEB", "css=LABEL.ui-grid-solo-fieldset.remember_wifi.ui-btn.ui-corner-all.ui-btn-inherit.ui-btn-icon-left.ui-checkbox-on", 0)):                                                                                                
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is already checked.")
                        self.result = True
                        break                          
                    else:
                        if self.ExperitestClient.isElementFound("WEB", "text=Remember Wi-Fi Settings") == True:
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "text=Remember Wi-Fi Settings")
                            time.sleep(1)
                            if(self.ExperitestClient.isElementFound("WEB", "css=LABEL.ui-grid-solo-fieldset.ui-btn.ui-corner-all.ui-btn-inherit.ui-btn-icon-right.ui-checkbox-on", 0)):
                                self.result = True
                                break 
                                
                        elif(self.ExperitestClient.isElementFound("WEB", "css=LABEL.ui-grid-solo-fieldset.remember_wifi.ui-btn.ui-corner-all.ui-btn-inherit.ui-btn-icon-left.ui-checkbox-on", 0)):                                                                                                
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is checked.")
                            self.result = True
                            break                          
        
                        
                elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("WeMo App is not launched the Setting page , so lets wait for some time and than check the 'Remember  Wi-Fi Settings'")
                    time.sleep(20)         
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')

                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _rememberWifiSettings() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _forgetWifiSettings(self):
        """
        UnCheck the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is unchecked
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Uncheck the Remember Wi-Fi Settings check box in the Settings and About Page")
            
            for i in range(5):    
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='more_remember_wifi']")):
                    if (self.ExperitestClient.elementGetProperty("WEB", "xpath=//*[@id='more_remember_wifi']", 0,"checked") == "false"):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is already un-checked.")
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='Remember Wi-Fi Settings']")
                        time.sleep(2*self.delay)
                        assert self.ExperitestClient.elementGetProperty("WEB", "xpath=//*[@id='more_remember_wifi']", 0,"checked") == "false"
                        self.result = True
                        break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:id=more_remember_wifi could not be found.')
                raise Exception('Raising the Exception as the element: id=more_remember_wifi could not be found.')
    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _forgetWifiSettings() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _verifyRememberWifiSettingsIsChecked(self):
        """
        Check the Remember Wi-Fi Settings Tab in the Settings and About Page. Verify whether Checked or Unchecked
        """
        try:
            self.result = None
            self.rememberWifiSettingsChecked = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check the Remember Wi-Fi Settings Tab in the Settings and About Page. Verify whether Checked or Unchecked.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            
            if (self.ExperitestClient.isElementFound("WEB", "css=LABEL.ui-grid-solo-fieldset.ui-btn.ui-corner-all.ui-btn-inherit.ui-btn-icon-right.ui-checkbox-on",0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is allready checked.")
                self.result = True
                self.rememberWifiSettingsChecked = True
                
            elif (self.ExperitestClient.isElementFound("WEB", "css=LABEL.ui-grid-solo-fieldset.remember_wifi.ui-btn.ui-corner-all.ui-btn-inherit.ui-btn-icon-left.ui-checkbox-on",0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is allready checked.")
                self.result = True
                self.rememberWifiSettingsChecked = True
            
            else:
                time.sleep(1)
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is unchecked.")
                self.result = True
                self.rememberWifiSettingsChecked = False
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRememberWifiSettingsIsChecked() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnTheLegalTab(self):
        """
        Clicking on the Legal Tab in the Settings and About Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Legal tab on the Settings and About Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Settings & About",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Settings & About" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=more_setting_legal")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_setting_legal")
                    time.sleep(1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_setting_legal" could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_setting_legal" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=legal_main_page")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=legal_main_page"could not be found.')
                raise Exception('Raising the Exception as the element:"id=legal_main_page" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTheLegalTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 ##########################################################################################################
    
    ###########################
    #Help Center Tab Functions#
    ###########################
    def clickOnHelpCenterTab(self):
        """
        Clicking on the Help Center Tab on the Devices List Page
        """
        try:
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Help Center Tab on the Device List Page.")
            for i in range(15):
                #if (self.ExperitestClient.isElementFound("WEB", "id=more_help_center")):
                #    time.sleep(1)
                #    self.ExperitestClient.click("WEB", "id=more_help_center")
                #    time.sleep(1)
                #    self.result = True
                #    break
                if (self.ExperitestClient.isElementFound("WEB", "text=Support Articles")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Support Articles")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_help_center"could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_help_center" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("NATIVE", "text=www.wemo.com/support.html. Double tap to edit.")):
                    self.result = True
                    break
            
                elif (self.ExperitestClient.isElementFound("WEB", "text=Help Center")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Help Center"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Help Center" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnHelpCenterTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 ###########################################################################################
    
    ###################################
    #Tell Us What You Think! Functions#
    ###################################
    def clickOnTellUsWhatYouThinkTab(self):
        """
        Clicking on the Tell Us What You Think! Tab on the Devices List Page
        """
        try:
           
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Tell Us What You Think! Tab on the Device List Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=more_tell_us_what_you_think")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_tell_us_what_you_think")
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                    time.sleep(10)
                    
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_tell_us_what_you_think"could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_tell_us_what_you_think" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Tell Us What You Think!")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Tell Us What You Think!"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Tell Us What You Think!" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTellUsWhatYouThinkTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnRateWemoOnAppStore(self):
        """
        Clicking on the Rate Wemo App on the App Store on the Tell Us What You Think Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Rate Wemo App on the App Store on the Tell Us What You Think Page.")
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Support & Feedback")) and (self.ExperitestClient.isElementFound("WEB", "text=Settings")) :
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Tell Us What You Think!"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Tell Us What You Think!" could not be found.')
            
            for i in range(15):
                self.ExperitestClient.swipe2("Down",500,500)
                if (self.ExperitestClient.isElementFound("WEB", "id=tellus_rate_wemo_app")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=tellus_rate_wemo_app")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=tellus_rate_wemo_app"could not be found.')
                raise Exception('Raising the Exception as the element:"id=tellus_rate_wemo_app" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnRateWemoOnAppStore() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnReportAProblemTab(self):
        """
        Clicking on the Report A Problem on the More page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Report A Problem on the Tell Us What You Think Page.")
            self.result = None
            for i in range(5):
                time.sleep(self.delay*2)
                self.ExperitestClient.swipe("Down",400)
                # id change in Endor
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='more_get_in_touch_with_us']",0)):
                    self.ExperitestClient.click("WEB","xpath=//*[@id='more_get_in_touch_with_us']",0)
                    time.sleep(self.delay*2)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=Report a Problem"could not be found.')
                raise Exception('Raising the Exception as the element:"id=Report a Problem" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:id=Report a Problem could not be found"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnReportAProblemTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _validateReportAProblemTab(self):
        """
        Clicking on the Report A Problem on the More page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on tap here for more info.")
            self.result = None
            for i in range(5):
                time.sleep(self.delay*2)
                self.ExperitestClient.click("WEB","xpath=//*[@text='Tap here for more info.']",0)
                time.sleep(self.delay*10)
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Support Article']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=Report a Problem"could not be found.')
                raise Exception('Raising the Exception as the element:"id=Report a Problem" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:id=Report a Problem could not be found"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _validateReportAProblemTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _validateRulesScreen(self):
        """
        Clicking on the Report A Problem on the More page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Validating different items on rues screen.")
            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Schedule']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Schedule] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Schedule] could not be found.')

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Auto-off Timer']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Auto-off Timer] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Auto-off Timer] could not be found.')


            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Long Press']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Long Press] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Long Press] could not be found.')

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Motion Detector']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Motion Detector] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Motion Detector] could not be found.')

            self.ExperitestClient.swipe("Down",250)
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Away mode']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Away mode] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Away mode] could not be found.')

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Motion Alerts']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Motion Alerts] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Motion Alerts] could not be found.')

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Usage Alerts']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@text=Usage Alerts] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@text=Usage Alerts] could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:id=Report a Problem could not be found"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _validateRulesScreen() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnWeMoCommunity(self):
        """
        Clicking on the WeMo Community on the More page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the WeMo Community on the More Page.")

            self.result = None
            self.ExperitestClient.swipe2("Down",400,500)

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='WeMo Community']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='WeMo Community']")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",400,500)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=WeMo Community" could not be found.')
                raise Exception('Raising the Exception as the element:"text=WeMo Community" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:text=WeMo Community could not be found"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWeMoCommunity() encountered and Error")
                self.WeMoAppLog.LogException()


    def _clickOnSupportArticles(self):
        """
        Clicking on the Support Articles on the More page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Support Articles on the More Page.")

            self.result = None
            self.ExperitestClient.swipe2("Down",400,500)

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Support Articles']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Support Articles']")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",400,500)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=WeMo Community" could not be found.')
                raise Exception('Raising the Exception as the element:"text=WeMo Community" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:text=WeMo Community could not be found"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnSupportArticles() encountered and Error")
                self.WeMoAppLog.LogException()

                
###############################################################################
#        REPORT A PROBLEM FUNCTIONALITY  FOR 1.12 APP
###############################################################################
                
    def _enterTheUserNameOnReportAProblemPage(self,UserName):
        """
        Enter the User name in the Report A Problem Page.
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Enter the User name in the Report A Problem Page.")
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):
                    if (self.ExperitestClient.isElementFound("WEB","name=yourname",0)):
                        self.ExperitestClient.elementSendText("WEB","name=yourname",0,"%s"%UserName)
                        time.sleep(3)
                        self.ExperitestClient.closeKeyboard() 
                        self.result = True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The User Name is successfully entered on the Report A Problem Page")
                        break 
                else:
                    time.sleep(5)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The User Name is could not be entered on the Report A Problem Page, so lets try once again ")
                        
            else:
                self.exception_msg = "User name could not be entered on the Report A problem page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exception as the name=yourname could not be found ")
                raise Exception ("Raising an exception as the name=yourname could not be found ")     
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterTheUserNameOnReportAProblemPage() encountered and Error")
                self.WeMoAppLog.LogException()                
                    
 
    def _enterTheEmailOnReportAProblemPage(self,EmailId):
        """
        Enter the Email Id in the Report A Problem Page.
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Enter the EmailId in the Report A Problem Page.")
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):
                    if (self.ExperitestClient.isElementFound("WEB","name=email",0)):
                        self.ExperitestClient.elementSendText("WEB","name=email",0,"%s"%EmailId)
                        time.sleep(3)
                        self.ExperitestClient.closeKeyboard() 
                        self.result = True                        
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Email Id is successfully entered on the Report A Problem Page")
                        break 
                else:
                    time.sleep(5)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Email Id is could not be entered on the Report A Problem Page, so lets try once again ")
                   
            else:
                self.exception_msg = "Email Id could not be entered on the Report A problem page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exception as the name=email could not be found ")
                raise Exception ("Raising an exception as the name=email could not be found ")     
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterTheEmailOnReportAProblemPage() encountered and Error")
                self.WeMoAppLog.LogException()  


    def _enterTheProductToBeSelectedOnReprotAProblemPage(self,ProdunctName):
        """
        Enter the Product to be selected on the Report A Problem Page.
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Enter the Product on the Report A Problem Page.")        
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):    
                    if (self.ExperitestClient.isElementFound("WEB","css=DIV.rapf-dropdown-wrapper",0)):
                        if (self.ExperitestClient.isElementFound("WEB","text=Product",0)):
                            self.ExperitestClient.click("WEB","name=product",0,1)
                            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.ListView']",0):                                
                                self.result = True
                                break 
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Report a Problem could not be found , so lets try once again ")
                        
            for i in range (5):
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.ListView']",0)):
                    if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s']"%ProdunctName,0)):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='%s']"%ProdunctName,0,1)
                        time.sleep(3)
                        if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@css='DIV.rapf-dropdown-wrapper']/..//*[contains(@value,'%s')]"%ProdunctName,0)):
                            self.result = True 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("The Product is selected in the product list for the a Problem has to be reported")
                            break                     
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("User selected Product could not be found on the Screen , so lets try to swipe and click on the product")
                        self.ExperitestClient.elementSwipe("NATIVE","xpath=//*[@class='android.widget.FrameLayout']",0,"Down",800,2000)
                        
            else:
                self.exception_msg = "The Problem specified could not be selected on Report A Problem Page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exceptions as the 'xpath=//*[@class='android.widget.ListView']' could not be found")
                raise Exception ("Raising an exceptions as the 'xpath=//*[@class='android.widget.ListView']' could not be found")                        
                        
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterTheProductToBeSelectedOnReprotAProblemPage() encountered and Error")
                self.WeMoAppLog.LogException()                            
 

    def _enterTheProblemToBeSelectedOnReprotAProblemPage(self,ProblemName):
        """
        Enter the Problem to be selected on the Report A Problem Page.
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Enter the Problem on the Report A Problem Page.")        
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):    
                    if (self.ExperitestClient.isElementFound("WEB","css=DIV.rapf-dropdown-wrapper",1)):
                        if (self.ExperitestClient.isElementFound("WEB","text=Problem",0)):
                            self.ExperitestClient.click("WEB","name=problem",0,1)
                            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.ListView']",0):                                
                                self.result = True
                                break 
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Report a Problem could not be found , so lets try once again ")
                        
            for i in range (5):
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.ListView']",0)):
                    if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s']"%ProblemName,0)):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='%s']"%ProblemName,0,1)
                        time.sleep(3)
                        if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@css='DIV.rapf-dropdown-wrapper']/..//*[contains(@value,'%s')]"%ProblemName,0)):
                            self.result = True 
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("The Product is selected in the product list for the a Problem has to be reported")
                            break 
                    
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("User selected Problem could not be found on the Screen , so lets try to swipe and click on the product")
                        self.ExperitestClient.elementSwipe("NATIVE","xpath=//*[@class='android.widget.FrameLayout']",0,"Down",800,2000)
            
            else:
                self.exception_msg = "The Problem specified could not be selected on Report A Problem Page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exceptions as the 'xpath=//*[@class='android.widget.ListView']' could not be found")
                raise Exception ("Raising an exceptions as the 'xpath=//*[@class='android.widget.ListView']' could not be found")
                        
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterTheProductToBeSelectedOnReprotAProblemPage() encountered and Error")
                self.WeMoAppLog.LogException() 
               
    def _enterTheTextInsideProblemCheckBox(self,Problem_Message):
        """
        Enter the Problem to be entered on the Report A Problem Page.
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Enter the Problem on the Report A Problem Page.")        
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):    
                    if (self.ExperitestClient.isElementFound("WEB","name=comment",0)):
                        self.ExperitestClient.elementSendText("WEB","name=comment",0,"%s"%Problem_Message)
                        time.sleep(5)    
                        self.ExperitestClient.closeKeyboard() 
                        self.result = True
                        break 
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Report a Problem could not be found , so lets try once again ")            
            else:
                self.exception_msg = "The Problem specified could not be added in the check box on Report A Problem Page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exceptions as the 'name=comment' could not be found")
                raise Exception ("Raising an exceptions as the 'name=comment' could not be found")
                        
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterTheTextInsideProblemCheckBox() encountered and Error")
                self.WeMoAppLog.LogException() 
                
                
    def _enterThePhoneNumberOnReportAProblemPage(self,Phone_Number):
        """
        Enter the Phone Number to be Entered on the Report A Problem Page.
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Enter the Problem on the Report A Problem Page.")        
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):    
                    if (self.ExperitestClient.isElementFound("WEB","id=rapf_phone",0)):
                        self.ExperitestClient.elementSendText("WEB","name=phone",0,"%s"%Phone_Number)
                        time.sleep(5) 
                        self.ExperitestClient.closeKeyboard()                         
                        self.result = True
                        break 
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Report a Problem could not be found , so lets try once again ")            
            else:
                self.exception_msg = "The Phone number specified could not be added in the check box on Report A Problem Page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exceptions as the 'id=rapf_phone' could not be found")
                raise Exception ("Raising an exceptions as the 'id=rapf_phone' could not be found")
                        
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enterThePhoneNumberOnReportAProblemPage() encountered and Error")
                self.WeMoAppLog.LogException()                
                
 
    def clickOnSubmitButtonOnReportAProblemPage(self):
        """
        Click on Submit button on Report A Problem page
        """
        if self.WeMoAppLog != None :
            self.WeMoAppLog.Info ("Click on Submit button on Report A Problem page")        
        try:
            self.result = None 
            self.exception_msg = None 
            for i in range (5):
                if (self.ExperitestClient.isElementFound ("WEB","text=Report a Problem", 0)):    
                    if (self.ExperitestClient.isElementFound("WEB","id=reportaproblem_form_submit",0)):
                        self.ExperitestClient.click("WEB","id=reportaproblem_form_submit",0,1)
                        self.result = True
                        break 
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Report a Problem could not be found , so lets try once again ")   
            else:
                self.exception_msg = "The Submit button could not be selected on Report A Problem Page"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising an exceptions as the 'id=reportaproblem_form_submit' could not be found")
                raise Exception ("Raising an exceptions as the 'id=reportaproblem_form_submit' could not be found")
                        
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnSubmitButtonOnReportAProblemPage() encountered and Error")
                self.WeMoAppLog.LogException()  
                
             
    def _selectEmail(self):
        """
        Select the Email in Tell Us What You Think Page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the Email in Tell Us What You Think Page")
            self.result = None 
            for i in range(15):
                if (self.ExperitestClient.isElementFound("NATIVE","text=Send Email")):
                    self.ExperitestClient.click("NATIVE","text=Gmail")
                    self.ExperitestClient.closeKeyboard()
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE","ui_text=Gmail",0)):
                    self.ExperitestClient.click("NATIVE","ui_text=Gmail",0,1)
                    self.result = True
                    break   
                    
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as "text=Send Email"could not be found.')
                raise Exception('Raising the Exception as  "text=Send Email" could not be found.')
            
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectEmail() encountered and Error")
                self.WeMoAppLog.LogException()
                     
    def _verifyEmailContentofEmailtoSupportCenter(self,WeMoFriendlyName,FirmwareVersion):
        """
        Check for the details on the Email drafted for Support centre
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the details on the Email drafted for Support centre")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Compose']"))!= False:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as "Compose"could not be found.')
                raise Exception('Raising the Exception as "Compose" could not be found.')
            
            self.ExperitestClient.closeKeyboard()               
            self.EMAIL_CONTENT=self.ExperitestClient.getText("NATIVE")
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Details of WeMo Devices:%s"%self.EMAIL_CONTENT)
            for i in range(3):
                if self.ExperitestClient.isElementFound("TEXT",WeMoFriendlyName):
                        self.result =True 
                        break  

                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.EditText",0)):
                    EMAIL_DATA=self.ExperitestClient.getTextIn2("NATIVE","class=android.widget.EditText",0,"NATIVE","Inside", 0,0) 
                    EMAIL_DATA.find(WeMoFriendlyName) != -1 
                    EMAIL_DATA.find(FirmwareVersion) != -1 
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as Device Friendly Name "%s" or Firmware "%s" could not be found.'%(WeMoFriendlyName,FirmwareVersion))
                raise Exception('Raising the Exception as Device Friendly Name "%s" or Firmware "%s" could not be found.'%(WeMoFriendlyName,FirmwareVersion)) 
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyEmailContentofEmailtoSupportCenter() encountered and Error")
                self.WeMoAppLog.LogException()
                self.WeMoAppLog.Error("ExceptionDetails:"+str(sys.exc_info()[1]))
                self.WeMoAppLog.Error("TraceBack:"+str(traceback.extract_tb(sys.exc_info()[2])))
    
    
    def _verifyCompleteEmailContentofEmailtoSupportCenter(self,EmailContent):
        """
        Check for the details on the Email drafted for Support centre
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for the details on the Email drafted for Support centre")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Compose']"))!= False:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as "Compose"could not be found.')
                raise Exception('Raising the Exception as "Compose" could not be found.')
            
            self.ExperitestClient.closeKeyboard()               
            self.EMAIL_CONTENT=self.ExperitestClient.getText("NATIVE")
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Details of WeMo Devices:%s"%self.EMAIL_CONTENT)
            for i in range(3):
                if self.ExperitestClient.isElementFound("TEXT",EmailContent):
                        self.result =True 
                        break  

                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.EditText",0)):
                    EMAIL_DATA=self.ExperitestClient.getTextIn2("NATIVE","class=android.widget.EditText",0,"NATIVE","Inside", 0,0) 
                    EMAIL_DATA.find(EmailContent) != -1 
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as Device Friendly Name "%s" or Firmware "%s" could not be found.'%(WeMoFriendlyName,FirmwareVersion))
                raise Exception('Raising the Exception as Device Friendly Name "%s" or Firmware "%s" could not be found.'%(WeMoFriendlyName,FirmwareVersion)) 
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyCompleteEmailContentofEmailtoSupportCenter() encountered and Error")
                self.WeMoAppLog.LogException()
                self.WeMoAppLog.Error("ExceptionDetails:"+str(sys.exc_info()[1]))
                self.WeMoAppLog.Error("TraceBack:"+str(traceback.extract_tb(sys.exc_info()[2])))
    
    
    def clickOnNotRightNowTab(self):
        """
        Clicking on the Not Right Now tab on the Tell Us What You Think Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Not Right Now tab on the Tell Us What You Think Page.")
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Tell Us What You Think!")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Tell Us What You Think!"could not be found.')
                raise Exception('Raising the Exception as the element:"text=Tell Us What You Think!" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=tellus_not_now")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=tellus_not_now")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=tellus_not_now"could not be found.')
                raise Exception('Raising the Exception as the element:"id=tellus_not_now" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnNotRightNowTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 ###########################################################################################
    
    ##################################
    #Set Up Another Device  Functions#
    ##################################
    def clickOnSetUpAnotherDeviceTab(self):
        """
        Clicking on the Set Up Another Device Tab on the Devices List Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Set Up Another Device Tab on the Devices List Page.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=more_setup_another_device")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_setup_another_device")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_setup_another_device"could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_setup_another_device" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnSetUpAnotherDeviceTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 ##########################################################################################
    
    ###########################
    #Edit Device Tab Functions#
    ###########################
    def _clickOnEditDeviceTab(self, refresh=True):
        """
        Clicking on the Edit Device Tab on the Devices List Page
        """
        try:
            self._handlePopUpOnWeMoApp()
            self.exception_msg = None
            self.result = None
            self._isAppLaunched()
            assert self.result == True 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Edit Device Tab on the Devices List Page.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id ='headerComponent']/..//*[contains(@css,'ANCHOR.edit.edit_img')]")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@id ='headerComponent']/..//*[contains(@css,'ANCHOR.edit.edit_img')]",0,1)
                    time.sleep(3 * self.delay)

                    if (self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@css,'SPAN.edit_device.fa.fa-chevron-right.')]",0)) and (self.ExperitestClient.isElementFound("WEB","text=Done",0)):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The WeMo App is in edit device page")
                        self.result = True
                        break

                    if (self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@css,'SPAN.edit_device.fa.fa-chevron-right.')]",0)) == False:
                        if (self.ExperitestClient.isElementFound("WEB","text=Done",0)):
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("The WeMo App is in edit device page")
                            self.result = True
                            break
                else:
                    self._handlePopUpOnWeMoApp()

            else:
                self.exception_msg = "Failed to identify the Edit button on the WeMo App"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element edit_device could not be found.')
                raise Exception('Raising the Exception as the element edit_device could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the edit button can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnEditDeviceTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnDoneButtonOnTheDeviceListPage(self): 
        """
        Click on the Done button on the Device List Page.
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the Done button on the Device List Page.")
        try:
            self.result = None
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=device_container")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" could not be found.')
                raise Exception('Raising the Exception as the element:"id=device_container" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Done")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Done")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Done" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnDoneButtonOnTheDeviceListPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _goToTheEditDevicePageOfWemo(self,WeMoFriendlyName, WemoSerialNumber = None,WeMoDeviceType= None):
        """
        Click on the edit device pointer page of a wemo device when the app is on Edit page.
        """
        try:
            self._handlePopUpOnWeMoApp()
            assert self.result == True
            
            # if WeMoDeviceType not in ["Switch","Sensor","Insight","SlowCooker","HeaterA","HeaterB","Humidifier","Motion","Light","AirPurifier","CoffeeMaker","Maker","InsightV2"]:
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor", "Insight" ,"SlowCooker","HeaterA","HeaterB","Humidifier","Motion","Light" or "AirPurifier"')
            #     raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor","Insight","SlowCooker","HeaterA","HeaterB","Humidifier","Motion","Light" or "AirPurifier"')

            self.result = None
            # if self.WeMoAppLog != None:
            #     self.WeMoAppLog.Info("Wemo Device Type is:%s"%WeMoDeviceType)
            #     self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not and click on Edit Pointer"%WemoSerialNumber)
            for i in range(5):               
                # if (WeMoDeviceType in ["Switch", "Sensor", "Motion", "Insight", "InsightV2", "Light", "Maker"]) :
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/../..//*[contains(@css,'edit_device.')]"%(WeMoFriendlyName),0):
                    self.ExperitestClient.click("WEB","xpath=//*[@text='%s']/../..//*[contains(@css,'edit_device.')]"%(WeMoFriendlyName),0,1)
                    time.sleep(self.delay)
                    if (self.ExperitestClient.isElementFound("WEB","text=Edit Device",0)):
                        self.result = True
                        break
                else:
                    time.sleep(2*self.delay)
                        

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Edit button for the device <%s> can not be clicked.'%WeMoFriendlyName)
                raise Exception('Edit button for the device <%s> can not be clicked.'%WeMoFriendlyName)

        except:
            self.exception_msg = "Edit button for the devce <%s> can not be clicked."%WeMoFriendlyName
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _goToTheEditDevicePageOfWemo() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _editTheNameOfWemo(self,DUMMYPARAM,WemoFriendlyName,NewWemoFriendlyName):
        """
        Enter the new Friendly Name for the Wemo.
        DUMMYPARAM : no use, to make inline with iOS
        """
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Edit the name of Wemo:%s and give it a new name:%s."%(WemoFriendlyName,NewWemoFriendlyName))
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Edit Device")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Edit Device" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Edit Device" could not be found.')
            
            OrignalWemoFriendlyName = self.ExperitestClient.elementGetProperty("WEB", "xpath=//*[@id='editFriendlyName']", 0,"text").strip()
            assert OrignalWemoFriendlyName == WemoFriendlyName
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=editFriendlyName",0)):
                    self.ExperitestClient.elementSendText("WEB", "id=editFriendlyName", 0, NewWemoFriendlyName)
                    time.sleep(self.delay)
                    self.result = True
                    # closing the keyboard
                    self.ExperitestClient.closeKeyboard()
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=editFriendlyName" could not be found for %s'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"id=editFriendlyName" could not be found for %s'%WemoFriendlyName)
        except:
            self.exception_msg = "Raising the Exception as the name for <%s> can not be changed."%WemoFriendlyName
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _editTheNameOfWemo() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getTheWeMoFriendlyName(self):
        """
        Get the WeMo FirendlyName of the WeMo
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            self.WeMoFriendlyName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the WeMo Friendly Name from the Edit Device Page of the WeMo")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Edit Device")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Edit Device" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Edit Device" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=device_edit_friendly_name",0)):
                    time.sleep(1)
                    self.WeMoFriendlyName = self.ExperitestClient.elementGetText("WEB", "id=device_edit_friendly_name", 0).strip()
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_edit_friendly_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=device_edit_friendly_name" could not be found.')
            assert self.WeMoFriendlyName != None
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.WeMoFriendlyName = None
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheWeMoFriendlyName() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesOnEditDevicePage(self):
        """
        Click on the Save button to confirm the changes on the Edit Device Page
        """
        try:
            # self._isAppLaunched()
            # assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Edit Device Page")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Save")):
                    self.ExperitestClient.click("WEB", "text=Save")
                    time.sleep(4*self.delay)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "id=edit_device_save_btn")):
                    self.ExperitestClient.click("WEB", "id=edit_device_save_btn")
                    time.sleep(self.delay)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=edit_device_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=edit_device_save_btn" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the save button on edit page can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesOnEditDevicePage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesOnEditDevicePage(self):
        """
        Click on the Cancel button to cancel the changes on Edit Device Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on Edit Device Page")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=edit_device_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=edit_device_cancel_btn")
                    time.sleep(5)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=edit_device_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=edit_device_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesOnEditDevicePage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnResetOptionsTab(self,WeMo_SSID, WemoFriendlyName):
        """
        Click on the Reset Option Tab on the Edit Device Page of the Wemo
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Reset Option Tab of the Wemo:%s."%(WemoFriendlyName))

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Edit Device']")):
                    self.result = True
                    break

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Edit Device" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Edit Device" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']"%WeMo_SSID)):
                    self.result = True
                    break

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:text=WeMo ID: <%s> could not be found.'%WeMo_SSID)
                raise Exception('Raising the Exception as the element:text=WeMo ID: <%s> could not be found.'%WeMo_SSID)
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Reset Options' and @top='true']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Reset Options' and @top='true']")
                    time.sleep(2*self.delay)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe("Down",500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Reset Options" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Reset Options" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:text=Reset Options could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnResetOptionsTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnResetNamesRulesDataTab(self):
        """
        Click on the Reset Name, Icons and Rules Tab on the Reset Page i.e. Clear Product info
        """
        try:
            # self._isAppLaunched()
            # assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Reset Name, Icons and Rules Tab on the Reset Page")

            for i in range(4):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Clear Product Info']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Clear Product Info']")
                    time.sleep(2*self.delay)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear Product Info" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear Product Info" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:text=Clear Product Info could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnResetNamesRulesDataTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnClearUsageDataTab(self):
        """
        Click on the Clear Usage Data Tab on the Reset Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Clear Usage Data Tab on the Reset Page")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Reset")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Reset" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Reset" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=clear_usage_button")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=clear_usage_button")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=clear_usage_button" could not be found.')
                raise Exception('Raising the Exception as the element:"id=clear_usage_button" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnClearUsageDataTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnResetWiFiSettingsTab(self):
        """
        Click on the Reset WiFi Settings Tab on the Reset Page.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Reset WiFi Settings Tab on the Reset Page.")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Reset")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Reset" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Reset" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=clear_wifi_button")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=clear_wifi_button")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:    
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=clear_wifi_button" could not be found.')
                raise Exception('Raising the Exception as the element:"id=clear_wifi_button" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnResetWiFiSettingsTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyAndClickTheElement(self,zone,element,index=0,clickcount=1,wait=0.1):
        self.result = None
        if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the presence and click on the <%s>"%element)
        for i in range(5):
            if(self.ExperitestClient.isElementFound(zone,element,index)):
                self.ExperitestClient.click(zone,element,index,clickcount)
                time.sleep(wait*self.delay)
                self.result = True
                break
            else:
                self._handlePopUpOnWeMoApp()
        else:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Raising the Exception as the element <%s> could not be found.'%element)
            raise Exception('Raising the Exception as the element  <%s> could not be found.'%element)
        return self.result

    def _clickOnMoreTab(self):
        '''
        '''
        try:
            self._handlePopUpOnWeMoApp()
            self.result = None
            self._verifyAndClickTheElement("WEB","xpath=//*[@id ='headerComponent']/..//*[contains(@css,'ANCHOR.menu.menu_img')]")
            time.sleep(5 * self.delay)
        except:
            self.exception_msg = "Raising the Exception as settings button could not be clicked"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnMoreTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnEraseAllContentsAndSettingsTab(self):
        """
        Click on the Erase All Content And Settings Tab on the Reset Page.
        """
        try:
            self._handlePopUpOnWeMoApp()
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Erase All Content And Settings Tab on the Reset Page.")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Reset Options']"),0):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Reset" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Reset" could not be found.')
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Erase All Content and Settings']",0,1)
        except:
            self.exception_msg = "Raising the Exception as the text=Reset could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnEraseAllContentAndSettingsTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForClearingUsageData(self):
        """
        Verify the Clear Usage Data Pop Up and Cancel the Changes
        """
        try:
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Clear Usage Data Pop Up and Cancel the Changes")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear all energy and time data for this device?")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear all energy and time data for this device?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear all energy and time data for this device?" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Cancel")
                    time.sleep(15)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForClearingUsageData() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForClearingUsageData(self):
        """
        Verify the Clear Usage Data Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Clear Usage Data Pop Up and Cancel the Changes")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear all energy and time data for this device?")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear all energy and time data for this device?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear all energy and time data for this device?" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=OK")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=OK")
                    time.sleep(15)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=OK" could not be found.')
                raise Exception('Raising the Exception as the element:"text=OK" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForClearingUsageData() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForClearingNameIconRules(self):
        """
        Verify the Clear Name Icon Rules Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Clear Name Icon Rules Pop Up and Cancel the Changes")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear the device's name, icon and rules?")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear the device\'s name, icon and rules?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear the device\'s name, icon and rules?" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=clear_name_icon_rules_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=clear_name_icon_rules_cancel_btn")
                    time.sleep(15)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=clear_name_icon_rules_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=clear_name_icon_rules_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForClearingNameIconRules() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForResettingNameRulesAndData(self):
        """
        Verify the Clear Name Icon Rules Pop Up and Confirm the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Clear Name Icon Rules Pop Up and Confirm the Changes")
            for i in range(4):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear the device's name, icon and rules?")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "text=Clear all energy and time data for this device?",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear the device\'s name, icon and rules?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear the device\'s name, icon and rules?" could not be found.')
            
            for i in range(4):
                if(self.ExperitestClient.isElementFound("WEB", "css=ANCHOR.actionBtn.button-1")):
                    self.ExperitestClient.click("WEB", "css=ANCHOR.actionBtn.button-1")
                    time.sleep(15)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "id=clear_name_icon_rules_save_btn")):
                    self.ExperitestClient.click("WEB", "id=clear_name_icon_rules_save_btn")
                    time.sleep(15)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=clear_name_icon_rules_save_btn" or "css=ANCHOR.actionBtn.button-1" could not be found.')
                raise Exception('Raising the Exception as the element:"id=clear_name_icon_rules_save_btn" or "css=ANCHOR.actionBtn.button-1" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForResettingNameRulesAndData() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForResetWiFiSettings(self):
        """
        Verify the Reset WiFi Settings Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Reset WiFi Settings Pop Up and Cancel the Changes")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear the device's Wi-Fi settings? (You will need to set it up again)")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear the device\'s Wi-Fi settings? (You will need to set it up again)" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear the device\'s Wi-Fi settings? (You will need to set it up again)" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=clear_wifi_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=clear_wifi_cancel_btn")
                    time.sleep(15)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=clear_wifi_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=clear_wifi_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForResetWiFiSettings() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForResetWiFiSettings(self):
        """
        Verify the Reset WiFi Settings Pop Up and Confirm the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Reset WiFi Settings Pop Up and Confirm the Changes")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear the device's Wi-Fi settings? (You will need to set it up again)")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear the device\'s Wi-Fi settings? (You will need to set it up again)" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear the device\'s Wi-Fi settings? (You will need to set it up again)" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=clear_wifi_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=clear_wifi_save_btn")
                    time.sleep(15)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=clear_wifi_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=clear_wifi_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForResetWiFiSettings() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForEraseAllContentsAndSettings(self):
        """
        Verify the Erase Contents And Settings Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Erase Contents And Settings Pop Up and Confirm the Changes")

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear all settings and restore your device to factory defaults?")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear all settings and restore your device to factory defaults?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear all settings and restore your device to factory defaults?" could not be found.')

            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Cancel']")

        except:
            self.exception_msg = "Raising the Exception as the confirmation for erase all settings can not be cancelled"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForEraseAllContentsAndSettings() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForEraseAllContentsAndSetting(self):
        """
        Verify the Erase Contents And Settings Pop Up and Confirm the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Erase Contents And Settings Pop Up and Confirm the Changes")

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Clear all settings and restore your device to factory defaults?")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Clear all settings and restore your device to factory defaults?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Clear all settings and restore your device to factory defaults?" could not be found.')
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='OK']")

        except:
            self.exception_msg = "Raising the Exception as the confirmation for erase all settings can not be done"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForEraseAllContentsAndSetting() encountered and Error")
                self.WeMoAppLog.LogException()

    #######################################################################################################################
    #######################################################################################################################
    #####################
    #Rules Tab Functions#
    #####################
    def _clickOnRulesTab(self):
        """
        Clicking on the Rules Tab to go to the Rules Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on Rules Tab to go to the Rules Page.")
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@css='ANCHOR.rulesIcon.tabIcon']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@css='ANCHOR.rulesIcon.tabIcon']")
                    for i in range(10):
                        if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='IMG' and ./parent::*[@id='add_new_icon']]"):
                            self.result = True
                            break
                        elif self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Control A Device']"):
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info('Sleeping for 10 secs')
                            time.sleep(20*self.delay)
                elif self.ExperitestClient.isElementFound("WEB", "xpath=//*[@class='rules_btn ui-link']"):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"css=ANCHOR.rulesIcon.tabIcon" could not be found.')
                raise Exception('Raising the Exception as the element:"css=ANCHOR.rulesIcon.tabIcon" could not be found.')
            # handling pop up
            # for i in range(5):
            #     self._handlePopUpOnWeMoApp()
        except:
            self.exception_msg = "Raising the Exception as the element:'css=ANCHOR.rulesIcon.tabIcon' could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnRulesTab() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _deleteOldRulesFromRulesPage(self):
        try:
            self.result = None
            # if there are no rules
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Control A Device']",0):
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('There are no rules to delete.')
            else: # deleting the present rules
                while(self.ExperitestClient.isElementFound("WEB","text=Enabled Rules",0) or self.ExperitestClient.isElementFound("WEB","text=Disabled Rules",0)):
                    if self._verifyAndClickTheElement("WEB","xpath=//*[@css='SPAN.rule']",0):
                        time.sleep(2*self.delay)
                        xpath_delete = None
                        if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'Delete') and @top='true']",0):
                            self._verifyAndClickTheElement("WEB","xpath=//*[contains(@text,'Delete') and @top='true']",0)
                        elif self.ExperitestClient.isElementFound("WEB","xpath=//*[@class='footerContainer' and @top='true']",0):
                            self._verifyAndClickTheElement("WEB","xpath=//*[@class='footerContainer' and @top='true']",0)
                        for i in range(20):  # large number to give enough time to rule to get delete
                            if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='add_new_icon']") or self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Control A Device']") :
                                self.result = True
                                break
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info('Sleeping for 10s while rule is being deleted.')
                            time.sleep(20*self.delay)
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Warning('Raising the warning as the rule took more than 200 secs to delete.')
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("There are no Active Enabled Rules, neither there are any Disabled Rules.")
                        self.result = True
        except:
            self.exception_msg = "Requested rule can not be deleted."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _deleteOldRulesFromRulesPage() encountered and Error")
                self.WeMoAppLog.LogException()
                self.WeMoAppLog.Error("ExceptionDetails:"+str(sys.exc_info()[1]))
                self.WeMoAppLog.Error("TraceBack:"+str(traceback.extract_tb(sys.exc_info()[2]))) 
                
    def _verifyByTimeSunriseSunset_TimerRule(self):
        """
        Verify the By Time, sunrise/sunset to create a Timer Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the By Time, sunrise/sunset to create a Timer Rule.")

            self._isAppLaunched()
            assert self.result == True

            self._verifyAndClickOnAddIconOnRulesPage()

            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='timer_rule']")):
                    self.result = True
                    break
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to Simple Timer/Sunrise-Sunset Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@id="timer_rule"] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@id="timer_rule"] could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyByTimeSunriseSunset_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnByTimeSunriseSunset_TimerRule(self):
        """
        Verify the By Time, sunrise/sunset to create a Timer Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the By Time, sunrise/sunset to create a Timer Rule.")

            self._isAppLaunched()
            assert self.result == True

            self._verifyAndClickOnAddIconOnRulesPage()

            self._verifyAndClickTheElement("WEB", "xpath=//*[@id='timer_rule']",wait=4)

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnByTimeSunriseSunset_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTimeOrDaylight_TimerRule(self):
        """
        Verifying Time or Daylight  Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying Time or Daylight Rule.")
            self._clickOnAddIconToCreateANewRule()
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Control A Device",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Turn on/off with" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Turn on/off with" could not be found.')
            for i in range(10):
                if (self.ExperitestClient.isElementFound("WEB", "id=timer_rule")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTimeOrDaylight_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
                     
    def clickOnTimeOrDaylight_TimerRule(self):
        """
        Clicking on Time or Daylight to create a Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on Time or Daylight to create a Timer Rule.")
            self._clickOnAddIconToCreateANewRule()
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=timer_rule")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=timer_rule")
                    time.sleep(2)
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    time.sleep(10)                  
                 
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTimeOrDaylight_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyMotion_SensorRule(self):
        """
        Verifying Motion Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying Motion Sensor Rule.")
            self._clickOnAddIconToCreateANewRule()
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Control A Device",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Turn on/off with" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Turn on/off with" could not be found.')
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("WEB", "id=sensor_rule")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensor_rule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensor_rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyMotion_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnWithMotion_SensorRule(self):
        """
        Clicking on Motion to create a Sensor Rule
        """
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on Motion Sensor Rule.")
            self._clickOnAddIconToCreateANewRule()
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='sensor_rule']",wait=4)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWithMotion_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyAwayModeRule(self):
        """
        Verifying Away Mode Rule 
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying Away Mode Rule.")
            self._clickOnAddIconToCreateANewRule()
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Automate",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Automate" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Automate" could not be found.')
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Away mode' and @top='true']")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[@text="Away mode" and @top="true"]" could not be found.')
                raise Exception('Raising the Exception as the element:"xpath=//*[@text="Away mode" and @top="true"]" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def clickOnAwayModeRule(self):
        """
        Clicking on Away Mode Rule to create a Away Mode Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on Away Mode Rule to create a Away Mode Rule.")
            self._clickOnAddIconToCreateANewRule()
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Away mode' and @top='true']")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Away mode' and @top='true']")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=so_rule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=so_rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyAwayModeAndRulesPopUp(self):
        """
        Verify the Away Mode and Rules Pop Up
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Away Mode and Rules Pop Up")

            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'will be suspended and disabled.')]",0):
                    self.result = True
                    break
                elif self.ExperitestClient.isElementFound("WEB","text=Existing rules will be suspended during Away Mode.",0):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:text=Existing rules could not be found.')
                raise Exception('Raising the Exception as the element:text=Existing rules could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyAwayModeAndRulesPopUp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnOKOnAwayModeAndRulesPopUp(self):
        """
        Click on OK on the away mode popup.
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on OK on the away mode popup.")

            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK']"):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']")
                time.sleep(self.delay*2)

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnOKOnAwayModeAndRulesPopUp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyWithMotion_NotificationRule(self):
        """
        Verifying With Motion Notification Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying With Motion  Notification Rule.")
            self._clickOnAddIconToCreateANewRule()
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=GET NOTIFIED",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Notify me of" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Notify me of" could not be found.')
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("WEB", "id=sensor_notification_rule")):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensor_notification_rule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensor_notification_rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyWithMotion_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    
    def _clickOnWithMotion_NotificationRule(self):
        """
        Clicking on With Motion to create a Notification Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on With Motion to create a Notification Rule.")
            self._clickOnAddIconToCreateANewRule()
            self.ExperitestClient.swipe("Down",200)
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='sensor_notification_rule']",wait=10)

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWithMotion_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnSensingPower_NotificationRule(self):
        """
        Clicking on sensing power to create a Notification Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on sensing power to create a Notification Rule.")
            self._clickOnAddIconToCreateANewRule()
            self.ExperitestClient.swipe("Down",200)
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='notify_power_sensing_rule']",wait=4)

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnSensingPower_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()


    ### Auto-Off Timer rule verification             
    def _verifyAuto_Off_TimerRule(self):
        """
        Verify Auto-off Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify Auto-off Timer Rule")
            self._clickOnAddIconToCreateANewRule()
            for i in range(4):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='countdown_timer_rule']"):
                    self.result = True
                    break
        except:
            self.exception_msg = "Raising the Exception as the auto off timer icon can not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyAuto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()     

    def _clickOnAuto_Off_TimerRule(self):
        """
        Clicking on the Auto Off timer rule to create a the Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Auto Off timer rule to create a the Rule .")
            self._clickOnAddIconToCreateANewRule()
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='countdown_timer_rule']",wait=4)
        except:
            self.exception_msg = "Raising the Exception as the auto off timer can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnAuto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()   

                
    def _selectTheWeMoToCreateTheRule_TimerRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Timer Rule"%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.result = None
            # for i in range(5):
            #     if (self.ExperitestClient.isElementFound("WEB", "text=New Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Timer Rule",0)):
            #         self.result = True
            #         break
            # else:
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            #     raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']"%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateTheRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectTheActionForWeMo_TimerRule(self,WemoFriendlyName,actionName):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        # ID change in Dagobah
        # ID change in Dagobah build 68
        # ActionList = ["on until time", "on", "off"]
        # ActionList = {"on until time":"On Until Time", "on":"On", "off":"Off"}
        ActionList = {"on until time":"On until time", "on":"On", "off":"Off"}
        print actionName
        try:
            self._isAppLaunched()
            assert  self.result == True
            if not actionName in [x.lower() for x in ActionList.keys()]:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
                raise Exception('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("The Switch on which the action will be applied is:%s"%WemoFriendlyName)
                self.WeMoAppLog.Info("Select the action:%s for the Switch in the New Timer Rule Page"%actionName)
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            # for i in range(5):
            #     if (self.ExperitestClient.isElementFound("WEB", "text=New Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Timer Rule",0)):
            #         self.result = True
            #         break
            # else:
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Rule" or "text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            #     raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            
            self.ExperitestClient.swipe("Down",200)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s' and @width>0 and ./parent::*[@nodeName='DIV']]"%ActionList[actionName])

            # if actionName == "off":
            #     if self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0):
            #         if self.ExperitestClient.elementGetText("WEB", "xpath=//*[@text='%s']/..//*[@css='SPAN.action_subHeader']"%WemoFriendlyName, 0).strip() == actionName:
            #             if self.WeMoAppLog != None:
            #                 self.WeMoAppLog.Error('Action got selected for the wemo.')
            #         else:
            #             if self.WeMoAppLog != None:
            #                 self.WeMoAppLog.Error('Action name is not expected.')
            #             raise Exception('Action name is not expected.')
            #     else:
            #         if self.WeMoAppLog != None:
            #             self.WeMoAppLog.Error('Green check mark does not appear.')
            #         raise Exception('Green check mark does not appear.')
            
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheActionForWeMo_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectTheActionForWeMo_NestRule(self,WemoFriendlyName,actionName):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        # ID change in Dagobah
        # ActionList = ["on until time", "on", "off"]
        ActionList = {"on until time":"On Until Time", "on":"on", "off":"off"}
        print actionName
        try:
            self._isAppLaunched()
            assert  self.result == True
            if not actionName in [x.lower() for x in ActionList.keys()]:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
                raise Exception('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("The Switch on which the action will be applied is:%s"%WemoFriendlyName)
                self.WeMoAppLog.Info("Select the action:%s for the Switch in the New Timer Rule Page"%actionName)
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            # for i in range(5):
            #     if (self.ExperitestClient.isElementFound("WEB", "text=New Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Timer Rule",0)):
            #         self.result = True
            #         break
            # else:
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Rule" or "text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            #     raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')

            self.ExperitestClient.swipe("Down",200)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s' and @width>0 and ./parent::*[@nodeName='DIV']]"%ActionList[actionName])

            # if actionName == "off":
            #     if self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0):
            #         if self.ExperitestClient.elementGetText("WEB", "xpath=//*[@text='%s']/..//*[@css='SPAN.action_subHeader']"%WemoFriendlyName, 0).strip() == actionName:
            #             if self.WeMoAppLog != None:
            #                 self.WeMoAppLog.Error('Action got selected for the wemo.')
            #         else:
            #             if self.WeMoAppLog != None:
            #                 self.WeMoAppLog.Error('Action name is not expected.')
            #             raise Exception('Action name is not expected.')
            #     else:
            #         if self.WeMoAppLog != None:
            #             self.WeMoAppLog.Error('Green check mark does not appear.')
            #         raise Exception('Green check mark does not appear.')

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheActionForWeMo_NestRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _unselectTheActionForWeMo_TimerRule(self,WemoFriendlyName,actionName):
        """
        UnSelect the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        # ActionList = ["on until time", "on", "off"]
        ActionList = {"on until time":"On Until Time", "on":"On", "off":"Off"}
        print actionName
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            if not actionName in [x.lower() for x in ActionList.keys()]:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
                raise Exception('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Unselect the action:%s for the WeMo in the New Timer Rule Page"%ActionList[actionName])
                self.WeMoAppLog.Info("The WeMo on which the action will be applied is:%s"%WemoFriendlyName)
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            
            if (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Down", "WEB", "css=SPAN.action_subHeader", 0, 0)) and (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Action:%s is allready unselected for the Rule to apply"%actionName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheActionForWeMo_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()


    def _selectTheWeMoToCreateTheRule_Auto_Off_Timer(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Auto-off Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Auto-off Timer Rule"%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=Auto-off Timer",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Auto-Off Timer Rule",0)):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Up",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Auto-off Timer" or "text=Edit Auto-Off Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Auto-off Timer" or "text=Edit Auto-Off Timer Rule" could not be found.')
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']"%WemoFriendlyName)
        except:
            self.exception_msg = "Raising the Exception as the the wemo for auto off rule can not be selected."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateTheRule_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _unselectTheWeMoToCreateTheRule_Auto_Off_Timer(self,WemoFriendlyName):
        """
        UnSelect the WeMo on which the Rule is to be applied for the Auto-Off Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Auto-off Timer",0))  or (self.ExperitestClient.isElementFound("WEB", "text=Edit Auto-Off Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Auto-off Timer" or "text=Edit Auto-Off Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Auto-off Timer" or "text=Edit Auto-Off Timer Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            for i in range(5):  
                
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='SPAN' and @css='SPAN.check_mark' and @onScreen='true' and ./preceding-sibling::*[@nodeName='DIV' and ./*[./*[@text='%s']]] ]" % WemoFriendlyName, 0)):        
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "xpath=//*[@nodeName='SPAN' and @css='SPAN.check_mark' and @onScreen='true' and ./preceding-sibling::*[@nodeName='DIV' and ./*[./*[@text='%s']]] ]" % WemoFriendlyName, 0, 1)
                    time.sleep(1)
                    assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='SPAN' and @css='SPAN.check_mark' and @onScreen='true' and ./preceding-sibling::*[@nodeName='DIV' and ./*[./*[@text='%s']]] ]" % WemoFriendlyName, 0)) == False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Switch:%s is now unselected for the Rule to apply"%WemoFriendlyName)              
                    self.result = True
                    break
                            
                else:
                    assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='SPAN' and @css='SPAN.check_mark' and @onScreen='true' and ./preceding-sibling::*[@nodeName='DIV' and ./*[./*[@text='%s']]] ]" % WemoFriendlyName, 0)) == False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Switch:%s is already unselected for the Rule to apply"%WemoFriendlyName)
                    self.result = True
                    break 

        except:
             self._screenCapture()
             self._getTheAndroidDeviceLogs()
             if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                 time.sleep(1)
                 self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                 time.sleep(1)
             self._clickOnBackButtonToGoBackInWeMoApp()
             self._homeScreen()
             self.result = False
             if self.WeMoAppLog != None:
                 self.WeMoAppLog.Error("The method _unselectTheWeMoToCreateTheRule_Auto_Off_Timer() encountered and Error")
                 self.WeMoAppLog.LogException()

                
    def _selectTheWeMoToCreateTheRule_MotionRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Sensor Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Sensor Rule"%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=New Maker Sensor Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Maker Sensor Rule",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']"%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateTheRule_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 

    def _selectTheWeMoToCreateNest_HomeAwayRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Nest Rule
        @param WemoFriendlyName: The Wemo Friendly Name of the WeMo
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Motion Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None

            self._isAppLaunched()
            assert self.result == True

            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']"%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateNest_HomeAwayRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _selectTheNestDevice_NestRule(self,WemoFriendlyName,NestDeviceState):
        """
        Select the Nest Device in the Select Nest device Page for the Nest Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("The Nest device to be selected is:%s"%WemoFriendlyName)
        try:
            self.result = None
            self. exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Nest Rule Page"%WemoFriendlyName)

            self._isAppLaunched()
            assert self.result == True

            self.ExperitestClient.swipe("Down",200)
            for i in range(4):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName)):
                    self.result = True
                    break
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Nest Home/Away Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            for i in range(4):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'%s')]/..//*[@text='%s']"%(WemoFriendlyName,NestDeviceState)):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Nest <%s> already selected in <%s> mode."%(WemoFriendlyName,NestDeviceState))
                    break
                else:
                    self.ExperitestClient.click("WEB", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, 1)
                    time.sleep(2*self.delay)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='%s' and @top='true']"%NestDeviceState, 0, 1)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Nest <%s> selected in <%s> mode."%(WemoFriendlyName,NestDeviceState))
                    break
            else:
                self.exception_msg = "Failed to select the Nest:%s to create a Nest Home/Away Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            self.ExperitestClient.swipe("Up",200)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheNestDevice_NestRule() encountered and Error")
                self.WeMoAppLog.LogException()


    def _selectTheActionForWeMo_MotionRule(self,WemoFriendlyName,actionName):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Sensor Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:"on, then...", "off"
        @type actionName: String  on then
        """
        ActionList = {"on then":"on, then...", "off":"off"}

        try:
            if actionName.strip() not in ActionList.keys():
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right action for the WeMo. The action can  be "on, then...", "off"')
                raise Exception('Please give the right action for the WeMo. The action can  be "on, then...", "off"')
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("The WeMo on which the action will be applied is:%s"%WemoFriendlyName)
                self.WeMoAppLog.Info("Select the action:%s for the WeMo in the New Sensor Rule Page"%actionName)

            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s' and @width>0 and ./parent::*[@nodeName='DIV'] and @top='true']"%ActionList[actionName]):
                    self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s' and @width>0 and ./parent::*[@nodeName='DIV'] and @top='true']"%ActionList[actionName],wait=4)
                    break
                else:
                    self.ExperitestClient.swipe("Down",200)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Can not select the required action for motion rule.')
                raise Exception('Can not select the required action for motion rule.')

            
            if actionName == "off":
                for i in range(5):
                    if self.ExperitestClient.isFoundIn("WEB", "xpath=//*[@text='%s']"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0):
                        if self.ExperitestClient.elementGetText("WEB", "xpath=//*[@text='%s']/..//*[@css='SPAN.action_subHeader']"%WemoFriendlyName, 0).strip() == actionName:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Action got selected for the wemo.')
                                self.result = True
                                break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Action name is not expected.')

                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Green check mark does not appear or the action name is not expected.')
                    raise Exception('Green check mark does not appear or the action name is not expected.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheActionForWeMo_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _unselectTheActionForWeMo_MotionRule(self,WemoFriendlyName):
        """
        UnSelect the Action for the WeMo on which the Rule is to be applied for the Sensor Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:"on, then...", "off"
        @type actionName: String
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=New Maker Sensor Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Maker Sensor Rule",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']/../../..//*[@css='SPAN.check_mark' and @onScreen='true']"%WemoFriendlyName)
            assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheActionForWeMo_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _scrollUpTheScreen(self,offset=400, time=500):
        self.ExperitestClient.swipe2("Up",offset,time)

    def _scrollDownTheScreen(self,offset=400, time=500):
        self.ExperitestClient.swipe2("Down",offset,time)

    def _unSelectTheDevicesUnderAwayMode_AwayModeRule(self):
        try:
            total_selected_devices = self.ExperitestClient.getElementCount("WEB","xpath=//*[@class='check_mark' and @top='true']")
            for i in range(total_selected_devices):
                self.ExperitestClient.click("WEB","css=SPAN.check_mark",0,1)
        except:
            self._screenCapture()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unSelectTheDevicesUnderAwayMode_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()                    
        
        

    
    def _selectTheWeMo_AwayModeRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Away Mode Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Selecting the <%s> for away mode rule"%WemoFriendlyName)
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=Away Mode",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Away Mode Rule",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Away Mode Rule" or "text=Edit Away Mode Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Away Mode Rule" or "text=Edit Away Mode Rule" could not be found.')
            
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']"%WemoFriendlyName)
            
            assert self.ExperitestClient.isFoundIn("WEB","xpath=//*[@text='%s']"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheWeMo_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _unselectTheWeMo_AwayModeRule(self,WemoFriendlyName):
        """
        UnSelect the WeMo on which the Rule is to be applied for the Away Mode Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Away Mode Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Away Mode",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Away Mode Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Away Mode Rule" or "text=Edit Away Mode Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Away Mode Rule" or "text=Edit Away Mode Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            for i in range(5):
                if (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)):
                    time.sleep(1)
                    self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)
                    time.sleep(1)
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/../../..//*[@css='SPAN.check_mark' and @onScreen='true']"%WemoFriendlyName,0) == False:
                        self.result = True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Switch:%s is unselected for the Rule to apply"%WemoFriendlyName)
                        break
                        
                else:
                    assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Switch:%s is allready unselected for the Rule to apply"%WemoFriendlyName)
                    self.result = True
                    break 
                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheWeMo_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 

    def _selectAuto_Off_TimerIntervel(self,Timer):
        """
        Select the time intervel after which the auto off timer should turn off the device.
        @param TimerIntervel: The action for the WeMo. Actions:on until time, on and off
        @type TimerIntervel: String
        """
        TimerIntervel = ["1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr","Custom"]
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the time interval for which the Switch has to be on then Off")
        try:
            if Timer.strip() not in TimerIntervel:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right timer intervel for the WeMo.Valid values are "1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr","Custom"')
                raise Exception('Please give the right timer intervel for the WeMo.Valid values are "1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr","Custom"')
            self.result = None


            if Timer.strip() in ["1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr"]:
                for i in range(5):
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s' and @top='true']"%Timer):
                        self.ExperitestClient.click("WEB","xpath=//*[@text='%s']/..//*[contains(@class,'buttonImage')]"%Timer)
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The time interval %s is now selected."%Timer)
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.swipe("Down",250)
                            
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Unable to set the time.')
                    raise Exception('Unable to set the time.')
                    
            else:  # for custom time
                self._verifyAndClickTheElement("WEB","xpath=//*[@id='customPicker']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectAuto_Off_TimerIntervel() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _verifyTheCustomButtonMessage_Auto_Off_Timer(self,hour,minutes,check_default=False):
        """
        Verify the Time coming on the Custom Button
        @param hour: Hours selected on Custom Time Page       
        @param minutes: Minues selected on Custom Time Page
        """
        try:
            self.result = None
            
            if not check_default :
                if int(hour) > 24:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Hour Range Exceeded. Please Enter a value between 0 and 24')
                    raise Exception('Hour Range Exceeded. Please Enter a value between 0 and 24')
                
                if int(minutes) > 59:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Minutes Range Exceeded. Please Enter a value between 0 and 60')
                    raise Exception('Minutes Range Exceeded. Please Enter a value between 0 and 60')   
                
                Check_the_Hour = "%s H %s M"%(int(hour),int(minutes))
            else:
                Check_the_Hour = "Set"
                
            if (self.ExperitestClient.isElementFound("WEB", "text=Auto-off Timer",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Auto-Off Timer Rule",0)):
                for i in range(5):
                    if self.ExperitestClient.isFoundIn( "WEB","text=Custom" , 0, "Down", "WEB", "text=%s"%Check_the_Hour, 0, 0):
                        self.result = True           
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Custom Time %s found in Wemo App for Auto-Off Timer Rule." %Check_the_Hour )
                        break
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error("Custom Time %s not found in Wemo App for Auto-Off Timer Rule." %Check_the_Hour )
                    raise Exception("Custom Time %s not found in Wemo App for Auto-Off Timer Rule." %Check_the_Hour)
        except:
            self.exception_msg = "Raising the Exception as the timer value on auto off cutom timer button could not be verified."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheCustomButtonMessage_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _clickOnSave_ToSaveCustomTimer(self):
        """
        Click on Set to save the custom timer
        """
        try:
            self.result = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on set to save the custom timer.") 
                
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Set' and @nodeName='A']")
        except:
            self.exception_msg = "Raising the Exception as the custom timer for auto off timer could not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnSave_ToSaveCustomTimer() encountered and Error")
                self.WeMoAppLog.LogException()          

    def _clickOnCancel_ToCancelCustomTimer(self):
        """
        Click on Cancel button to cancel the custom timer
        """
        try:
            self.result = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on Cancel button to cancel the custom timer .") 
                
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Cancel' and @nodeName='A']")
        except:
            self.exception_msg = "Raising the Exception as the custom timer for auto off timer could not be cancelled."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnCancel_ToCancelCustomTimer() encountered and Error")
                self.WeMoAppLog.LogException()          

    def clickOnCancel_Auto_Off_Timer(self):
        """
        Click on Cancel button to cancel the custom timer
        """
        try:
            self.result = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on Cancel button to cancel the custom timer .") 
                
            for i in range(5):      
                if(self.ExperitestClient.isFoundIn("WEB", "text=Custom Timer", 0, "Down", "WEB", "text=Cancel", 0, 0)):
                    self.ExperitestClient.clickInsideAnElement3("WEB", "text=Custom Timer", 0, "Down", "WEB", "text=Cancel", 0, 0, 0, 1)
                    self.result = True
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Element \"text=Cancel\" found in Wemo App for Auto-Off Timer Rule."  )                    
                    break                   
                time.sleep(1)
            else:   
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Element \"text=Cancel\" not found in Wemo App for Auto-Off Timer Rule."  )
                raise Exception("Element \"text=Cancel\" not found in Wemo App for Auto-Off Timer Rule." )
                self.result = False         
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnCancel_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()          
                
    def _verifyTheTileStatusCountDownfor_AutoOffTimer(self,WemoFriendlyName):
        """
        Verify the tile status count down for Auto Off timer Rule.
        @param WemoFriendlyName: The Wemo Friendly Name of the WeMo 
        @type WemoFriendlyName: String        
        """
        try:
            self.result = None 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the count down for Auto Off timer for <%s>."%WemoFriendlyName)

            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/..//*[contains(@text,'Auto-off in')]"%WemoFriendlyName):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The tile is verified..")
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Auto-off in" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Auto-off in" could not be found.')                
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheTileStatusCountDownfor_AutoOffTimer() encountered and Error")
                self.WeMoAppLog.LogException()       


                 

    def _verifyTheRandomnessofAwayModeRule(self,time_to_monitor,devices):
        """
        Verify the Randomness of the Away Mode Rule
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying the Randomness of Away Mode Rule for <%s>."%devices)
            self.result = None
            begin_power_state = []
            current_power_state = []
            for device in devices:
                self._getWeMoPowerState(device)
                begin_power_state.append(self.power_state)
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Power state at the rule start is <%s>"%begin_power_state)
            # time.sleep(60)
            for i in range(time_to_monitor/12):
                for device in devices:
                    self._getWeMoPowerState(device)
                    current_power_state.append(self.power_state)
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Power state after 30 secs is <%s>"%current_power_state)
                if current_power_state == begin_power_state:
                    self.result = False
                else:
                    self.result = True
                    break
                begin_power_state = current_power_state
                current_power_state = []
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Sleeping for 30s to allow wemo to change power state as per away mode rule.The params for away mode rule were changed to (FirstOnTime=90,MinimumOnTime=200,MaximumOnTime=1200).")
                self._clickOnRefreshButton()
                time.sleep(40*self.delay)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheRandomnessofAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()


                
    def _selectTheMotionInNotificationRulePage_NotificationRule(self,WemoFriendlyName):
        """
        Select the Sensor in the Notification Rule Page for the Notification Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the Sensor::%s in the Notification Rule Page for the Notification Rule."%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Notification Rule",0) or self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0) or self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')

            
            if (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Down", "WEB", "css=SPAN.check_mark", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready selected for the Rule to apply"%WemoFriendlyName)
                self.result = True
            else:
                self.ExperitestClient.click("WEB", "text=%s"%WemoFriendlyName, 0, 1)
                time.sleep(2*self.delay)
                if self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Down", "WEB", "text=motion", 0, 0):
                    self.ExperitestClient.clickIn2_5("WEB", "text=%s"%WemoFriendlyName, 0, "Down", "WEB", "text=motion", 0, 0)
                    time.sleep(2*self.delay)
                    if self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0):
                        self.result = True
                    else:
                        self.result = False
                        raise Exception('Raising the Exception as the motion can not seen selected with green tick mark.')
                else:
                    self.result = False
                    raise Exception('Raising the Exception as the motion can not seen selected with green tick mark.')

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheMotionInNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectTheMotionInMotionRulePage_MotionRule(self,WemoFriendlyName):
        """
        Select the Sensor in the Motion Rule Page for the Notification Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the Sensor <%s> in the Motion Rule Page."%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None
            # for i in range(5):
            #     if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)):
            #         self.result = True
            #         break
            # else:
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            #     raise Exception('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            self.ExperitestClient.swipeWhileNotFound2("Down", 250, 2000,"WEB", "text=%s"%WemoFriendlyName)

            if (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready selected for the Rule to apply"%WemoFriendlyName)
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
                self.ExperitestClient.click("WEB", "text=%s"%WemoFriendlyName, 0, 1)
                time.sleep(2*self.delay)
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "text=motion", 0, 0) == True
                # self.ExperitestClient.clickIn2_5("WEB", "text=%s"%WemoFriendlyName, 0, "Down", "WEB", "text=motion", 0, 0)
                # time.sleep(2*self.delay)
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == True
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheMotionInMotionRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _unselectTheMotionInNotificationRulePage_NotificationRule(self,WemoFriendlyName):
        """
        Select the Sensor in the Notification Rule Page for the Notification Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the Sensor::%s in the Notification Rule Page for the Notification Rule."%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Notification Rule",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)):
                time.sleep(1)
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready unselected for the Rule to apply"%WemoFriendlyName)
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheMotionInNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectTheTimeForOnThenOffIfNoMotion_MotionRule(self,timeToBeSet):
        """
        Select the Time when click on the on then action for the Motion Rule
        @param time: The time to be selected 
        @type time: String
        """
        # TimeList = {"immediately":"1","1 minutes":"00:01","5 minutes":"00:05","10 minutes":"00:10","15 minutes":"00:15","30 minutes":"00:30","1 hour":"01:00","don't turn off":"0","Don't turn off":"0"}
        TimeList = {"immediately":"radio1","1 minutes":"radio2","5 minutes":"radio3","10 minutes":"radio4","15 minutes":"radio5","30 minutes":"radio6","1 hour":"radio7","don't turn off":"radio8","Don't turn off":"radio8"}
        try:        
            if timeToBeSet.strip() not in TimeList:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right time. The time can  be "immediately","1 minute","5 minutes","10 minutes","15 minutes","30 minutes","1 hour","don\'t turn off"')
                raise Exception('Please give the right time. The time can  be "immediately","1 minute","5 minutes","10 minutes","15 minutes","30 minutes","1 hour","don\'t turn off"')
            # if timeToBeSet in ["don't turn off","Don't turn off"]:
            #     timeToBeSet = ('Don'+ "'"+ 't turn off')
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the time:%s for the Switch in the New Motion Rule Page"%timeToBeSet)
            self.result = None
            # ID change in Dagobah
            # Till Dagobah : "xpath=//*[@text='On, then off if no motion']"
            # From Dagobah : "xpath=//*[@text='On, Then Off If No Motion']"

            for i in range(2):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='On, Then Off If No Motion']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:xpath=//*[@text=No more than every: and @hidden =false] could not be found.")
                raise Exception("Raising the Exception as the element:xpath=//*[@text=No more than every: and @hidden =false] could not be found.")

            needUpwardSwipe = False
            for i in range(5):             # ID change in Dagobah
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='%s'] and @top='true']"%TimeList[timeToBeSet],0)):
                    self.ExperitestClient.click("WEB", "xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='%s'] and @top='true']"%TimeList[timeToBeSet])
                    self.result = True
                    # hack : both screens swipe at the same time
                    # if found ,what was being searched then swiping the list back to original state
                    if needUpwardSwipe:
                        self.ExperitestClient.elementSwipe("WEB", "xpath=//*[@id='main']", 0, "Up", 100, 2000)
                    break
                self.ExperitestClient.elementSwipe("WEB", "xpath=//*[@id='main']", 0, "Down", 100, 2000)
                needUpwardSwipe = True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%timeToBeSet)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%timeToBeSet)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Set']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheTimeForOnThenOffIfNoMotion_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnSetButtonToSetTheTimeForOnThenOffIfNoMotion_MotionRule(self):
        """
        Click on the Set button to set the time for On, then off if not motion
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the Set button to set the time for On, then off if not motion")
        try:
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=picker")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"tid=picker" could not be found.')
                raise Exception('Raising the Exception as the element:"id=picker" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "css=DIV.picker_header")) and (self.ExperitestClient.elementGetText("WEB", "css=DIV.picker_header", 0).strip()=="On, then off if no motion"):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"css=DIV.picker_header" could not be found.')
                raise Exception('Raising the Exception as the element:"css=DIV.picker_header" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=set_after_picker_btn",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=set_after_picker_btn",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Set']",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Set']",0,1)
                    time.sleep(1)
                    self.result = True
                    break                  
                               
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=set_after_picker_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=set_after_picker_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnSetButtonToSetTheTimeForOnThenOffIfNoMotion_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnCancelButtonToCancelTheTimeForOnThenOffIfNoMotion_MotionRule(self):
        """
        Click on the Cancel button to set the time for On, then off if not motion
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the Set button to set the time for On, then off if not motion")
        try:
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=picker")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"tid=picker" could not be found.')
                raise Exception('Raising the Exception as the element:"id=picker" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "css=DIV.picker_header")) and (self.ExperitestClient.elementGetText("WEB", "css=DIV.picker_header", 0).strip()=="On, then off if no motion"):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"css=DIV.picker_header" could not be found.')
                raise Exception('Raising the Exception as the element:"css=DIV.picker_header" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=cnl_after_picker_btn",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=cnl_after_picker_btn",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=cnl_after_picker_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=cnl_after_picker_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnCancelButtonToCancelTheTimeForOnThenOffIfNoMotion_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _selectTheSensor_MotionRule(self,WemoFriendlyName):
        """
        Select the Sensor in the Motion Rule Page for the Motion Rule 
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select the Sensor:%s in the Motion Rule Page for the Motion Rule"%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            OFFSET = self.ExperitestClient.p2cy(70)
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Sensor:%s is present in the Motion Rule Page"%WemoFriendlyName)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("WEB",500,500) 
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",OFFSET,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=%s"%WemoFriendlyName)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == True
                self.result = True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready selected for the Rule to apply on the Wemo"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheSensor_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _unselectTheSensor_MotionRule(self,WemoFriendlyName):
        """
        UnSelect the Sensor in the Motion Rule Page for the Motion Rule 
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("UnSelect the Sensor:%s in the Motion Rule Page for the Motion Rule"%WemoFriendlyName)
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Sensor:%s is present in the Motion Rule Page"%WemoFriendlyName)
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=New Maker Sensor Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Maker Sensor Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)     
            
            if (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=%s"%WemoFriendlyName)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=%s"%WemoFriendlyName, 0, "Right", "WEB", "css=SPAN.check_mark", 0, 0) == False
                self.result = True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready unselected for the Rule to apply on the Wemo"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheSensor_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
                
                
####### AUTO OFF TIMER RULE ############# 
                    
                 
    def clickOnWhenTab_TimerRule(self):
        """
        Clicking on the When Tab on the New Timer Rule Page for the Timer Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the When Tab on the New Timer Rule Page for the Timer Rule.")
            for i in range(15):
                self.ExperitestClient.swipe2("Up",500,500)
                if (self.ExperitestClient.isElementFound("WEB", "text=New Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=timer_rule_when")):
                    time.sleep(1)
                    if (self.ExperitestClient.isElementFound("WEB", "css=SPAN.select_day.schedule_container")):
                        self.ExperitestClient.click("WEB", "id=timer_rule_when")
                        time.sleep(1)
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.swipe2("Down",500,500) 
                else:
                        self.ExperitestClient.swipe2("Down",500,500) 
                        
                time.sleep(1)                
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_when" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_when" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnWhenTab_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnWhenTab_SensorRule(self):
        """
        Clicking on the When Tab on the New Motion Rule Page for the Motion Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True 
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the When Tab on the New Motion Rule Page for the Motion Rule.")
            for i in range(15):
                self.ExperitestClient.swipe2("Up",500,500)
                if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New TiMotionmer Rule" or "text=Edit Motion Rule" could not be found.')
            
            for i in range(15):
                self.ExperitestClient.swipe2("Down",700,500)
                if (self.ExperitestClient.isElementFound("WEB", "id=sensors_rule_when")):
                    time.sleep(1)                    
                    if (self.ExperitestClient.isElementFound("WEB", "css=SPAN.select_day.schedule_container")):                   
                        self.ExperitestClient.click("WEB", "id=sensors_rule_when")
                        time.sleep(1)
                        self.result = True
                        break
                    
                else: 
                    self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensors_rule_when" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensors_rule_when" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnWhenTab_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnWhenTab_AwayModeRule(self):
        """
        Clicking on the When Tab on Away Mode Rule Page.
        """
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the When Tab on Away Mode Rule Page.")
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='timer_rule_when']")

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _clickOnWhenTab_NotificationRule(self):
        """
        Click on the When tab in the Notification Rule Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the When tab in the Notification Rule Page.")
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='notify_rule_when']",wait=2)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnWhenTab_TimerRule(self,actionName=None):
        """
        Click on the When tab in the Timer Rule Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the When tab in the Timer Rule Page.")
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='timer_rule_when']")
            time.sleep(4*self.delay)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnWhenTab_MotionRule(self):
        """
        Click on the When tab in the Motion Rule Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the When tab in the motion rule Page.")
            self.ExperitestClient.swipe("Down",200)
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='sensors_rule_when']",wait=4)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnHowOftenTabOfNotificationRulePage_NotificationRule(self):
        """
        Clicking on the How Often Tab of the Notification Rule on the Notification Rule Page.
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the How Often Tab of the Notification Rule on the Notification Rule Page.")

            self.ExperitestClient.swipe("Down",200)
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='how_often']")


        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnHowOftenTabOfNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnWhenTab_Auto_Off_TimerRule(self):
        """
        Click on the When tab in the Auto Off Timer Page
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the When Tab of the Auto Off Timer Page")
        try:
            self.result = None
            self._isAppLaunched()
            assert self.result == True 
            self.ExperitestClient.swipe("Down",300)
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='When' and @css='SPAN.label.upperCase' ]",0)):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe("Down",300)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element: @text=\'When\' could not be found.' )
                raise Exception('Raising the Exception as the element : @text=\'When\' could not be found.' )
                       
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='countdown_when']")
            time.sleep(4*self.delay)
        except:
            self.exception_msg = "Raising the Exception as the when tab can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_Auto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()                 

    def _clickOnWhenTab_NestRule(self):
        """
        Click on the When tab in the Nest Page
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the When Tab of the Nest Page")
        try:
            self.result = None
            self._isAppLaunched()
            assert self.result == True
            self.ExperitestClient.swipe("Down",300)
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='nest_rule_when']")
            time.sleep(4*self.delay)
        except:
            self.exception_msg = "Raising the Exception as the when tab can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_NestRule() encountered and Error")
                self.WeMoAppLog.LogException()


    def _checktheRuleStatusOnRulesPage(self,RuleName,StatusMessage):
        """
        Check the Rule Status in Rules page
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check the status <%s> of Rule <%s> in Rules Main Page"%(RuleName,StatusMessage))

            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s' ]/..//*[@text='%s']"%(RuleName,StatusMessage),0):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down", 500, 0)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the rule status in not matching')
                raise Exception('Raising the Exception as the rule status in not matching')
        except:
            self.exception_msg = "Raising the Exception as the rule status can not be verified."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checktheRuleStatusOnRulesPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _createANameOfRule_NotificationRule(self,newRuleName=None):
        """
        Click on the Rule Name Tab for the notification rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Timer Rule.")
            for i in range(5):
                self.ExperitestClient.swipe2("Down",300,500)
                self.ExperitestClient.swipe2("Down",300,500)
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='notify_rule_rule_name']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=notify_rule_rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=notify_rule_rule_name" could not be found.')


            self._verifyAndClickTheElement("WEB","xpath=//*[@id='notify_rule_rule_name']")
            time.sleep(4*self.delay)
            self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='rule_name']",0,newRuleName)
            time.sleep(6*self.delay)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Save']")
            time.sleep(2*self.delay)
        except:
            self.exception_msg = "Raising the Exception as the name for auto off timer rule can not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createANameOfRule_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createANameOfRule_Auto_Off_Rule(self,newRuleName=None):
        """
        Click on the Rule Name Tab for the Timer Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Timer Rule.")
            for i in range(5):
                self.ExperitestClient.swipe2("Down",300,500)
                self.ExperitestClient.swipe2("Down",300,500)
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Rule Name']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            

            self._verifyAndClickTheElement("WEB","xpath=//*[@id='rule_name']")
            time.sleep(4*self.delay)
            self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='rule_name']",0,newRuleName)
            time.sleep(6*self.delay)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Save']")
            time.sleep(2*self.delay)

        except:
            self.exception_msg = "Raising the Exception as the name for auto off timer rule can not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createANameOfRule_Auto_Off_Rule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _createANameOfRule_AwayModeRule(self,newRuleName=None):
        """
        Click on the Rule Name Tab for the Timer Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Timer Rule.")
            for i in range(5):
                self.ExperitestClient.swipe2("Down",300,500)
                self.ExperitestClient.swipe2("Down",300,500)
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Rule Name']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')


            self._verifyAndClickTheElement("WEB","xpath=//*[@id='timer_rule_rule_name']")
            time.sleep(4*self.delay)
            self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='rule_name']",0,newRuleName)
            time.sleep(6*self.delay)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Save']")
            time.sleep(2*self.delay)

        except:
            self.exception_msg = "Raising the Exception as the name for away mode rule can not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createANameOfRule_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _createANameOfRule_TimerRule(self,newRuleName=None):
        """
        Click on the Rule Name Tab for the Timer Rule.
        """
        try:
            self._isAppLaunched()
            assert self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Timer Rule.")
            for i in range(5):
                self.ExperitestClient.swipe2("Down",350)
                self.ExperitestClient.swipe2("Down",350)
                time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Rule Name']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')


            self._verifyAndClickTheElement("WEB","xpath=//*[@id='timer_rule_rule_name']")
            time.sleep(4*self.delay)
            self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='rule_name']",0,newRuleName)
            time.sleep(6*self.delay)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Save']")
            time.sleep(2*self.delay)

        except:
            self.exception_msg = "Raising the Exception as the name for away mode rule can not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createANameOfRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _createANameOfRule_MotionRule(self,newRuleName=None):
        """
        Click on the Rule Name Tab for the Motion Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Timer Rule.")
            for i in range(5):
                self.ExperitestClient.swipe2("Down",300,500)
                self.ExperitestClient.swipe2("Down",300,500)
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Rule Name']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')


            self._verifyAndClickTheElement("WEB","xpath=//*[@id='sensors_rule_rule_name']")
            time.sleep(4*self.delay)
            self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='rule_name']",0,newRuleName)
            time.sleep(6*self.delay)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Save']")
            time.sleep(2*self.delay)

        except:
            self.exception_msg = "Raising the Exception as the name for away mode rule can not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createANameOfRule_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnRuleNameTab_NotificationRule(self):
        """
        Click on the Rule Name Tab for the Notification Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Notification Rule.")
            for i in range(15):
                self.ExperitestClient.swipe2("Up",500)
                if (self.ExperitestClient.isElementFound("WEB", "text=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
            
            for i in range(15):
                self.ExperitestClient.swipe2("Down",500,500)            
                if (self.ExperitestClient.isElementFound("WEB", "id=notify_rule_rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=notify_rule_rule_name", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=notify_rule_rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=notify_rule_rule_name" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnRuleNameTab_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clickOnMessageTabOfNotificationRulePage_NotificationRule(self):
        """
        Click on the Message Tab for the Notification Rule.
        """
        try:

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Message Tab for the Notification Rule.")
            self.ExperitestClient.swipe2("Down",200,500)
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='notify_message']")

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnMessageTabOfNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _setTheMessageInMessagePage_NotificationRule(self,message="Something happened"):
        """
        Set the message for  the notification rule.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Setting message <%s> in the textbox for the Message Page for the Notification Rule."%(message))
            self.result = None
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='message']"):
                    self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='message']",0,message)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UITextView" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheMessageInMessagePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnHowOftenTab_NotificationRule(self):
        """
        Click on the How Often Tab for the Notification Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the How Often Tab for the Notification Rule.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=how_often")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=how_often", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=how_often" could not be found.')
                raise Exception('Raising the Exception as the element:"id=how_often" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnHowOftenTab_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()


    def clickOnRuleNameTab_Auto_off_TimerRule(self):
        """
        Click on the Rule Name Tab for the Timer Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Auto-Off Timer Rule.")
            for i in range(15):
                self.ExperitestClient.swipe2("Up",500,500)
                if (self.ExperitestClient.isElementFound("WEB", "text=Auto-off Timer",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Auto-Off Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Auto-off Timer" or "text=Edit Auto-Off Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Auto-off Timer" or "text=Edit Auto-Off Timer Rule" could not be found.')
                
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                else:  
                    self.ExperitestClient.swipe2("Down",500,500)
                    time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.') 
                
            for i in range(15):
                self.ExperitestClient.swipe2("Down",500,500)            
                if (self.ExperitestClient.isElementFound("WEB", "id=rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name" could not be found.')
            

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnRuleNameTab_Auto_off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()


                
    def _getTheRuleName_TimerRule(self):
        """
        Get the name of the Rule for the Timer Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            self.ruleName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Rule Name Tab for the Timer Rule.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Timer Rule" or "text=Edit Timer Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=timer_rule_rule_name")):
                    time.sleep(1)
                    self.ruleName = self.ExperitestClient.elementGetText("WEB", "id=timer_rule_rule_name", 0).strip()
                    assert self.ruleName!=None
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_rule_name" could not be found.')
            print self.ruleName
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            time.sleep(1)
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.ruleName = None
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheRuleName_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getTheRuleName_MotionRule(self):
        """
        Get the name of the Rule for the Motion Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            self.ruleName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the name of the Rule for the Motion Rule.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Motion Rule" or "text=Edit Motion Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=sensors_rule_rule_name")):
                    time.sleep(1)
                    self.ruleName = self.ExperitestClient.elementGetText("WEB", "id=sensors_rule_rule_name", 0).strip()
                    assert self.ruleName!=None
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensors_rule_rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensors_rule_rule_name" could not be found.')
            print self.ruleName
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            time.sleep(1)
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.ruleName = None
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheRuleName_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getTheRuleName_AwayModeRule(self):
        """
        Get the name of the Rule for the AwayMode Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            self.ruleName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the name of the Rule for the AwayMode Rule.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Away Mode Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Away Mode Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Away Mode Rule" or "text=Edit Away Mode Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Away Mode Rule" or "text=Edit Away Mode Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=timer_rule_rule_name")):
                    time.sleep(1)
                    self.ruleName = self.ExperitestClient.elementGetText("WEB", "id=timer_rule_rule_name", 0).strip()
                    assert self.ruleName!=None
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_rule_name" could not be found.')
            print self.ruleName
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            time.sleep(1)
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.ruleName = None
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheRuleName_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _getTheRuleName_NotificationRule(self):
        """
        Get the name of the Rule for the Notification Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            self.ruleName = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the name of the Rule for the Notification Rule.")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=New Notification Rule" or "text=Edit Notification Rule" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=notify_rule_rule_name")):
                    time.sleep(1)
                    self.ruleName = self.ExperitestClient.elementGetText("WEB", "id=notify_rule_rule_name", 0).strip()
                    assert self.ruleName!=None
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=notify_rule_rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=notify_rule_rule_name" could not be found.')
            print self.ruleName
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.ruleName = None
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheRuleName_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _toggleSensingOff_Auto_Off_Timer(self):
        # for compatibility with IOS functions not required for android
        self.result = True

    def _verifyRuleCreated(self,ruleName):
        """
        Click on the Rule Name Tab for the Timer Rule.
        @param ruleName: The Rule Name for the Timer Rule
        @type ruleName: String
        """
        try:
            # giving 10 secs for rule engine to restart
            time.sleep(120*self.delay)
            self._isAppLaunched()
            assert self.result == True

            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Rule :%s has been created."%ruleName)

            for i in range(5):
                self.ExperitestClient.swipe2("Down", 500)
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']"%ruleName)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)


        except:
            self.exception_msg = "Raising the Exception as the rule created can not be verified."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRuleCreated() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _createTheNameOfRule_TimerRule(self,ruleName):
        """
        Click on the Rule Name Tab for the Timer Rule.
        @param ruleName: The Rule Name for the Timer Rule 
        @type ruleName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Create the Rule Name:%s for the Timer Rule."%ruleName)

            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=rule_name", 0, ruleName)
                    time.sleep(1)
                    self.ExperitestClient.closeKeyboard() 
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createTheNameOfRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createTheNameOfRule_MotionRule(self,ruleName):
        """
        Click on the Rule Name Tab for the Timer Rule.
        @param ruleName: The Rule Name for the Motion Rule 
        @type ruleName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Create the Rule Name:%s for the Motion Rule."%ruleName)

            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=rule_name", 0, ruleName)
                    time.sleep(1)
                    self.ExperitestClient.closeKeyboard() 
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createTheNameOfRule_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createTheNameOfRule_AwayModeRule(self,ruleName):
        """
        Click on the Rule Name Tab for the AwayMode Rule.
        @param ruleName: The Rule Name for the AwayMode Rule 
        @type ruleName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Create the Rule Name:%s for the AwayMode Rule."%ruleName)

            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=rule_name", 0, ruleName)
                    time.sleep(1)
                    self.ExperitestClient.closeKeyboard()
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createTheNameOfRule_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _createTheNameOfRule_NotificationRule(self,ruleName):
        """
        Click on the Rule Name Tab for the Notification Rule.
        @param ruleName: The Rule Name for the Notification Rule 
        @type ruleName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Create the Rule Name:%s for the Notification Rule."%ruleName)

            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=rule_name", 0, ruleName)
                    time.sleep(1)
                    self.ExperitestClient.closeKeyboard()
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createTheNameOfRule_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _createTheNameOfRule_Auto_off_TimerRule(self,ruleName):
        """
        Click on the Rule Name Tab for the Timer Rule.
        @param ruleName: The Rule Name for the Timer Rule 
        @type ruleName: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Create the Rule Name:%s for the Auto-Off Timer Rule."%ruleName)

            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break

            else:
                
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=rule_name")):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=rule_name", 0, ruleName)
                    time.sleep(1)
                    self.ExperitestClient.closeKeyboard() 
                    time.sleep(1)
                    self.result = True
                    break
                    
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createTheNameOfRule_Auto_off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()       
                
             
    def _confirmChangesForRulesOnRuleNamePage_TimerRule(self):
        """
        Click on the Save button to confirm the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Rule Name Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,500) 
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_save_btn")
                    time.sleep(5)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "text=Save")):
                    self.ExperitestClient.click("WEB", "text=Save")
                    time.sleep(5)
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    time.sleep(10)     
                
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnRuleNamePage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForRulesOnRuleNamePage_TimerRule(self):
        """
        Click on the Cancel button to cancel the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on the Rule Name Page")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForRulesOnRuleNamePage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnRuleNamePage_MotionRule(self):
        """
        Click on the Save button to confirm the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Rule Name Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_save_btn")
                    time.sleep(5)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnRuleNamePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForRulesOnRuleNamePage_MotionRule(self):
        """
        Click on the Cancel button to cancel the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on the Rule Name Page")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForRulesOnRuleNamePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnRuleNamePage_AwayModeRule(self):
        """
        Click on the Save button to confirm the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Rule Name Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_save_btn")
                    time.sleep(5)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnRuleNamePage_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForRulesOnRuleNamePage_AwayModeRule(self):
        """
        Click on the Cancel button to cancel the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on the Rule Name Page")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForRulesOnRuleNamePage_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnRuleNamePage_NotificationRule(self):
        """
        Click on the Save button to confirm the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Rule Name Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_save_btn")
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnRuleNamePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForRulesOnRuleNamePage_NotificationRule(self):
        """
        Click on the Cancel button to cancel the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on the Rule Name Page")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForRulesOnRuleNamePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForMessageOnMessagePage_NotificationRule(self):
        """
        Click on the Save button to confirm the changes on the Message Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Message Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Message")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Message" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Message" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_save_btn")
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForMessageOnMessagePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesForMessageOnMessagePage_NotificationRule(self):
        """
        Click on the Cancel button to confirm the changes on the Message Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Message Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Message")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Message" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Message" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesForMessageOnMessagePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnRuleNamePage_Auto_off_TimerRule(self):
        """
        Click on the Save button to confirm the changes on the Rule Name Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Rule Name Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Rule Name")):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,500) 
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Rule Name" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Rule Name" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=wemo_light")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=wemo_light")
                    time.sleep(5)
                    
                if(self.ExperitestClient.isElementFound("WEB", "id=rule_name_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=rule_name_save_btn")
                    time.sleep(5)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "text=Save")):
                    self.ExperitestClient.click("WEB", "text=Save")
                    time.sleep(5)
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    time.sleep(10)     
                
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=rule_name_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            if (self.ExperitestClient.isElementFound("WEB", "text=Cancel")):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "text=Cancel",0,1)
                time.sleep(1)
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnRuleNamePage_Auto_off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()            
                
                 
    def _selectTheTimeIntervalForMotionInHowOftenPage_NotificationRule(self,timeInterval):
        """
        Select the Time for the Notification Rule in the How Often Page
        """  
        try:
            # ["5 min","10 min","15 min","30 min","1 hr","2 hrs","3 hrs","6 hrs","12 hrs","Once per day / time interval"]
            time_interval_insight = {"Notify every time":"insight_radio1","notify every time":"insight_radio1","5 min":"insight_radio2","10 min":"insight_radio3","15 min":"insight_radio4","30 min":"insight_radio5","1 hr":"insight_radio6","2 hrs":"insight_radio7","3 hrs":"insight_radio8","12 hrs":"insight_radio9","Day":"insight_radio10"}
            time_interval_motion =  {"5 min":"sensor_radio1","10 min":"sensor_radio2","15 min":"sensor_radio3","30 min":"sensor_radio4","1 hr":"sensor_radio5","2 hrs":"sensor_radio6","3 hrs":"sensor_radio7","6 hrs":"sensor_radio8","12 hrs":"sensor_radio9","Once per day / time interval":"sensor_radio10"}
            if timeInterval not in [x.lower() for x in time_interval_insight.keys()]:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the Time should be "notify every time","5 min","10 min","15 min","30 min","1 hr","2 hr","3 hr","12 hr","Day".Time is:%s'%timeInterval)
                raise Exception('Raising the Exception as the Currency should be "notify every time","5 min","10 min","15 min","30 min","1 hr","2 hr","3 hr","12 hr","Day".Time is:%s'%timeInterval)
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the Time for the notification frequency.")

            for i in range(2):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='No more than every:' and @hidden ='false']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:xpath=//*[@text=No more than every: and @hidden =false] could not be found.")
                raise Exception("Raising the Exception as the element:xpath=//*[@text=No more than every: and @hidden =false] could not be found.")
            needUpwardSwipe = False
            # ID change in Dagobah
            # till dagobah : xpath=//*[@text='%s' and ./following-sibling::*[./*[@name='sensor_how_often']] and @top='true']
            # dabogah      : xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='insight_radio1'] and @top='true']
            for i in range(5):
                # insight notification page
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='%s'] and @top='true']"%time_interval_insight[timeInterval],0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("App is on insight notification frequency selection page.")
                    self.ExperitestClient.click("WEB", "xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='%s'] and @top='true']"%time_interval_insight[timeInterval])
                    self.result = True
                    if needUpwardSwipe:
                        self.ExperitestClient.elementSwipe("WEB", "xpath=//*[@id='sensor_boxscroll']", 0, "Up", 0, 2000)
                    break
                # self.ExperitestClient.elementSwipe("WEB", "xpath=//*[@id='sensor_boxscroll']", 0, "Down", 0, 2000)
                # needUpwardSwipe = True
                # motion notification page
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='%s'] and @top='true']"%time_interval_motion[timeInterval],0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("App is on motion notification frequency selection page.")
                    # ID change in Dagobah
                    # till dagobah  : xpath=//*[@text='%s' and @hidden='false']
                    # dagobah  : xpath=//*[@text='%s' and and @top='true']
                    self.ExperitestClient.click("WEB", "xpath=//*[@nodeName='LABEL' and ./preceding-sibling::*[@id='%s'] and @top='true']"%time_interval_motion[timeInterval])
                    self.result = True
                    if needUpwardSwipe:
                        self.ExperitestClient.elementSwipe("WEB", "xpath=//*[@id='sensor_boxscroll']", 0, "Up", 0, 2000)
                    break

                self.ExperitestClient.elementSwipe("WEB", "xpath=//*[@id='sensor_boxscroll']", 0, "Down", 0, 2000)
                needUpwardSwipe = True
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%timeInterval)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%timeInterval)
            # ID change in Dagobah
            self._verifyAndClickTheElement("WEB","xpath=//*[@id='sensor_set_ho_btn']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheTimeIntervalForMotionInHowOftenPage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmSettingNotificationTimeInHowOftenTab_NotificationRule(self):
        """
        Confirm setting NotificationTime
        """  
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Confirm setting NotificationTime")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.scrollPickerContainer.picker",1)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=picker" could not be found.')
                raise Exception('Raising the Exception as the element:"id=picker" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=set_ho_btn",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=set_ho_btn",0,1)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB","id=sensor_set_ho_btn",0)):
                    self.ExperitestClient.click("WEB", "id=sensor_set_ho_btn",0,1)
                    self.result = True
                    break    
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=set_ho_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=set_ho_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmSettingNotificationTimeInHowOftenTab_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _cancelSettingNotificationTimeInHowOftenTab_NotificationRule(self):
        """
        Cancel setting NotificationTime
        """  
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Cancel setting NotificationTime")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=picker",0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=picker" could not be found.')
                raise Exception('Raising the Exception as the element:"id=picker" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=cnl_ho_btn",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=cnl_ho_btn",0,1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=cnl_ho_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=cnl_ho_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelSettingNotificationTimeInHowOftenTab_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOn_SimpleRule(self):
        """
        Set the Timer On on the When Page for the Simple Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On on the When Page for the Simple Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the Timer On on the When Page for the Simple Rule")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=When")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=When" could not be found.')
                raise Exception('Raising the Exception as the element:"text=When" could not be found.')     
            
            if not (self.ExperitestClient.isElementFound("WEB", "css=SPAN.time_active", 0)):
                time.sleep(1)
                assert self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "css=DIV.time.clock_not_active", 0, 1)
                time.sleep(1)
                assert self.ExperitestClient.isElementFound("WEB", "css=SPAN.time_active", 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isElementFound("WEB", "css=SPAN.time_active", 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOn_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOn_SimpleRule(self):
        """
        Set the Sunrise Sunset Timer On on the When Page for the Simple Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On on the When Page for the Simple Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On on the When Page for the Simple Rule")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=When")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=When" could not be found.')
                raise Exception('Raising the Exception as the element:"text=When" could not be found.')     
            
            if not (self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0)):
                time.sleep(1)
                assert self.ExperitestClient.isElementFound("WEB", "css=SPAN.time_active", 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_startTime", 0, 1)
                time.sleep(1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0) == True
                self.result = True
            else:
                time.sleep(1)
                assert self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOnAction_Auto_Off_Timer(self):
        """
        Set the Timer On for the On Action on the When Page for the Auto-Off Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the Auto-Off Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=On", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is already On for the On Action the Auto-Off Timer Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOffAction_Auto_Off_TimerRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the Auto-Off Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for Off Action on the When Page for the Auto-Off Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=Off", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is already On for the Off Action the Auto-Off Timer Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_Auto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
                 
    def _verifyTheSunriseSunsetTimerOn_SimpleRule(self):
        """
        Verify the Sunrise Sunset Timer On on the When Page for the Simple Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On on the When Page for the Simple Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=When")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=When" could not be found.')
                raise Exception('Raising the Exception as the element:"text=When" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunrise_SimpleRule(self):
        """
        Select Sunrise for On Action for the Simple Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for On Action for the Simple Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=When")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=When" could not be found.')
                raise Exception('Raising the Exception as the element:"text=When" could not be found.')
            
            if not (self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the Simple Rule")
                raise Exception("The Sunrise/Sunset Timer is not On for the Simple Rule")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=Sunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=Sunrise", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=Sunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=Sunrise" could not be found.')   
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunrise_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunset_SimpleRule(self):
        """
        Select Sunset for On Action for the Simple Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for On Action for the Simple Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=When")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=When" could not be found.')
                raise Exception('Raising the Exception as the element:"text=When" could not be found.')
            
            if not (self.ExperitestClient.isElementFound("WEB", "css=SPAN.sun_active", 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the Simple Rule")
                raise Exception("The Sunrise/Sunset Timer is not On for the Simple Rule")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=Sunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=Sunset", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=Sunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=Sunset" could not be found.')   
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunset_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOnAction_TimerRule(self):
        """
        Set the Timer On for the On Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=On", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the On Action the Timer Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOffAction_TimerRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for Off Action on the When Page for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=Off", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Off Action the Timer Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOnAction_TimerRule(self):
        """
        Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_startTime", 0, 1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the On Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOffAction_TimerRule(self):
        """
        Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_endTime", 0, 1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the Off Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOnAction_TimerRule(self):
        """
        Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOffAction_TimerRule(self):
        """
        Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
        
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOnAction_AwayModeRule(self):
        """
        Set the Timer On for the On Action on the When Page for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=On", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the On Action the Away Mode Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOffAction_AwayModeRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for Off Action on the When Page for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=Off", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Off Action the Away Mode Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOnAction_AwayModeRule(self):
        """
        Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_startTime", 0, 1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the On Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOffAction_AwayModeRule(self):
        """
        Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_endTime", 0, 1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the Off Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOnAction_AwayModeRule(self):
        """
        Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOffAction_AwayModeRule(self):
        """
        Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Away Mode Rule
        """
        self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOnAction_NotificationRule(self):
        """
        Set the Timer On for the On Action on the When Page for the Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_startTime", 0, 1)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the On Action the Sensor Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOffAction_NotificationRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for Off Action on the When Page for the Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            self.ExperitestClient.swipe2("Down",500,500)
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_endTime", 0, 1)
                time.sleep(1)
                if self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True:
                    self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Off Action the Sensor Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOnAction_NotificationRule(self):
        """
        Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_startTime", 0, 1)
                time.sleep(1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the On Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOnAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOffAction_NotificationRule(self):
        """
        Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            self.ExperitestClient.swipe2("Down",500,500)
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_endTime", 0, 1)
                time.sleep(1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the Off Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOffAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOnAction_NotificationRule(self):
        """
        Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOnAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOffAction_NotificationRule(self):
        """
        Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    time.sleep(1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOffAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def _selectSunriseForOnAction_TimerRule(self):
        """
        Select Sunrise for On Action for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for On Action for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunrise", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunrise" could not be found.')   
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOnAction_TimerRule(self):
        """
        Select Sunset for On Action for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for On Action for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunset", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunriseForOffAction_TimerRule(self):
        """
        Select Sunrise for Off Action for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for Off Action for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunrise", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunrise" could not be found.')           
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOffAction_TimerRule(self):
        """
        Select Sunset for Off Action for the Timer Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for Off Action for the Timer Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunset", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunriseForOnAction_AwayModeRule(self):
        """
        Select Sunrise for On Action for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for On Action for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunrise", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunrise" could not be found.')   
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOnAction_AwayModeRule(self):
        """
        Select Sunset for On Action for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for On Action for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunset", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunriseForOffAction_AwayModeRule(self):
        """
        Select Sunrise for Off Action for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for Off Action for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunrise", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunrise" could not be found.')           
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOffAction_AwayModeRule(self):
        """
        Select Sunset for Off Action for the Away Mode Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for Off Action for the Away Mode Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunset", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                             
    def _setTheTimerOnForOnAction_SensorRule(self):
        """
        Set the Timer On for the On Action on the When Page for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=On", 0, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the On Action the Sensor Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimerOnForOffAction_SensorRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Timer On for Off Action on the When Page for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            self.ExperitestClient.swipe2("Down",500,500)
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.clickInsideAnElement2_5("WEB", "text=Off", 1, "Right", "WEB", "css=DIV.time.clock_not_active", 0, 0)
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Off Action the Sensor Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOnAction_SensorRule(self):
        """
        Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the On Action on the Start Time, Days Page for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_startTime", 0, 1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the On Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOnAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheSunriseSunsetTimerOnForOffAction_SensorRule(self):
        """
        Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Off Action on the Start Time, Days Page for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')     
            
            self.ExperitestClient.swipe2("Down",500,500)
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.time_active", 0, 0) == True
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=toggleTS_endTime", 0, 1)
                self.clickOnTheOkButtonOnLocationAlertPopUp()
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply for the Off Action")
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOffAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOnAction_SensorRule(self):
        """
        Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On on for the On Action the When Page for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=On" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:    
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOnAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheSunriseSunsetTimerOnForOffAction_SensorRule(self):
        """
        Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Sunrise Sunset Timer On for the Off Action on the When Page for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                    time.sleep(1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Off" or "css=SPAN.sun_active" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheSunriseSunsetTimerOnForOffAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _selectSunriseForOnAction_SensorRule(self):
        """
        Select Sunrise for On Action for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for On Action for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunrise", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunrise" could not be found.')   
        except:
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOnAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOnAction_SensorRule(self):
        """
        Select Sunset for On Action for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for On Action for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunset", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOnAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunriseForOffAction_SensorRule(self):
        """
        Select Sunrise for Off Action for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for Off Action for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunrise", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunrise" could not be found.')           
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOffAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOffAction_SensorRule(self):
        """
        Select Sunset for Off Action for the Sensor Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for Off Action for the Sensor Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunset", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOffAction_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunriseForOnAction_NotificationRule(self):
        """
        Select Sunrise for On Action for the Sensor Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for On Action for the Sensor Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunrise", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunrise" could not be found.')   
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOnAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOnAction_NotificationRule(self):
        """
        Select Sunset for On Action for the Sensor Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for On Action for the Sensor Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=On", 0, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the ON Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the ON Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=startSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=startSunset", 0, 1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=startSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=startSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOnAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunriseForOffAction_NotificationRule(self):
        """
        Select Sunrise for Off Action for the Sensor Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunrise for Off Action for the Sensor Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunrise",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunrise", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunrise" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunrise" could not be found.')           
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunriseForOffAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectSunsetForOffAction_NotificationRule(self):
        """
        Select Sunset for Off Action for the Sensor Notification Rule
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select Sunset for Off Action for the Sensor Notification Rule")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "text=Off", 1, "Right", "WEB", "css=SPAN.sun_active", 0, 0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The Sunrise/Sunset Timer is not On for the OFF Action")
                raise Exception("The Sunrise/Sunset Timer is not On for the OFF Action")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=endSunset",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=endSunset", 0, 1)
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=endSunset" could not be found.')
                raise Exception('Raising the Exception as the element:"id=endSunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectSunsetForOffAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnTimeTabOfWhenRulePage_SimpleRule(self):
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("clicking on <on at> or <off at> depending upon the previous step in the step file for timer rule.")
            # self._verifyAndClickTheElement("WEB","xpath=//*[contains(@text,'at')]")
            self.set_start_time = True
            self.set_end_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for auto off timer rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnTimeTabOfWhenRulePage_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnStartTimeTabOfWhenRulePage_TimerRule(self):
        try:

            self.set_start_time = True
            self.set_end_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for auto off timer rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnEndTimeTabOfWhenRulePage_TimerRule(self):
        try:
            self.set_end_time = True
            self.set_start_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for auto off timer rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheTimeInWhenPage_SimpleAndTimerRule(self,hour,minutes):
        """
        Set the start time in the Time textbox for the When Page for the Timer Rule.
        @param actionName: The action for which the time is set 
        @type actionName: String
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None

            Hour = str(hour)
            Minutes = str(minutes)

            if self.set_start_time:
                xpath = "xpath=//*[@id='start_time']"
            elif self.set_end_time:
                xpath = "xpath=//*[@id='end_time']"

            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the time-%s:%s in the Time textbox for the When Page for the Timer Rule for %s."%(Hour,Minutes,xpath))

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", xpath,0)):
                    self.ExperitestClient.elementSendText("WEB", xpath, 0, "%s:%s"%(Hour,Minutes))
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=start_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=start_time" could not be found.')
            if self.set_start_time:
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='start_time']"):
                    self.ExperitestClient.click("WEB","xpath=//*[@id='start_time']")
                    self._closeDeviceKeyboard()
                    # ID change in Dagobah
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@id,'selector-set-btn') and @onScreen='true']"):
                        self.ExperitestClient.click("WEB","xpath=//*[contains(@id,'selector-set-btn') and @onScreen='true']")
            elif self.set_end_time:
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='end_time']"):
                    self.ExperitestClient.click("WEB","xpath=//*[@id='end_time']")
                    self._closeDeviceKeyboard()
                    # ID change in Dagobah
                    # till dagobah : xpath=//*[@text='Set' and @top='true']
                    # dagobah : xpath=//*[contains(@id,'selector-set-btn') and @onScreen='true']
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@id,'selector-set-btn') and @onScreen='true']"):
                        self.ExperitestClient.click("WEB","xpath=//*[contains(@id,'selector-set-btn') and @onScreen='true']")

            self.set_start_time = False
            self.set_end_time = False
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_SimpleAndTimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnStartTimeTabOfWhenRulePage_NotificationRule(self):
        try:
            self.set_start_time = True
            self.set_end_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for auto off timer rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnEndTimeTabOfWhenRulePage_NotificationRule(self):
        try:
            self.set_end_time = True
            self.set_start_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for auto off timer rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _setTheTimeInWhenPage_NotificationRule(self,hour,minutes):
        """
        Set the start time in the Time textbox for the When Page for the Timer Rule.
        @param actionName: The action for which the time is set
        @type actionName: String
        @param hour: The hour when the rule will be applied
        @type hour: String
        @param minutes: The minute
        @type minutes: String
        @param am_pm: AM or PM
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None

            Hour = str(hour)
            Minutes = str(minutes)

            if self.set_start_time:
                xpath = "xpath=//*[@id='start_time']"
            elif self.set_end_time:
                xpath = "xpath=//*[@id='end_time']"

            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the time-%s:%s in the Time textbox for the When Page for the Timer Rule for %s."%(Hour,Minutes,xpath))

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", xpath,0)):
                    self.ExperitestClient.elementSendText("WEB", xpath, 0, "%s:%s"%(Hour,Minutes))
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=start_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=start_time" could not be found.')
            self._closeDeviceKeyboard()
            self.set_start_time = False
            self.set_end_time = False
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()


    def _clickOnStartTimeTabOfWhenRulePage_MotionRule(self):
        try:
            self.set_start_time = True
            self.set_end_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for Motion Rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnEndTimeTabOfWhenRulePage_MotionRule(self):
        try:
            self.set_end_time = True
            self.set_start_time = False
        except:
            self.exception_msg = "Raising the Exception as the timer for on at for Motion Rule can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _setTheTimeInWhenPage_MotionRule(self,hour,minutes):
        """
        Set the start time in the Time textbox for the When Page for the MotionRule.
        @param actionName: The action for which the time is set
        @type actionName: String
        @param hour: The hour when the rule will be applied
        @type hour: String
        @param minutes: The minute
        @type minutes: String
        @param am_pm: AM or PM
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True

            self.result = None

            Hour = str(hour)
            Minutes = str(minutes)

            if self.set_start_time:
                xpath = "xpath=//*[@id='start_time']"
            elif self.set_end_time:
                xpath = "xpath=//*[@id='end_time']"

            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the time-%s:%s in the Time textbox for the When Page for the Motion Rule for %s."%(Hour,Minutes,xpath))

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", xpath,0)):
                    self.ExperitestClient.elementSendText("WEB", xpath, 0, "%s:%s"%(Hour,Minutes))
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element %s could not be found.'%xpath)
                raise Exception('Raising the Exception as the element %scould not be found.'%xpath)
            self._closeDeviceKeyboard()
            self.set_start_time = False
            self.set_end_time = False
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnDoneButtonToSetTheTime(self):
        # self._verifyAndClickTheElement("WEB","xpath=//*[@text='Done']")
        # time.sleep(5*self.delay)
        self.result = True



                 
    def _setTheStartTime_SensorRule(self,hour,minutes,am_pm):
        """
        Set the start time in the Time textbox for the Motion Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            AM_PM = str(am_pm).upper()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the start time-%s:%s %s in the Time textbox for the When Page for the Sensor Rule."%(Hour,Minutes,AM_PM))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=start_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=start_time", 0, "%s:%s %s"%(Hour,Minutes,AM_PM))
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=start_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=start_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheStartTime_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheEndTime_SensorRule(self,hour,minutes,am_pm):
        """
        Set the end time in the Time textbox for the Motion Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            AM_PM = str(am_pm).upper()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the end time-%s:%s %s in the Time textbox for the When Page for the Sensor Rule."%(Hour,Minutes,AM_PM))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=end_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=end_time", 0, "%s:%s %s"%(Hour,Minutes,AM_PM))
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=end_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=end_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheEndTime_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheStartTime_AwayModeRule(self,hour,minutes,am_pm):
        """
        Set the start time in the Time textbox for the Away Mode Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            AM_PM = str(am_pm).upper()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the start time-%s:%s %s in the Time textbox for the When Page for the Away Mode Rule."%(Hour,Minutes,AM_PM))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=start_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=start_time", 0, "%s:%s %s"%(Hour,Minutes,AM_PM))
                    time.sleep(1)
                    self.result = True
                    self.ExperitestClient.closeKeyboard()    
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=start_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=start_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheStartTime_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheEndTime_AwayModeRule(self,hour,minutes,am_pm):
        """
        Set the end time in the Time textbox for the Away Mode Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            AM_PM = str(am_pm).upper()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the end time-%s:%s %s in the Time textbox for the When Page for the Away Mode Rule."%(Hour,Minutes,AM_PM))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=end_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=end_time", 0, "%s:%s %s"%(Hour,Minutes,AM_PM))
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=end_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=end_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheEndTime_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheStartTime_NotificationRule(self,hour,minutes,am_pm):
        """
        Set the start time in the Time textbox for the Notification Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            AM_PM = str(am_pm).upper()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the start time-%s:%s %s in the Time textbox for the When Page for the Notification Rule."%(Hour,Minutes,AM_PM))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=start_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=start_time", 0, "%s:%s %s"%(Hour,Minutes,AM_PM))
                    time.sleep(1)
                    self.ExperitestClient.closeKeyboard()
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=start_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=start_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheStartTime_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _setTheEndTime_NotificationRule(self,hour,minutes,am_pm):
        """
        Set the end time in the Time textbox for the Notification Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        @param am_pm: AM or PM 
        @type am_pm: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            AM_PM = str(am_pm).upper()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the end time-%s:%s %s in the Time textbox for the When Page for the Notification Rule."%(Hour,Minutes,AM_PM))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=end_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=end_time", 0, "%s:%s %s"%(Hour,Minutes,AM_PM))
                    time.sleep(1)
                    self.result = True
                    self.ExperitestClient.closeKeyboard()
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=end_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=end_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheEndTime_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _setStartTime_Auto_Off_TimerRule(self,hour,minutes):
        """
        Set the start time in the Time textbox for the When Page for the Auto-Off Timer Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the start time-%s:%s in the Time textbox for the When Page for the Auto Timer Rule."%(Hour,Minutes))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=start_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=start_time", 0, "%s:%s"%(Hour,Minutes))
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=end_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=end_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setStartTime_Auto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()   
        
    def _setEndTime_Auto_Off_TimerRule(self,hour,minutes):
        """
        Set the end time in the Time textbox for the When Page for the Auto-Off Timer Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Set the end time-%s:%s in the Time textbox for the When Page for the Auto Timer Rule."%(Hour,Minutes))
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Start Time, Days")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time, Days" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=end_time",0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=end_time", 0, "%s:%s"%(Hour,Minutes))
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=end_time" could not be found.')
                raise Exception('Raising the Exception as the element:"id=end_time" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setEndTime_Auto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()  
                
                
                 
    def _sensingAllDayOn_SensorRule(self):
        """
        Set All Day to On for the Motion Rule to take place.
        """
        try:
            self.result = None
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Sensing all day']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Sensing all day" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sensing all day" could not be found.')

            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']"):
                self.ExperitestClient.click("WEB", "xpath=//*[@text='off' and @top='true']",0,1)
                assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']")) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The All Day option for the Motion Rule is turned on.")
                self.result = True
            else:
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The All Day option for the Motion Rule is allready on.")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _sensingAllDayOn_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _sensingAllDayOff_SensorRule(self):
        """
        Set All Day to Off for the Sensor Rule to take place.
        """
        try:
            self.result = None
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Sensing all day']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Sensing all day" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sensing all day" could not be found.')

            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']"):
                self.ExperitestClient.click("WEB", "xpath=//*[@text='on' and @top='true']",0,1)
                assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']")) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The All Day option for the Motion Rule is turned Off.")
                self.result = True
            else:
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The All Day option for the Motion Rule is allready Off.")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _sensingAllDayOff_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _sensingAllDayOff_MotionRule(self):
        """
        Set All Day to Off for the Motion Rule to take place.
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info('Set All Day to Off for the Motion Rule to take place.')
            self.result = None
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Sensing all day']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Sensing all day" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sensing all day" could not be found.')

            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']"):
                self.ExperitestClient.click("WEB", "xpath=//*[@text='on' and @top='true']",0,1)
                assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']")) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The All Day option for the Motion Rule is turned Off.")
                self.result = True
            else:
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The All Day option for the Motion Rule is allready Off.")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _sensingAllDayOff_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _sensingAllDayOn_NotificationRule(self):
        """
        Set All Day to On for the Notification Rule to take place.
        """
        try:
            self.result = None
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Sensing all day']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Sensing all day" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sensing all day" could not be found.')

            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']"):
                self.ExperitestClient.click("WEB", "xpath=//*[@text='off' and @top='true']",0,1)
                assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']")) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The All Day option for the Motion Rule is turned on.")
                self.result = True
            else:
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The All Day option for the Motion Rule is allready on.")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _sensingAllDayOn_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _sensingAllDayOff_NotificationRule(self):
        """
        Set All Day to Off for the Notification Rule to take place.
        """
        try:
            self.result = None
            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Sensing all day']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Sensing all day" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Sensing all day" could not be found.')
            
            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='on' and @top='true']"):
                self.ExperitestClient.click("WEB", "xpath=//*[@text='on' and @top='true']",0,1)
                assert (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']")) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The All Day option for the Motion Rule is turned Off.")
                self.result = True
            else:
                if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='off' and @top='true']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The All Day option for the Motion Rule is allready Off.")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _sensingAllDayOff_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
 
    def _handlePushNotification(self,message=None):
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Waiting for Push notification.")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK']"):
                    try:
                        native_text = self.ExperitestClient.getText("NATIVE")
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info('Push Notification says <%s>'%str(native_text))
                    except:
                        pass
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']")
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info('Push notification came and handled.')
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Push notification dint come.')
            #     raise Exception('Raising the Exception as the push notification dint come.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _handlePushNotification() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyRulesLog(self):
        """
        Verify Rules log
        """
        self.result = None
        self.exception_msg = None
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check logs in rules detail page")
            self.ExperitestClient.swipe("Down", 200)
            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Log']",0):
                for i in range(5):
                    if self.ExperitestClient.isElementFound("WEB", "xpath=//*[contains(@text,'event')]",0):
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.swipe("Down", 200)
                else:
                    self.exception_msg = "Failed to identify notification events"
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[contains(@text,event)]" could not be found.')
                    raise Exception('Raising the Exception as the element:"xpath=//*[contains(@text,event)]" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRulesLog() encountered and Error")
                self.WeMoAppLog.LogException()

                
    def _selectWeekday(self):
        """
        Select the schedule as Weekday in the When page of the Timer or Motion Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the schedule as Weekday in the When page of the Timer or Motion Rule.")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=schedule")):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=schedule" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Mon", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Mon")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Mon", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Mon", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Monday is allready selected for the Rule to apply")
                self.result = True
                
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Tue", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Tue")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Tue", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Tue", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Tuesday is allready selected for the Rule to apply")
                self.result = True
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Wed", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Wed")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Wed", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Wed", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Wednesday is allready selected for the Rule to apply")
                self.result = True
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Thu", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Thu")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Thu", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Thu", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Thursday is allready selected for the Rule to apply")
                self.result = True
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Fri", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Fri")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Fri", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Fri", 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Friday is allready selected for the Rule to apply")
                self.result = True
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Sat", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Sat")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Sat", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Sat", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Saturday is allready unselected for the Rule to apply")
                self.result = True
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=Sun", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=Sun")
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=Sun", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=Sun", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Sunday is allready unselected for the Rule to apply")
                self.result = True    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectWeekday() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectDaily(self):
        """
        Select the schedule as Daily in the When page of the Timer or Motion Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the schedule as Weekday in the When page of the Timer or Motion Rule.")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=schedule")):                    
                    DAYS_SELECTED = self.ExperitestClient.elementGetProperty("WEB","id=schedule",0,"innerHTML")
                    for VALUE in DAYS_SELECTED.splitlines():
                    
                        if "div_bg_green" in VALUE:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("%s is already selected for the Rule to apply"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""))
                                self.result = True
                                
                        elif "div_bg_white" in VALUE:
                            if self.ExperitestClient.isFoundIn("WEB", "id=%s"%VALUE.strip().strip().split(" ")[2].split("=")[1].strip("\""), 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0):
                                self.ExperitestClient.click("WEB", "id=%s"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""),0,1)
                                time.sleep(2)
                                assert self.ExperitestClient.isFoundIn("WEB", "id=%s"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""), 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0) == True
                                self.result = True 
                    break
                else:    
                    self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=schedule" could not be found.')
        
        
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectDaily() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectWeekend(self):
        """
        Select the schedule as Weekend in the When page of the Timer or Motion Rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the schedule as Weekend in the When page of the Timer or Motion Rule.")
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=schedule")):                    
                    DAYS_SELECTED = self.ExperitestClient.elementGetProperty("WEB","id=schedule",0,"innerHTML")
                    for VALUE in DAYS_SELECTED.splitlines():
                        if "div_bg_green" in VALUE:
                            if str.upper(VALUE.strip().split(" ")[2].split("=")[1].strip("\"")) == "SAT"  or str.upper(VALUE.strip().split(" ")[2].split("=")[1].strip("\"")) == "SUN":
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Info("%s is already selected for the Rule to apply"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""))
                                    self.result = True
                            else:        
                                if self.ExperitestClient.isFoundIn("WEB", "id=%s"%VALUE.strip().strip().split(" ")[2].split("=")[1].strip("\""), 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0):
                                    self.ExperitestClient.click("WEB", "id=%s"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""),0,1)
                                    time.sleep(2)
                                    assert self.ExperitestClient.isFoundIn("WEB", "id=Tue", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                                    self.result = True         
        
                        elif "div_bg_white" in VALUE:
                            if str.upper(VALUE.strip().split(" ")[2].split("=")[1].strip("\"")) == "SAT"  or str.upper(VALUE.strip().split(" ")[2].split("=")[1].strip("\"")) == "SUN":
                                if self.ExperitestClient.isFoundIn("WEB", "id=%s"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""), 0, "Inside", "WEB", "css=DIV.div_bg_green", 0, 0):
                                    self.ExperitestClient.click("WEB", "id=%s"%VALUE.strip().split(" ")[2].split("=")[1].strip("\""),0,1)
                                    time.sleep(2)
                                    assert self.ExperitestClient.isFoundIn("WEB", "id=Tue", 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                                    self.result = True     
                    break
                else:    
                    self.ExperitestClient.swipe2("Down",500,500)
    
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=schedule" could not be found.')
            
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectWeekend() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectMultipleDays(self,*days):
        """
        Select the individual day in the When page of the Timer or Motion Rule.
        """
        try:
            self.result = None

            self._isAppLaunched()
            assert self.result == True
            self.ExperitestClient.swipe("Down",200)
            DayList = {"Monday":"M","Tuesday":"T","Wednesday":"W","Thursday":"Th","Friday":"F","Saturday":"Sa","Sunday":"Su"}

            if type(days[0]) is list:
                for day in days[0]:
                    if day in DayList:
                        DayList.pop(day,None)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The %s should be a part of selected day"%day)
            else:
                for day in days:
                    if day in DayList:
                        DayList.pop(day,None)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The %s should be a part of selected day"%day)

            # YOffset_Of_Days = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@class='BELMultiSegmentControl']", 0, "y"))

            for day_to_be_unchecked,day_accessibilityLabel in DayList.items():
                self.ExperitestClient.click("WEB","xpath=//*[@text='%s']"%day_accessibilityLabel,0,1)

            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectMultipleDays() encountered and Error")
                self.WeMoAppLog.LogException()


    def _unselectTheDevicesAlreadySetforAwayMode(self):
        """
        Un select All the Devices Marked for Away Mode by Default
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Un select All the Devices which are already a part of Away Mode Rule")

            self._isAppLaunched()
            assert self.result == True

            trial_Attept = 0

            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@class='check_mark' and @onScreen='true']",0):
                    self.ExperitestClient.click("WEB","xpath=//*[@class='check_mark' and @onScreen='true']",0,1)
                else:
                    break
            else:
                self.exception_msg = "Failed to Identify/Unselect the WeMo devices which needs to be removed from Away Mode Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("15 devices are moved out of list already")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheDevicesAlreadySetforAwayMode() encountered and Error")
                self.WeMoAppLog.LogException()


    def _selectIndividualDay(self,day):
        """
        Select the individual day in the When page of the Timer or Motion Rule.
        """
        try:
            self.result = None

            self._isAppLaunched()
            assert self.result == True

            DayList = {"Monday":"M","Tuesday":"T","Wednesday":"W","Thursday":"Th","Friday":"F","Saturday":"Sa","Sunday":"Su"}
            if day.strip() not in DayList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right day. The day can  be "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"')
                raise Exception('Please give the right time. The time can  be "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"')

            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Select the individual day:%s in the When page of the Timer or Motion Rule."%day)
            self.ExperitestClient.swipe("Down",200)
            for day_to_be_unchecked,day_accessibilityLabel in DayList.items():
                if day != day_to_be_unchecked:
                    self.ExperitestClient.click("WEB","xpath=//*[@text='%s']"%day_accessibilityLabel,0,1)

            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectIndividualDay() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _unselectIndividualDay(self,day):
        """
        UnSelect the individual day in the When page.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            DayList = {"Monday":"Mon","Tuesday":"Tue","Wednesday":"Wed","Thursday":"Thu","Friday":"Fri","Saturday":"Sat","Sunday":"Sun"}
            print DayList[day]
            if day.strip() not in DayList:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Please give the right day. The day can  be "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"')
                raise Exception('Please give the right time. The time can  be "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"')
            
            self.result = None            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Select the individual day:%s in the When page of the Timer or Motion Rule."%DayList[day])
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=schedule")):
                    self.result = True
                    break
                time.sleep(1)
                self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=schedule" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("WEB", "id=%s"%DayList[day], 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0)):
                time.sleep(1)
                self.ExperitestClient.click("WEB", "id=%s"%DayList[day])
                time.sleep(1)
                assert self.ExperitestClient.isFoundIn("WEB", "id=%s"%DayList[day], 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("WEB", "id=%s"%DayList[day], 0, "Inside", "WEB", "css=DIV.div_bg_white", 0, 0) == True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("%s is allready unselected for the Rule to apply"%DayList[day])
                self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectIndividualDay() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnWhenPage_SimpleRule(self):
        """
        Click on the Done button to confirm the changes on the When Page for the Simple Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on the When Page for the Simple Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=when_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=when_save_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=when_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=when_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnWhenPage_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnWhenPage_TimerRule(self):
        """
        Click on the Done button to confirm the changes on the When Page for the Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on the When Page for the Timer Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Done")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Done")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element: "text=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Done" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()    
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnWhenPage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnWhenPage_MotionRule(self):
        """
        Click on the Done button to confirm the changes on the When Page for the Motion Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on the When Page for the Motion Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=sensors_rule_when_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=sensors_rule_when_save_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensors_rule_when_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensors_rule_when_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnWhenPage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnWhenPage_AwayModeRule(self):
        """
        Click on the Done button to confirm the changes on the When Page for the Away Mode Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on the When Page for the Away Mode Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=timer_rule_when_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=timer_rule_when_save_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_when_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_when_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnWhenPage_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesForRulesOnWhenPage_NotificationRule(self):
        """
        Click on the Done button to confirm the changes on the When Page for the Notification Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on the When Page for the Notification Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=notify_rule_when_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=notify_rule_when_save_btn")
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=notify_rule_when_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=notify_rule_when_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnWhenPage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _confirmChangesForRulesOnWhenPage_Auto_off_TimerRule(self):
        """
        Click on the Done button to confirm the changes on the When Page for Auto off Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Done button to confirm the changes on the When Page for the Auto off Timer  Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=sensors_rule_when_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=sensors_rule_when_save_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensors_rule_when_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensors_rule_when_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesForRulesOnWhenPage_Auto_off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _confirmChangesToCreateRule(self):
        """
        Click on the Save button to confirm the changes to create a Timer Rule
        """
        try:
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Save']")
            for i in range(20):  # large number to give enough time to rule to get saved
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='add_new_icon']"):
                    self.result = True
                    break
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='OK' and @top='true']"):
                    # self.ExperitestClient.click("WEB","xpath=//*[@text='OK' and @top='true']")
                    self.result = True
                    break
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Sleeping for 10s while rule is being saved.')
                time.sleep(20*self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Warning('Raising the warning as the rule took more than 200 secs to save.')
        except:
            self.exception_msg = "Raising the Exception as the the rule can not be saved."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesToCreateRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesToCreateTimerRule(self):
        """
        Click on the Cancel button to cancel the changes to create a Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes to create a Timer Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=timer_rule_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=timer_rule_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesToCreateTimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesToCreateMotionRule(self):
        """
        Click on the Save button to confirm the changes to create a Motion Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes to create a Motion Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=sensors_rule_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=sensors_rule_save_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensors_rule_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensors_rule_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesToCreateMotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 

    def _cancelChangesToCreateRule(self):
        self._clickOnCancelButtonToCancelChangesInWeMoApp()

    def _clickOnCancelButtonToCancelChangesInWeMoApp(self):
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on cancel button.")
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Cancel']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnCancelButtonToCancelChangesInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _cancelChangesToCreateMotionRule(self):
        """
        Click on the Cancel button to cancel the changes to create a Motion Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes to create a Sensor Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=sensors_rule_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=sensors_rule_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=sensors_rule_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=sensors_rule_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesToCreateMotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesToCreateAwayModeRule(self):
        """
        Click on the Save button to confirm the changes to create a Away Mode Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes to create a Timer Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=timer_rule_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=timer_rule_save_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesToCreateAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesToCreateAwayModeRule(self):
        """
        Click on the Cancel button to cancel the changes to create a Away Mode Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes to create a Timer Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=timer_rule_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=timer_rule_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=timer_rule_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=timer_rule_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesToCreateAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _confirmChangesToCreateNotificationRule(self):
        """
        Click on the Save button to confirm the changes to create a Notification Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes to create a Notification Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=notify_rule_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=notify_rule_save_btn")
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=notify_rule_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=notify_rule_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesToCreateNotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesToCreateNotificationRule(self):
        """
        Cancel on the Save button to confirm the changes to create a Notification Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Cancel on the Save button to confirm the changes to create a Notification Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=notify_rule_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=notify_rule_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=notify_rule_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=notify_rule_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesToCreateNotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
                
    def _confirmChangesToCreateAuto_off_TimerRule(self):
        """
        Click on the Save button to confirm the changes to create a Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes to create a Auto-Off Timer Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=countdown_rule_save_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=countdown_rule_save_btn")
                    time.sleep(3)
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    time.sleep(10) 
                    
                time.sleep(2)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=countdown_rule_save_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=countdown_rule_save_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _confirmChangesToCreateAuto_off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException() 

    def _cancelChangesToCreateAuto_Off_TimerRule(self):
        """
        Click on the Cancel button to cancel the changes to create a Auto-Off Timer Rule
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes to create a Auto-Off Timer Rule")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=countdown_rule_cancel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=countdown_rule_cancel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=countdown_rule_cancel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=countdown_rule_cancel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesToCreateAuto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()                
                 
    def _verifyAndClickOnAddIconOnRulesPage(self):
        """
        Verify whether the  Add icon exist on the Rules Pages.
        """
        try:
            self._clickOnAddIconToCreateANewRule()   # for iOS code compatibility
        except:
            self.exception_msg = "Raising the Exception as the new rule button can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyAndClickOnAddIconOnRulesPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnAddIconToCreateANewRule(self):
        """
        Clicking on the Add icon to create a new rule.
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Add icon to create a new rule.")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='add_new_icon']")):
                    self.ExperitestClient.click("WEB", "xpath=//*[@id='add_new_icon']")
                    time.sleep(2*self.delay)
                    self.result = True
                    break
                
                elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Control A Device']",0)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Warning('Raising the Exception as the element:"id=add_new_icon" could not be found.')
                self.result = True
        except:
            self.exception_msg = "Raising the Exception as the new rule button can not be clicked."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnAddIconToCreateANewRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnRuleNameToLaunchTheRuleNamePage(self,ruleName):
        """
        Clicking on the Rule Name to launch the Rule Name's Page
        @param ruleName: The name of the Rule created
        @type ruleName: String  
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            launchCount = 0
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launching Rule Name:%s to see the details of the Rule."%ruleName)
            if self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']"%ruleName,0):
                time.sleep(1)
                self.ExperitestClient.click("WEB","xpath=//*[@text='%s']"%ruleName,0,1)
                time.sleep(1)
                
            while True:
                if launchCount == 7:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found and cannot be launched.'%ruleName)
                    raise Exception('Raising the Exception as the element:"text=%s" could not be found and cannot be launched.'%ruleName)
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "id=rule")) and (self.ExperitestClient.elementGetText("WEB", "id=rule", 0).strip().find(ruleName)!=-1):
                    time.sleep(1)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    time.sleep(10)  
                    
                else:
                    launchCount = launchCount + 1
                    print str(launchCount)
                    if self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "text=%s"%ruleName)
                        time.sleep(1)
                    else:
                        if self.ExperitestClient.isElementFound("WEB", "text=Rule Details"):
                            self._clickOnBackButtonToGoBackInWeMoApp()
                            assert self.result == True 
                            time.sleep(5) 
                                                
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnRuleNameToLaunchTheRuleNamePage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheRuleIsDeleted(self,ruleName):
        """
        Verify whether the Rule is deleted from the Rule Page
        @param ruleName: The name of the Rule created
        @type ruleName: String  
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Rule:%s is deleted from the Rule Page."%ruleName)
            if ((self.ExperitestClient.isElementFound("WEB", "id=add_new_icon") == True) and (self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName)) == False):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Rule:%s is deleted from the Rule Page")
                self.result = True
            elif (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='create_rule']") == True):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Rule:%s is deleted from the Rule Page")
                self.result = True

            else:
                self.exception_msg = "The Rule is not deleted from the Rules page"
                assert self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName) 
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the Rule:%s is not deleted.'%ruleName)
                raise Exception('Raising the Exception as the Rule:%s is not deleted.'%ruleName)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheRuleIsDeleted() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifyWemoDeviceNotPresentInRulesDetailPage(self , ruleName='' , deviceType=''):
        """
        Verify the Sensor Not Found in the Rule Detail Page
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        if deviceType is '' or ruleName is '':
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("deviceType/ruleName cannot be '' in _verifySwitchOrSensorNotPresentInRulesDetailPage")
                return
        deviceTypeDict = {
                            'Switch' :'Switch Not Present' ,
                            'Motion' : 'Sensor Not Present', 
                            'Insight' :'Switch Not Present',
                            'InsightV2' : 'Switch Not Present',
                            'Light'   :   'Switch Not Present'
                        } 
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify Sensor/Switch Not Present in the Rule Detail Page")
            for i in range(15):
                    if self.ExperitestClient.isElementFound("WEB","text=%s"%ruleName,0) == True:
                        self.ExperitestClient.click("WEB","text=%s"%ruleName,0)
                        time.sleep(2)
                        if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Rule Details']",0):
                            time.sleep(2) 
                            for i in range(15):
                                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%deviceTypeDict[deviceType])):
                                    self.result = True
                                    break   
                                time.sleep(1)                                    
                            else:
                                self.result=False
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Error("'Switch/Sensor not Present' text not found on the Rule details page")
                                    raise Exception('Raising the Exception as the element:"text=Sensor Not Present" is not found.')
                    time.sleep(10)
                    break
            else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True 
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("There are no Active Enabled Rules, neither there are any Disabled Rules.")
                    self.result = True                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifySensorOrSwitchNotFoundInRulesDetailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheRuleInRulesDetailPage(self,ruleName , deviceFreindlyNameList = []):
        """
        Verify the rule in the Rule Detail Page
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the rule:%s in the Rule Detail Page"%(ruleName))
                                        
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName)):
                    if len(deviceFreindlyNameList) > 0:
                        for deviceName in deviceFreindlyNameList:
                            for i in range(15):
                                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%deviceName)):
                                    break
                    
                                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                                    time.sleep(20)                     

                                else:
                                    self.ExperitestClient.swipe2("Down",500,500)
                                    time.sleep(1)
                            else:
                                self.exception_msg = "The Wemo Freindly Name = %s couldn't be found on the Rule details page"%deviceName
                                if self.WeMoAppLog != None:
                                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%deviceName)
                                    raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%deviceName)
                                    
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                    time.sleep(20)                     
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True 
                    
                    self.ExperitestClient.swipe2("Down",500,500)

                time.sleep(5)
            else:
                self.exception_msg = "The Rule =%s couldn't be found on the Rule details page"%ruleName
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheRuleInRulesDetailPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _goToTheRulesDetailPageOfARule(self,ruleName):
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Rule <%s> to open the details"%(ruleName))
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='%s']"%ruleName)
            time.sleep(2*self.delay)
        except:
            self.exception_msg = "Raising the Exception as the rule detail for the rule <%s> can not be launched"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheRuleInRulesDetailPage() encountered and Error")
                self.WeMoAppLog.LogException()

                         
    def _enableTheRule(self,ruleName):
        """
        Clicking on the Enable Rule to enable the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the enable Rule to enable the rule:%s"%(ruleName))
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName)):
                    self.result = True
                    break
            else:
                self.exception_msg = "The rule name = %s couldn't be found on the Rules page "%ruleName
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)

            # ID change in Dagobah
            self._verifyAndClickTheElement("WEB",  "xpath=//*[@id='change_rule_state' and @class='disable']")
            time.sleep(5*self.delay)

        except:
            self.exception_msg = "Raising the Exception as the rule can not be enabled"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _enableTheRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _disableTheRule(self,ruleName):
        """
        Clicking on the Disable Rule to disable the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Disable Rule to disable the rule:%s"%(ruleName))
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName)):
                    self.result = True
                    break
            else:
                self.exception_msg = "The rule name = %s couldn't be found on the Rules page "%ruleName
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)

            # ID change in Dagobah
            #self._verifyAndClickTheElement("WEB",  "xpath=//*[@id='rule_disable']")
            self._verifyAndClickTheElement("WEB",  "xpath=//*[@id='change_rule_state']")
            time.sleep(5*self.delay)

            # ID change in dagobah
            # navigating back to rules screen
            self._verifyAndClickTheElement("WEB",  "xpath=//*[@class='backbutton']")
            time.sleep(2*self.delay)


        except:
            self.exception_msg = "Raising the Exception as the rule can not be disabled"
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _disableTheRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _deleteTheRuleInRulesDetailPage(self,ruleName):
        """
        Clicking on the Delete Rule to delete the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.exception_msg = None 
            self.result = None

            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Delete Rule to delete the rule:%s"%(ruleName))

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName) or self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName.upper())):
                    self.result = True
                    break
            else:
                self.exception_msg = "The rule name = %s couldn't be found on the Rules page "%ruleName
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'Delete')]"):
                self._verifyAndClickTheElement("WEB","xpath=//*[contains(@text,'Delete')]")
            else:
                self._verifyAndClickTheElement("WEB","xpath=//*[@class='footerContainer']",0)

            for i in range(20):  # large number to give enough time to rule to get delete
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='add_new_icon']") or self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Control A Device']") :
                    self.result = True
                    break
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,'Delete')]"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info('Click on delete did not work.Clicking again.')
                    self._verifyAndClickTheElement("WEB","xpath=//*[contains(@text,'Delete')]")
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Sleeping for 10s while rule is being deleted.')
                time.sleep(20*self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Warning('Raising the warning as the rule took more than 200 secs to delete.')
            # sleepinf for 10 s to let the rule engine restart
            time.sleep(40*self.delay)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _deleteTheRuleInRulesDetailPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _editTheRule(self,ruleName):
        """
        Clicking on the Edit Rule to edit the rule
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Edit Rule to edit the rule for <%s> rule"%ruleName)
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=modify_rule")):
                    self.ExperitestClient.click("WEB",  "id=modify_rule")
                    time.sleep(4*self.delay)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=modify_rule" could not be found.')
                raise Exception('Raising the Exception as the element:"id=modify_rule" could not be found.')
        except:
            self.exception_msg = "The Edit button couldn't be found on the WeMo app "
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _editTheRule() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyRuleisDisabled(self,ruleName):
        """
        Check whether the Rule is Disabled or not
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check whether the rule <%s> is disabled or not"%(ruleName))
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)

            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s']/..//*[@text='Disabled']"%ruleName)):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the rule:%s is not disabled.'%ruleName)
                raise Exception('Raising the Exception as the rule:%s is not disabled.'%ruleName)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRuleisDisabled() encountered and Error")
                self.WeMoAppLog.LogException()


    def _isTheRuleEnabled(self,ruleName):
        """
        Check whether the Rule is Enabled or not
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check whether the rule is enabled or not:%s"%(ruleName))
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%ruleName)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%ruleName)
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=enabled_rules_list")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=enabled_rules_list" could not be found.')
                raise Exception('Raising the Exception as the element:"id=enabled_rules_list" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isFoundIn("WEB", "id=enabled_rules_list", 0, "Inside", "WEB", "text=%s"%ruleName, 0, 0)):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the rule:%s is not found in "id=disabled_rules_list" could not be found.')
                raise Exception('Raising the Exception as the rule:%s is not found in "id=disabled_rules_list" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _editTheRule() encountered and Error")
                self.WeMoAppLog.LogException()                
                
                
                 
    def _verifyTheNotificationPopUp(self,notificationMessage="Something happened."):
        """
        Verify the Notification Pop Up when the Notification Rule takes place
        """
        try:
            self.exception = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Notification Pop Up when the Notification Rule takes place")
            
            for i in range(30):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=Message from WeMo",0)) and (self.ExperitestClient.isElementFound("NATIVE", "text=%s"%notificationMessage,0)):
                    self.result = True
                    break
                time.sleep(30)
            else:
                self.exception_msg = "The Notification Popup Could not be found on the Mobile device"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Message from WeMo" or "text=%s" could not be found.'%notificationMessage)
                raise Exception('Raising the Exception as the element:"text=Message from WeMo" or "text=%s" could not be found.'%notificationMessage)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheNotificationPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheNotificationPopUpAndClickOnOkButton(self,notificationMessage="Something happened."):
        """
        Verify the Notification Pop Up when the Notification Rule takes place and click on OK
        """
        try:
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Notification Pop Up when the Notification Rule takes place and click on OK")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=Message from WeMo",0)) and (self.ExperitestClient.isElementFound("NATIVE", "text=%s"%notificationMessage,0)):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE", "text=OK",0,1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.exception_msg = "The Notification Popup Could not be found on the Mobile device"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Something happened" or "text=%s" could not be found.'%notificationMessage)
                raise Exception('Raising the Exception as the element:"text=Something happened" or "text=%s" could not be found.'%notificationMessage)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheNotificationPopUpAndClickOnOkButton() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifyRulesCannotBeSavedPopUpAndClickOnOkButton(self):
        """
        Verify the Notification Pop Up when the Notification Rule takes place and click on OK
        This function needs to be implemented as the pop up is not seen yet the issue is raised in JIRA
        """
        self.result=False
        
            
    def _verifyTheAwayModeAndRulesPopUpAndClickOnOkButton(self):
        """
        Verify the Notification Pop Up when the Notification Rule takes place and click on OK
        """
        try:    
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Notification Pop Up when the Notification Rule takes place and click on OK")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=ruleInfoHeader",0)) and (self.ExperitestClient.isElementFound("WEB", "text=Away Mode and Rules",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Away Mode and Rules']/..//*[@text='OK']",0,1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.exception_msg = "The Away mode rule Popup Could not be found on the Mobile device"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=ruleInfoHeader" or "id=RuleDuplicateText" could not be found.' )
                raise Exception('Raising the Exception as the element:"id=ruleInfoHeader" or "id=RuleDuplicateText" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheAwayModeAndRulesPopUpAndClickOnOkButton() encountered and Error")
                self.WeMoAppLog.LogException()

                
                
    def _verifyRuleNameBufferSizeExceedingAndClickOnOkButton(self):
        """
        Verify the pop-up Please enter a name 30 characters or less appears and clic on ok
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Notification Pop Up when rule name exceeds 30 characters and click on ok")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Please enter a name 30 characters or less.",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=OK",0,1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Please enter a name 30 characters or less" could not be found')
                raise Exception('Raising the Exception as the element:"text=Please enter a name 30 characters or less" could not be found')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRuleNameBufferSizeExceedingAndClickOnOkButton() encountered and Error")
                self.WeMoAppLog.LogException()           

    def _verifyNotificationMessageBufferSizeExceedingAndClickOnOkButton(self):
        """
        Verify the pop-up Please enter a name 30 characters or less appears and clic on ok
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Notification message exceeds 150 characters and click on ok")
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Alert']",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Please enter a name 30 characters or less" could not be found')
                raise Exception('Raising the Exception as the element:"text=Please enter a name 30 characters or less" could not be found')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRuleNameBufferSizeExceedingAndClickOnOkButton() encountered and Error")
                self.WeMoAppLog.LogException()                     
                
                
    def _clickOnOk_ToDisableTheConflicting_Rule(self):
     
        """
            Click on OK to Disable the conflicting rule to avoid rule conflict.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when rule conflicts another rule.")
                
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='OK' and @top='true']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnOk_ToDisableTheConflicting_Rule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnOk_OnRuleDuplicationPopUp(self):
        """
            Click on OK to Disable the conflicting rule to avoid rule conflict.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when rule dulpicates another rule.")
                
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='OK' and @top='true']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnOk_OnRuleDuplicationPopUp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnOk_ToDisableTheOverlappingAuto_Off_Rule(self):
        """
            Click on OK to Disable the conflicting rule to avoid rule conflict.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when one rule overlap another rule.")

            self._verifyAndClickTheElement("WEB","xpath=//*[@text='OK']")
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _clickOnOk_ToDisableTheOverlappingAuto_Off_Rule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnSuspendingTheExistingCountDownRule(self):
            """
                Click on OK to Disable the conflicting rule to avoid rule conflict.
            """
            try:
                self.result = None
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Click on OK to suspend the rule pop up.")

                self._verifyAndClickTheElement("WEB","xpath=//*[@text='OK' and @top='true']")
            except:
                self._screenCapture()
                self._getTheAndroidDeviceLogs()
                self._homeScreen()
                self.result = False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The method _clickOnSuspendingTheExistingCountDownRule() encountered and Error")
                    self.WeMoAppLog.LogException()

    def _verifyRuleConflictPopupAndClickOnOk_AwayModeRule(self):

        """
            Click on OK to Disable the conflicting rule to avoid rule conflict.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when rule conflicts another rule.")
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","text=Rule Conflict",0) and self.ExperitestClient.isElementFound("WEB", "id=RuleDuplicateText", 0):
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Rule Conflict']/../..//*[@text='OK']",0):
                        self.ExperitestClient.click("WEB","xpath=//*[@text='Rule Conflict']/../..//*[@text='OK']",0,1)
                        self.result = True
                        break
                                
                    elif(self.ExperitestClient.isElementFound("WEB","text=  Disabled Rules")) or  (self.ExperitestClient.isElementFound("WEB","text=  Enabled Rules")):   
                        self.result = True
                        break
                else:
                    time.sleep(5)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Unable to find the Rule conflict Pop up')
                raise Exception('Unable to find the Rule Conflict Pop up')      
                
                        
                       
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRuleConflictPopupAndClickOnOk_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifyRuleDuplicationPopupAndClickOnOk_AwayModeRule(self):
        """
            Click on OK to Disable the conflicting rule to avoid rule conflict.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when rule dulpicates another rule.")
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","text=Rule Duplication",0) and self.ExperitestClient.isElementFound("WEB", "id=RuleDuplicateText", 0):
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Rule Duplication']/../..//*[@text='OK']",0):
                        self.ExperitestClient.click("WEB","xpath=//*[@text='Rule Duplication']/../..//*[@text='OK']",0,1)
                        self.result = True
                        break
                else:
                    time.sleep(5)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Unable to find the Rule Duplication Pop up')
                raise Exception('Unable to find the Rule Duplication Pop up')                  
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRuleDuplicationPopupAndClickOnOk_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
               
############################################################
###    GENERIC FUNCTION TO CREATE THE RULES ON THE WEMO ####                
############################################################
            
    
    def _createARule_InWeMoApp(self,**kwargs):
        """
        Creating the  rule for the wemo devices on the WeMo App 
        =========================================================================
        @@                 PARAMETERS TO BE PASSED FOR EACH RULE TYPE          @@ 
        =========================================================================
        @@----------------------------------------------
        @@ TIMER RULE :- 1) RULETYPE   = STRING
        @@               2) WEMODEVICES = LIST
        @@               3) ACTION      = STRING
        @@               4) STARTTIME   = STRING
        @@               5) ENDTIME     = STRING           
        @@               5) RULENAME    = STRING           
        @@-----------------------------------------------  
        @@-----------------------------------------------
        @@ MOTION RULE :-1) RULETYPE   = STRING
        @@               2) WEMODEVICES = LIST
        @@               3) ACTION      = STRING
        @@               4) MOTIONDEVICE = STRING 
        @@               5) TIMETOBESET = STRING (IF Action = on ,then... )  
        @@               6) STARTTIME   = STRING
        @@               7) ENDTIME     = STRING           
        @@               8) RULENAME    = STRING           
        @@-----------------------------------------------  
        @@-----------------------------------------------
        @@ AUTOOFFTIMER RULE :-1) RULETYPE   = STRING
        @@                     2) WEMODEVICES = LIST
        @@                     3) TIMEINTERVAL = STRING 
        @@                     4) STARTTIME   = STRING
        @@                     5) ENDTIME     = STRING           
        @@                     6) RULENAME    = STRING           
        @@-----------------------------------------------         
        """             
                
        if self.WeMoAppLog != None :

            self.WeMoAppLog.Info ("Creating the  rule <%s> for the wemo devices on the WeMo App "%str(kwargs))
        MANDATORY_KEYS = ['RULE_TYPE','DEVICES_IN_NETWORK','ACTION']
        OPTIONAL_KEYS = ['MOTION_TRIGGER_FROM']

        VALID_RULES = {
                        'TIMER_RULE':"xpath=//*[@id='timer_rule']",
                        'MOTION_RULE':"xpath=//*[@id='sensor_rule']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@text='Away mode' and @top='true']",
                        'AUTO_OFF_RULE':"xpath=//*[@id='countdown_timer_rule']",
                        'NEST_RULE':"xpath=//*[@id='nest_rule']",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@id='sensor_notification_rule']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@id='notify_power_sensing_rule']",
                    }        
        
        RULE_WHEN_TAB = {
                        'TIMER_RULE':"xpath=//*[@id='timer_rule_when']",
                        'MOTION_RULE':"xpath=//*[@id='sensors_rule_when']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@id='timer_rule_when']",
                        'AUTO_OFF_RULE':"xpath=//*[@id='countdown_when']",
                        'NEST_RULE':"",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_when']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_when']",

                        }
        
        RULE_PAGE_HEADER = {
                        'TIMER_RULE':['New Rule','Edit Timer Rule'],
                        'MOTION_RULE':['New Motion Rule','Edit Timer Rule'],
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : ['Away Mode'],
                        'AUTO_OFF_RULE':['Auto-off Timer'],
                        'NEST_RULE':[],
                        'MOTION_NOTIFICATION_RULE':["New Notification Rule"],
                        'INSIGHT_NOTIFICATION_RULE':["New Notification Rule"],

                         }
        
        ACTION_NAME = {
                        'ON':'on',
                        'OFF':'off',
                        'ON UNTIL TIME':'on until time',
                        'ON, THEN...':'on, then...'
                        }
        RULE_NAME_TAB = {
                        'TIMER_RULE':"xpath=//*[@id='timer_rule_rule_name']",
                        'MOTION_RULE':"xpath=//*[@id='sensors_rule_rule_name']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@id='timer_rule_rule_name']",
                        'AUTO_OFF_RULE':"xpath=//*[@id='rule_name']",
                        'NEST_RULE':"xpath=//*[@id='sensor_rule']",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_rule_name']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_rule_name']",
                
                        }
                        
        RULE_SAVE_BUTTON = {
                        'TIMER_RULE':"xpath=//*[@text='Save']",
                        'MOTION_RULE':"xpath=//*[@text='Save']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@text='Save']",
                        'AUTO_OFF_RULE':"xpath=//*[@text='Save']",
                        'NEST_RULE':"xpath=//*[@text='Save']",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@text='Save']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@text='Save']",
                
                            }
        
        TimeList = {"immediately":"1","1 minute":"00:01","5 minutes":"00:05","10 minutes":"00:10","15 minutes":"00:15","30 minutes":"00:30","1 hour":"01:00","don't turn off":"0","Don't turn off":"0"}
        
        TimerInterval = {"1 m":0, "5 m":1, "10 m":2, "15 m":3, "30 m":4, "45 m":5,"1 hr":6,"Custom":7}
        
        
        DAYS    = {
                    'Monday':'Mon',
                    'Tuesday':'Tue',
                    'Wednesday':'Wed',
                    'Thursday':'Thu',
                    'Friday':'Fri',
                    'Saturday':'Sat',
                    'Sunday':'Sun',
                }

        
        try:
            # validating the params
            if "RULE_TYPE" in kwargs.keys():
                rule_type = kwargs['RULE_TYPE']
                if rule_type not in VALID_RULES.keys():
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error("Invalid rule type <%s>"%rule_type)
                    raise Exception("Invalid rule type <%s>"%rule_type)
            if "DEVICES_IN_NETWORK" in kwargs.keys():
                rule_devices = kwargs['DEVICES_IN_NETWORK']
            if "DAYS" in kwargs.keys():
                rule_days = kwargs['DAYS']
            if "RULE_NAME" in kwargs.keys():
                rule_name = kwargs['RULE_NAME']
            if "MOTION_TRIGGER_FROM" in kwargs.keys():
                rule_motion_trigger = kwargs['MOTION_TRIGGER_FROM']
            if "START_TIME" in kwargs.keys():
                rule_start_time = kwargs['START_TIME']
            if "END_TIME" in kwargs.keys():
                rule_end_time = kwargs['END_TIME']
            if "ACTION" in kwargs.keys():
                rule_action = kwargs['ACTION']
            if "AUTO_OFF_TIME_INTERVEL" in kwargs.keys():
                rule_auto_off_time_interval = kwargs['AUTO_OFF_TIME_INTERVEL']
            if "MOTION_TRIGGER_FROM" in kwargs.keys():
                rule_motion_trigger_from = kwargs['MOTION_TRIGGER_FROM']
            if "TRIGGER" in kwargs.keys():
                rule_motion_trigger = kwargs['TRIGGER']





            ##  VERIFY THAT THE CORRESPONDING RULE PAGE IS LAUNCHED ##
            self._verifyAndClickOnAddIconOnRulesPage()
            assert self.result == True

            if filter(lambda key:str.upper(key) == 'RULE_TYPE',kwargs):
                if VALID_RULES[rule_type]:
                    for i in range(5):
                        if self.ExperitestClient.isElementFound("WEB","%s"%VALID_RULES[rule_type],0):
                            self.ExperitestClient.click("WEB","%s"%VALID_RULES[rule_type],0,1)
                            time.sleep(5*self.delay)
                            PAGE_HEADER = self.ExperitestClient.getTextIn2("WEB","css=DIV.sub_header",0,"WEB","Inside",0,0).strip()
                            if PAGE_HEADER in RULE_PAGE_HEADER[rule_type]:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The Rule page for  %s is launched"%str.upper(kwargs['RULE_TYPE']))
                                break
                        else:
                            self.ExperitestClient.swipe("Down",200)
                            time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.values()))
                        raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.values()))
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.keys()))
                    raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.keys()))
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))

            ##  SELECT THE WEMO FOR THE CORRESPONDING RULE ##

            if rule_type == 'TIMER_RULE':
                if rule_devices:
                    for WEMO_DEVICES in rule_devices:
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']"%WEMO_DEVICES, 0, 1)

                        # ID change in Dagobah
                        # ID change in Dagobah build 68
                        # actions = {'on':'On','off':'Off','on until time':'On Until Time'}
                        actions = {'on':'On','off':'Off','on until time':'On until time'}
                        if rule_action in actions.keys():

                            if not self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='%s' and @width>0 and ./parent::*[@nodeName='DIV'] and @top='true']"%actions[rule_action]):
                                self.ExperitestClient.swipe("Down",200)
                            self.ExperitestClient.click("WEB", "xpath=//*[@text='%s' and @width>0 and ./parent::*[@nodeName='DIV'] and @top='true']"%actions[rule_action])
                            time.sleep(2*self.delay)
                            # returning to original location
                            if not self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Turn on/off' and @top='true']"):
                                self.ExperitestClient.swipeWhileNotFound("Up",200,"WEB","xpath=//*[@text='Turn on/off' and @top='true']",delay=2000,rounds=2,click=False)
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Incorrect Action. Valid actions are %s'%",".join(['on','off','on until time']))
                            raise Exception('Incorrect Action. Valid actions are %s'%",".join(['on','off','on until time']))
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                    raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
            elif rule_type == 'AUTO_OFF_RULE':
                if rule_devices:
                    for WEMO_DEVICES in rule_devices:
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='%s']"%WEMO_DEVICES, 0, 1)

                if rule_auto_off_time_interval:
                    if rule_auto_off_time_interval in ["1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr"]:
                        self._selectAuto_Off_TimerIntervel(rule_auto_off_time_interval)
                        assert self.result == True
                    elif str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0]):
                        self._selectAuto_Off_TimerIntervel("Custom")
                        assert self.result == True

                        if ":" not in kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])]:
                            self._setTheCustomTimer_Auto_Off_Timer("0",kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])])
                            assert self.result == True
                            self._clickOnSave_ToSaveCustomTimer()
                            assert self.result == True
                            self._verifyTheCustomButtonMessage_Auto_Off_Timer("0",kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])])
                            assert self.result == True
                        else:
                            self._setTheCustomTimer_Auto_Off_Timer(kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[0],kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[1])
                            assert self.result == True
                            self._clickOnSave_ToSaveCustomTimer()
                            assert self.result == True
                            self._verifyTheCustomButtonMessage_Auto_Off_Timer(kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[0],kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[1])
                            assert self.result == True
                    else:
                        self._selectAuto_Off_TimerIntervel("1 m")
                        assert self.result == True
                else:
                    self._selectAuto_Off_TimerIntervel("1 m")
                    assert self.result == True
            elif rule_type == 'MOTION_RULE':
                if "MOTION_TRIGGER_FROM" in kwargs.keys():
                    for i in range(10):
                        if self.ExperitestClient.isElementFound("WEB","text=%s"%rule_motion_trigger_from,0):
                            self.ExperitestClient.click("WEB","text=%s"%rule_motion_trigger_from,0,1)
                            # self.ExperitestClient.click("WEB","text=Motion",0,1)
                            break
                        else:
                            self.ExperitestClient.swipe2("Up",500,0)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('"MOTION_TRIGGER_FROM" is a mandatory field')
                        raise Exception('"MOTION_TRIGGER_FROM" is a mandatory field')

                    if "DEVICES_IN_NETWORK" in kwargs.keys():
                        for WEMO_DEVICES in rule_devices:

                            if "ACTION" in kwargs.keys():
                                if rule_action in ['on then','off']:
                                    self._selectTheWeMoToCreateTheRule_MotionRule(WEMO_DEVICES)
                                    assert self.result == True
                                    self._selectTheActionForWeMo_MotionRule(WEMO_DEVICES,rule_action)
                                    assert self.result == True

                                    if rule_action in ['on then'] and "TRIGGER" in kwargs.keys():
                                        TimeList = {"immediately":"1","1 minutes":"00:01","5 minutes":"00:05","10 minutes":"00:10","15 minutes":"00:15","30 minutes":"00:30","1 hour":"01:00","don't turn off":"0","Don't turn off":"0"}
                                        if rule_motion_trigger in TimeList:
                                            self._selectTheTimeForOnThenOffIfNoMotion_MotionRule(rule_motion_trigger)
                                            assert self.result == True
                                        else:
                                            if self.WeMoAppLog is not None:
                                                self.WeMoAppLog.Error('Cannot Complete Action without Trigger Timer/Invalid Time selected for Motion rule.Valid values are %s'%','.join(TimeList.keys()))
                                            raise Exception('Cannot Complete Action without Trigger Timer/Invalid Time selected for Motion rule.Valid values are %s'%','.join(TimeList.keys()))
                                    #else:
                                    #    if self.WeMoAppLog is not None:
                                    #        self.WeMoAppLog.Error('Cannot Complete Action without Trigger Timer')
                                    #    raise Exception('Cannot Complete Action without Trigger Timer')
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('The action for time selection is invalid')
                                raise Exception('The action for time selection is invalid')
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                        raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Could not select the WeMo Device:%s'%kwargs[str.upper(filter(lambda key:str.upper(key) == 'MOTION_TRIGGER_FROM',kwargs)[0])])
                    raise Exception('Could not select the WeMo Device:%s'%kwargs[str.upper(filter(lambda key:str.upper(key) == 'MOTION_TRIGGER_FROM',kwargs)[0])])

            elif rule_type == 'AWAY_MODE_RULE':
                self._unselectTheDevicesAlreadySetforAwayMode()
                assert self.result == True

                if "DEVICES_IN_NETWORK" in kwargs.keys():
                    for WEMO_DEVICES in rule_devices:
                        self._selectTheWeMo_AwayModeRule(WEMO_DEVICES)
                        assert self.result == True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Invalid Rule Type - %s'%kwargs[str.upper(kwargs[str(filter(lambda key:str.upper(key) == 'RULE_TYPE',kwargs)[0])])])
                raise Exception('Invalid Rule Type - %s'%kwargs[str.upper(kwargs[str(filter(lambda key:str.upper(key) == 'RULE_TYPE',kwargs)[0])])])

            ##  GO TO THE WHEN PAGE TO SELECT ACTION TIMING ##
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","text=RULE NAME",0):
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,0)

            if rule_type == 'TIMER_RULE':
                self._clickOnWhenTab_TimerRule()
            elif rule_type == 'MOTION_RULE':
                self._clickOnWhenTab_MotionRule()
            elif rule_type == 'AWAY_MODE_RULE':
                self._clickOnWhenTab_AwayModeRule()
            elif rule_type == 'AUTO_OFF_RULE':
                self._clickOnWhenTab_Auto_Off_TimerRule()

            ##  SELECT TIME ON WHEN PAGE BASED ON CONDITION ##
            if rule_type == 'TIMER_RULE':
                if rule_action in ['On','Off','On Until Time']:
                    if rule_action == "on":
                        if "START_TIME" in kwargs.keys():
                            if ':' in rule_start_time:
                                self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                                assert self.result == True

                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                assert self.result == True

                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid Start Time format for on option in Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid Start Time format for on option in Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME')
                            raise Exception('Missing Key: START_TIME')

                    elif rule_action == "off":
                        if "START_TIME" in kwargs.keys():
                            if ':' in rule_start_time:

                                self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                                assert self.result == True

                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                assert self.result == True

                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid Start Time format for off option in Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid Start Time format for off option in Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME')
                            raise Exception('Missing Key: START_TIME')
                    else:
                        if "START_TIME" in kwargs.keys() and "END_TIME" in kwargs.keys():
                            if "START_TIME" in kwargs.keys():
                                if ':' in rule_start_time:
                                    self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                                    assert self.result == True

                                    self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                    assert self.result == True

                                    self._clickOnDoneButtonToSetTheTime()
                                    assert self.result == True
                                else:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Error('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                                    raise Exception('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Missing Key: START_TIME')
                                raise Exception('Missing Key: START_TIME')

                            if "END_TIME" in kwargs.keys():
                                if ':' in rule_end_time:
                                    self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                                    assert self.result == True

                                    self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                                    assert self.result == True

                                    self._clickOnDoneButtonToSetTheTime()
                                    assert self.result == True
                                else:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Error('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                                    raise Exception('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Missing Key: END_TIME')
                                raise Exception('Missing Key: END_TIME')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: Insiufficient Argument Either Start time or End time is not there')
                            raise Exception('Missing Key: Insiufficient Argument Either Start time or End time is not there')
            elif rule_type == 'AWAY_MODE_RULE':
                if "START_TIME" in kwargs.keys() and "END_TIME" in kwargs.keys():
                    if "START_TIME" in kwargs.keys():
                        self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                        assert self.result == True
                        self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                        assert self.result == True
                        self._clickOnDoneButtonToSetTheTime()
                        assert self.result == True
                    if "END_TIME" in kwargs.keys():
                        self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                        assert self.result == True
                        self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                        assert self.result == True
                        self._clickOnDoneButtonToSetTheTime()
                        assert self.result == True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("No Time Provided so taking default time in the app.")
            elif rule_type == 'MOTION_RULE':
                if rule_action in ['on then','off']:
                    if "START_TIME" in kwargs.keys() and "END_TIME" in kwargs.keys():
                        if "START_TIME" in kwargs.keys():
                            if ':' in rule_start_time:
                                self._toggleSensingOff_Auto_Off_Timer()
                                assert self.result == True
                                self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                                assert self.result == True
                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                assert self.result == True
                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME')
                            raise Exception('Missing Key: START_TIME')
                        if "END_TIME" in kwargs.keys():
                            if ':' in rule_end_time:
                                self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                                assert self.result == True
                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                                assert self.result == True
                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: END_TIME')
                            raise Exception('Missing Key: END_TIME')
                    else:
                        if str.upper(filter(lambda key:str.upper(key) == 'START_TIME',kwargs)[0]):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: END_TIME - Setting Motion Rule -START TIME is present')
                            raise Exception('Missing Key: END_TIME - Setting Motion Rule - START TIME is present')
                        elif str.upper(filter(lambda key:str.upper(key) == 'END_TIME',kwargs)[0]):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME - Setting Motion Rule -END TIME is present')
                            raise Exception('Missing Key: START_TIME - Setting Motion Rule - END TIME is present')
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Incorrect Actions for Motion Sensor.')
                    raise Exception('Incorrect Actions for Motion Sensor.')
            elif rule_type == 'AUTO_OFF_RULE':
                if rule_start_time and rule_end_time:
                    if rule_start_time:
                        if ':' in rule_start_time:
                            self._toggleSensingOff_Auto_Off_Timer()
                            assert self.result == True
                            self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                            assert self.result == True
                            self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                            assert self.result == True
                            self._clickOnDoneButtonToSetTheTime()
                            assert self.result == True
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                            raise Exception('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Missing Key: START_TIME')
                        raise Exception('Missing Key: START_TIME')
                    if rule_end_time:
                        if ':' in rule_end_time:
                            self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                            assert self.result == True
                            self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                            assert self.result == True
                            self._clickOnDoneButtonToSetTheTime()
                            assert self.result == True
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                            raise Exception('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Missing Key: END_TIME')
                        raise Exception('Missing Key: END_TIME')
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Identify the General Tab on the Settings Page of Smart Device.")
            ## SELECT DAYS IN WHEN PAGE
            if rule_type in ['TIMER_RULE','MOTION_RULE','AWAY_MODE_RULE','AUTO_OFF_RULE']:
                if "DAYS" in kwargs.keys():
                    self._selectMultipleDays(rule_days)
                    assert self.result == True

            ## CLICK ON DONE BUTTON TO CLOSE THE WHEN PAGE ##

            self._clickOnDoneButtonToConfirmChangesInWeMoApp()
            assert self.result == True

            if rule_type == 'TIMER_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_TimerRule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Missing Key Field RULE_NAME for TIMER RULE.')
                    raise Exception('Missing Key Field RULE_NAME for TIMER RULE.')
            elif rule_type == 'MOTION_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_MotionRule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
            elif rule_type == 'AUTO_OFF_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_Auto_Off_Rule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
            elif rule_type == 'AWAY_MODE_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_AwayModeRule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Missing Key Field RULE_NAME for MOTION RULE.')
                    raise Exception('Missing Key Field RULE_NAME for MOTION RULE.')
            self.result = True
                    
            
        except:
            self.exception_msg = "Raising the Exception as the rule can not be created."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createARule_InWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()

 #############################################################################
    
    #####################
    #IFTTT Tab Functions#
    #####################
    def clickOnConnectToIFTTT(self):
        """
        Clicking on the IFTTT Tab
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the IFTTT Tab")
            self._verifyAndClickTheElement("WEB", "id=ifttt")
            time.sleep(5*self.delay)

        except:
            self.exception_msg = "Raising the Exception as the element connect to ifttt could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnConnectToIFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _getTheWemoActivationPin_IFTTT(self):
        """
        Getting the Wemo Activation Pin for the Wemo to create the Recipe in the IFTTT Page
        """
        try:
            self.result = None
            self.WemoActivationPin = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Getting the Wemo Activation Pin for the Wemo to create the Recipe in the IFTTT Tab")
        
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "id=ifttt_activation_pin_div")):
                    self.WemoActivationPin = self.ExperitestClient.elementGetProperty("WEB", "xpath=//*[@name='ifttt_activation_pin']", 0, "text").strip()
                    assert self.WemoActivationPin != None
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=ifttt_activation_pin_div" could not be found.')
                raise Exception('Raising the Exception as the element:"id=ifttt_activation_pin_div" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the activation pin for ifttt could not be fetched."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getTheWemoActivationPin_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnManageMyWemoChannels_IFTTT(self):
        """
        Clicking on the Manage My WeMo Channels button on the IFTTT page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Manage My WeMo Channels button on the IFTTT page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=manage_wemo_channel_btn")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=manage_wemo_channel_btn")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=manage_wemo_channel_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=manage_wemo_channel_btn" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnManageMyWemoChannels_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnGenerateANewPin_IFTTT(self):
        """
        Clicking on Generate a New Pin on the IFTTT Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on Generate a New Pin on the IFTTT Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=generate_new_pin")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=generate_new_pin")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=generate_new_pin" could not be found.')
                raise Exception('Raising the Exception as the element:"id=generate_new_pin" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnGenerateANewPin_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _checkTheDeviceIfActive(self,device_type="Switch"):
        """
            Check if the device is active
        """
        try:
            self.result = None
            self.Device_Status = None
            
            Devices = {
                'Motion':'https://ifttt.com/wemo_motion',
                'Switch':'https://ifttt.com/wemo_switch',
                'Insight':'https://ifttt.com/wemo_insight_switch',
                'LightSwitch':'https://ifttt.com/wemo_light_switch'
            }
            
            if device_type in Devices:
                self.ExperitestClient.launch("%s"%Devices[device_type],True,False)
            time.sleep(30)
            self.ExperitestClient.swipe2("Down", 500, 500)
            
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Activate']",0):
                self.Device_Status = "InActive"
            else:
                self.Device_Status = "Active"

            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkTheDeviceIfActive() encountered and Error")
                self.WeMoAppLog.LogException() 

    def _deactivateWeMoChannels(self,device_type="Switch"):
        """
            Deactivate the WeMo Channel
        """
        try:
            IFTTT_Channels = {
                'Motion':'https://ifttt.com/wemo_motion',
                'Insight':'https://ifttt.com/wemo_insight_switch',
                'Switch':'https://ifttt.com/wemo_switch',
                'Light':'https://ifttt.com/wemo_light_switch'
            }
            
            for i in range(5):
                self.ExperitestClient.launch("%s"%IFTTT_Channels[device_type],True,False)
                time.sleep(5)
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(5)
                if self.ExperitestClient.isElementFound("WEB","text=Deactivate",0):
                    self.ExperitestClient.click("WEB","text=Deactivate",0,1)
                    time.sleep(5)
                    if self.ExperitestClient.isElementFound("NATIVE",'text=The page at "https://ifttt.com" says:',0):
                        if self.ExperitestClient.isElementFound("NATIVE","text=OK",0):
                            self.ExperitestClient.click("NATIVE","text=OK",0,1)
                            time.sleep(5)
                            if self.ExperitestClient.isElementFound("WEB","text=Activate",0):
                                self.result = True 
                                break 

                elif self.ExperitestClient.isElementFound("WEB","text=Activate",0):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The WeMo devices: %s is not activated."%device_type)
                    self.result = True                        
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Deactivate" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Deactivate" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _launchManageWemoChannelActivationPage() encountered and Error")
                self.WeMoAppLog.LogException()
                
                 
    def _launchInstrumentedBrowser(self):
        """
        Launching the Browser which is instrumented
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launching the instrumented browser.")
            self.result = None
            self.ExperitestClient.launch("com.experitest.simplebrowser/.WebViewActivity",True, True)
            time.sleep(self.delay)
            self.result = True
        except:
            self.exception_msg = "Raising the Exception as the instrumented browser can not be launched."
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _launchInstrumentedBrowser() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _closeInstrumentedBrowser(self):
        """
        Close the Browser which is instrumented
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Close the Browser which is instrumented")
            self.result = None
            self.ExperitestClient.applicationClearData("com.experitest.simplebrowser")
            time.sleep(1)
            self.ExperitestClient.applicationClose("com.experitest.simplebrowser")
            time.sleep(1)
            self.result = True
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _closeInstrumentedBrowser() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _launchIFTTTLoginPage(self):
        """
        Launching the IFTTT Login Page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launching the IFTTT Login Page")
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launching the IFTTT Login Page:http://ifttt.com/login.")
            self.ExperitestClient.launch("https://ifttt.com/login", True, False)
            time.sleep(15)
            self.result = True
        except:
            self.exception_msg = "<https://ifttt.com/login> can not be launched."
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _launchIFTTTLoginPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _signOutIFTTTWEBPage(self):
        """
        Sign Out of the IFTTT Login Page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Signing out of the IFTTT Page")
            self.result = None
            self.ExperitestClient.launch("https://ifttt.com/logout", True, False)
            time.sleep(15)
            self.result = True
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method signOutIFTTTWEBPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _loginToIFTTTPage(self,username,password):
        """
        Logging in the IFTTT Page
        @param username:The username of the User
        @type username:String
        @param password:The password associated with the Username
        @type password:String
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Logging into the IFTTT with username:%s and password:%s."%(username,password))
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=login",0)):
                    self.ExperitestClient.elementSendText("WEB", "id=login", 0, username)
                    time.sleep(self.delay)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=login" could not be found.')
                raise Exception('Raising the Exception as the element:"id=login" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=password",0)):
                    self.ExperitestClient.elementSendText("WEB", "id=password", 0, password)
                    time.sleep(self.delay)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=password" could not be found.')
                raise Exception('Raising the Exception as the element:"id=password" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "name=commit",0)):
                    self.ExperitestClient.click("WEB", "name=commit", 0, 1)
                    time.sleep(15)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"name=commit" could not be found.')
                raise Exception('Raising the Exception as the element:"name=commit" could not be found.')
            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Looking for the Alert Title and by passing it")
            if(self.ExperitestClient.isElementFound("NATIVE","id=alertTitle")):
                self.ExperitestClient.click("NATIVE", "id=button1", 0, 1)
                time.sleep(self.delay)
                self.result = True
        except:
            self.exception_msg = "Raising the Exception as the login to ifttt could not be done."
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _loginToIFTTTPage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _launchManageWemoChannelActivationPage(self):
        """
        Launch the Manage My Wemo Cahnnel Page
        """
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launch the Manage My Wemo Cahnnel Page:https://ifttt.com/channels/activation_list?channel_set=wemo&is_WEB_view=1.")
            self.result = None
            self.ExperitestClient.launch("https://ifttt.com/channels/activation_list?channel_set=wemo&is_WEB_view=1", True, False)
            time.sleep(15)
            self.result = True
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _launchManageWemoChannelActivationPage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickingOnTheManageRecipeButton(self):
        """
        Clicking on the Manage Recipe button on Manage My Wemo Channel Page for IFTTT
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Clicking on the Manage Recipe button on Manage My Wemo Channel Page for IFTTT")
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Manage Recipes")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Manage Recipes")
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                time.sleep(1)
                self._homeScreen()
                time.sleep(1)
                self._powerOnAndOff()
                time.sleep(1)
                self.result = False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Manage Recipes" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Manage Recipes" could not be found.')
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickingOnTheManageRecipeButton() encountered and Error")
                self.WeMoAppLog.LogException()


    def _setTheTimeForTriggering(self,hours,minutes,am_pm):
        """
            Set the IFTTT time
        """
        try:
            self.result = None
            print hours,minutes,am_pm
            convertedHours = None
            minutes = int(minutes)
            hours = int(hours)
            if minutes >= 45:
                minutes = "00"
                hours = hours + 1
            elif (minutes >= 30) and (minutes < 45):
                minutes = "45"
                hours = hours
            elif (minutes >= 15) and (minutes < 30):
                minutes = "30"
                hours = hours
            elif (minutes > 0) and (minutes < 15):
                minutes = "15"
                hours = hours
            if int(hours)>12:
                convertedHours = int(hours)-12
                if convertedHours<10:
                    convertedHours = "0%d"%convertedHours
                print str(convertedHours),minutes,am_pm
            else:
                convertedHours = hours
            if self.ExperitestClient.isElementFound("WEB","id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_4i",0):
                self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_4i", "%s %s"%(convertedHours,am_pm))           
            if self.ExperitestClient.isElementFound("WEB","id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_5i",0):
                self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_5i", "%s"%minutes)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheTimeForTriggering() encountered and Error")
                self.WeMoAppLog.LogException() 
                
    def _chooseAndActivateTheChannel(self,WemoActivationPin,type_of_channel="Switch"):
        """
        Activate the Channel
        """
        try:
            self.exception_msg = None
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Paste the pin %s to activate the %s channel "%(WemoActivationPin,type_of_channel))
                
            Type = {
                'Mail':'channel_6',
                'Time':'channel_3',
                'Switch':'channel_45',
                'Motion':'channel_46',
                'Insight':'channel_748975256',
                'Light':'channel_85',
                'Maker':'channel_267597877'
            }
            
            Device_Name = {
                
                'Switch':'WeMo Switch',
                'Motion':'WeMo Motion',
                'Insight':'WeMo Insight Switch',
                'Light':'WeMo Light Switch',
                'Maker':'WeMo Maker'            
            }
            
            if type_of_channel in Type:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Proceed activating the channel %s"%(type_of_channel))
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Un-expected channel.')
                raise Exception('Un-expected channel.')
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=%s"%Type[type_of_channel])):
                    time.sleep(1)
                    if self.ExperitestClient.elementGetText("WEB", "id=%s"%Type[type_of_channel],0).find("%s"%Device_Name[type_of_channel]) != -1:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error("The text:%s is found"%type_of_channel)
                        self.ExperitestClient.click("WEB", "nclick:id=%s"%Type[type_of_channel])
                        time.sleep(1)
                        self.result = True
                        break
                        
                    else:
                        self.ExperitestClient.elementSwipe("WEB","css=ARTICLE.l-popup",0,"Down",700,1000)                    
                else:
                    self.ExperitestClient.elementSwipe("WEB","css=ARTICLE.l-popup",0,"Down",700,1000)               
                    
                time.sleep(1)
            else:
                self.exception_msg = "WeMo %s Channel is not found on the IFTTT browser page"%type_of_channel
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Type[type_of_channel])
                raise Exception('Raising the Exception as the element:"id=%s" could not be found.'%Type[type_of_channel])
                
            Field_Attributes = {
                'Switch':'live_channel_live_channel_fields_attributes_4_value',
                'Insight':'live_channel_live_channel_fields_attributes_0_value',
                'Motion':'live_channel_live_channel_fields_attributes_3_value',
                'Light':'live_channel_live_channel_fields_attributes_4_value'
            }
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=%s"%Field_Attributes[type_of_channel],0)):
                    time.sleep(1)
                    self.ExperitestClient.elementSendText("WEB", "id=%s"%Field_Attributes[type_of_channel],0,WemoActivationPin.strip())
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.exception_msg = "The Field Attribute is not found on the IFTTT browser page "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Field_Attributes[type_of_channel])
                raise Exception('Raising the Exception as the element:"id=%s" could not be found.')
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "name=commit",0)):
                    time.sleep(1)
                    self.ExperitestClient.swipe2("Down",700,300)
                    self.ExperitestClient.click("WEB", "name=commit",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"name=commit" could not be found.')
                raise Exception('Raising the Exception as the element:"name=commit" could not be found.')
            
            activationText = ""
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.channel-page_channel_info",0)):
                    time.sleep(1)
                    activationText = self.ExperitestClient.elementGetText("WEB", "css=DIV.channel-page_channel_info", 0)
                    print activationText
                    assert activationText.find(u"Belkinӳ WeMo system is home automation made easy. The %s is WeMoӳ main building block. Plug anything you want to control into the %s"%(Device_Name[type_of_channel],Device_Name[type_of_channel]))
                    self.result = True
                    break
                if(self.ExperitestClient.isElementFound("WEB", "name=commit",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "name=commit",0,1)
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%Activation_Message[type_of_channel])
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%Activation_Message[type_of_channel])
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False  
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseAndActivateTheChannel() encountered and Error")
                self.WeMoAppLog.LogException()                
                
                
                
                             
    def _createARecipe(self):
        """
        Create A Recipe by launching the Create A Recipe Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Create A Recipe by launching the Create A Recipe Page.")
                self.WeMoAppLog.Info("Launch the Create A Recipe Page:https://ifttt.com/create.")
            self.result = None
            self.ExperitestClient.launch("https://ifttt.com/create", True, False)
            time.sleep(15)
            self.result = True
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnCreateARecipeButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createIFTTTRecipeByClickingOnThis(self):
        """
        Create A Recipe by clicking on the "this" link
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info('Create A Recipe by clicking on the "this" link')
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Create a Recipe",0)):
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Create a Recipe" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Create a Recipe" could not be found.')
            
            for i in range(15):
                #xpath=//*[@css='DIV.is-dimmable']/..//*[contains(@text,'if')]
                if(self.ExperitestClient.isElementFound("WEB", "text=if",0)) and (self.ExperitestClient.isElementFound("WEB", "text=this",0)) and (self.ExperitestClient.isElementFound("WEB", "text=then",0)) and (self.ExperitestClient.isElementFound("WEB", "text=that",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=this", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=ifthenthat" could not be found.')
                raise Exception('Raising the Exception as the element:"text=ifthenthat" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createIFTTTRecipeByClickingOnThis() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _createIFTTTRecipeByClickingOnThat(self):
        """
        Create A Recipe by clicking on the "that" link
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info('Create A Recipe by clicking on the "this" link')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=that",1)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=that", 1, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=that" could not be found.')
                raise Exception('Raising the Exception as the element:"text=that" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createIFTTTRecipeByClickingOnThis() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _chooseATriggerChannel(self, WeMoDeviceType="Switch"):
        """
        Choose a Trigger Channel
        @param WeMoDeviceType: The WeMo Device<Switch|Sensor>
        @type WeMoDeviceType: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Choose a Trigger Channel for a WeMo Device:%s for creating the IFTTT Recipe."%WeMoDeviceType)   

            Device_Channel = {
                    'Switch':'channel_45',
                    'Insight':'channel_748975256',
                    'Light':'channel_85',
                    'Motion':'channel_46',
                    'Maker' : 'channel_267597877',
                    'Mail':'channel_6',
                    'Time':'channel_3'
            }
            for i in range(3):
                if self.ExperitestClient.isElementFound("WEB","text=Choose Trigger Channel",0):
                    if self.ExperitestClient.isElementFound("WEB","id=%s"%Device_Channel[WeMoDeviceType],0):
                        self.ExperitestClient.click("WEB","id=%s"%Device_Channel[WeMoDeviceType],0,1)
                        self.result = True 
                        time.sleep(10) 
                        break 
            else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Device_Channel[WeMoDeviceType])
                    raise Exception('Raising the Exception as the element:"id=%s" could not be found.'%Device_Channel[WeMoDeviceType])
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseATriggerChannel() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _chooseATrigger(self, triggerName="on",trigger="Switch"):
        """
        Choose a trigger for the trigger channel selected
        @param triggerName: The trigger name for the trigger channel selected. For Switch-"on","off". For Sensor-"motion"
        @type triggerName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Choosing a Trigger:%s for WeMo Device:%s for creating the  IFTTT Recipe."%(triggerName,trigger))
            if trigger == "Switch":
                if not ((triggerName=="on") or (triggerName=="off")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                if triggerName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_126",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_126", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_126" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_126" could not be found.')
                if triggerName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_127",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_127", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_127" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_127" could not be found.')
            
            if (trigger == "Sensor") or (trigger == "Motion"):
                if not (triggerName=="motion"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                if triggerName == "motion":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_125",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_125", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_125" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_125" could not be found.')
            
            if trigger == "Insight":
                if not ((triggerName=="on") or (triggerName=="off") or (triggerName=="standby") or (triggerName=="toggle")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_414736604",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_414736604", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_414736604" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_414736604" could not be found.')

                if triggerName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1182131724",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1182131724", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1182131724" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1182131724" could not be found.')

                if triggerName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_379194748",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_379194748", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_379194748" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_379194748" could not be found.')
                if triggerName == "standby":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_1571456926",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_1571456926", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_1571456926" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_1571456926" could not be found.')


            if trigger == "Maker":
                if not ((triggerName=="relayon") or (triggerName=="relayoff") or (triggerName=="momentaryon")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "relayon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_211263250",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_211263250", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_211263250" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_211263250" could not be found.')

                if triggerName == "momentaryon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_1753818091",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_1753818091", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_1753818091" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_1753818091" could not be found.')

                if triggerName == "relayoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_173677744",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_173677744", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_173677744" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_173677744" could not be found.')
               
            if trigger == "Time":
                if not ((triggerName=="Every day at") or (triggerName=="Every hour at") or (triggerName=="Every day of the week at")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,trigger))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "Every day at":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_3",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_3", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_3" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_3" could not be found.')
                if triggerName == "Every hour at":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_9",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_9", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_9" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_9" could not be found.')
                if triggerName == "Every day of the week at":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_10",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=trigger_10", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_10" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_10" could not be found.')
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseATrigger() encountered and Error")
                self.WeMoAppLog.LogException()
                
                
    def _createAndActivateIFTTTRecipe(self,description=None):
        """
        Create A Recipe by clicking on the Create a Recipe button
        """
        try:
            self.result = None
            if description!=None:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Create and Activate IFTTT Recipe with description:%s."%description)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Create and Activate IFTTT Recipe.")
            if description!=None:
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=statement_description",0)):
                        time.sleep(1)
                        self.ExperitestClient.elementSendText("WEB", "id=statement_description", 0, description)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_description" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=statement_description" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_create_task_submit",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "nclick:id=statement_create_task_submit", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_create_task_submit" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_create_task_submit" could not be found.') 
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createAndActivateIFTTTRecipe() encountered and Error")
                self.WeMoAppLog.LogException()            
                 
    def _chooseAWemoToCompleteTriggerField(self, WemoFriendlyName):
        """
        Choose a Wemo to complete the Trigger Field
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Choosing a Wemo:%s to complete the Trigger Field."%WemoFriendlyName)
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_live_action_attributes_live_action_fields_attributes_0_value",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=statement_live_action_attributes_live_action_fields_attributes_0_value",0,1)
                    time.sleep(1)
                    if(self.ExperitestClient.isElementFound("NATIVE", "class=android.widget.FrameLayout",0)):   
                        self.ExperitestClient.click("NATIVE","text=%s"%WemoFriendlyName) 
                        time.sleep(5)
                        if self.ExperitestClient.isElementFound("NATIVE", "class=android.widget.FrameLayout",0):   
                            self.result = True
                            break

                elif(self.ExperitestClient.isElementFound("WEB", "id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value",0,1)
                    time.sleep(1)
                    if(self.ExperitestClient.isElementFound("NATIVE", "class=android.widget.FrameLayout",0)):   
                        self.ExperitestClient.click("NATIVE","text=%s"%WemoFriendlyName) 
                        time.sleep(5)
                        if self.ExperitestClient.isElementFound("NATIVE", "class=android.widget.FrameLayout",0):   
                            self.result = True
                            break
                
#

                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseAWemoToCompleteTriggerField() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createTriggerByClickingTheCreateTriggerButton(self):
        """
        Click on the Create Trigger Button.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Create Trigger Button.")
                
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=validate_trigger_btn",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=validate_trigger_btn", 0, 1)
                    time.sleep(5)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=validate_trigger_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=validate_trigger_btn" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createTriggerByClickingTheCreateTriggerButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _chooseActionChannel(self, WeMoDeviceType="Switch"):
        """
        Choose a Action Channel
        @param WeMoDeviceType: The WeMo Device<Switch>
        @type WeMoDeviceType: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Choose a Action Channel for a WeMo Device:%s for creating the IFTTT Recipe."%WeMoDeviceType)   
            
            if WeMoDeviceType == "Switch":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_45",0)):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_45", 0, 1)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_45" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_45" could not be found.')

            if WeMoDeviceType == "Maker":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_267597877",0)):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_267597877", 0, 1)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=channel_267597877" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=channel_267597877" could not be found.')

            if WeMoDeviceType == "Light Switch":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_85",0)):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_85", 0, 1)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_85" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_85" could not be found.')
            
            
            
            if WeMoDeviceType == "Email":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_6",0)):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "id=ind_a_channel_6", 0, 1)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_45" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_45" could not be found.')
            
            
            if WeMoDeviceType == "Insight":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_748975256",0)):
                        time.sleep(1)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_748975256", 0, 1)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_748975256" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_748975256" could not be found.')
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseActionChannel() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _chooseAction(self, actionName="on",WeMoDeviceType="Switch"):
        """
        Choose a Action for the Action channel selected
        @param actionName: The action name for the Action channel selected. For Switch-"on","off,onthenoff,offthenon,toggle"
        @type actionName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Choosing a Action:%s for WeMo Device:%s for creating the  IFTTT Recipe."%(actionName,WeMoDeviceType))
            if WeMoDeviceType == "Switch":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_54",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_54", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_54" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_54" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_55",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_55", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_55" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_55" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_85",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_85", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_85" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_85" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_86",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_86", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_86" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_86" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_53",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_53", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_53" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_53" could not be found.')
            if WeMoDeviceType == "Insight":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1155093958",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1155093958", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1155093958" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1155093958" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1652666381",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1652666381", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1652666381" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1652666381" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1454853676",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1454853676", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1454853676" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1454853676" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1287361961",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1287361961", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1287361961" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1287361961" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1182131724",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1182131724", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1182131724" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1182131724" could not be found.')
                        
            if WeMoDeviceType == "Light Switch":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_138",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_138", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_138" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_138" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_139",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_139", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_139" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_139" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_140",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_140", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_140" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_140" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_141",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_141", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_141" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_141" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_137",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_137", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_137" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_137" could not be found.')  

            if WeMoDeviceType == "Email":
                if not (actionName=="SendEmail"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "SendEmail":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_4",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_4", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=id=action_4" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=id=action_4" could not be found.') 

            if WeMoDeviceType == "Maker":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1627622173",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1627622173", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1627622173" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1627622173" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_424812329",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_424812329", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_424812329" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_424812329" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1494084878",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1494084878", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1494084878" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1494084878" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_58779243",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_58779243", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_58779243" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_58779243" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_1860323964",0)):
                            time.sleep(1)
                            self.ExperitestClient.click("WEB", "id=action_1860323964", 0, 1)
                            time.sleep(1)
                            self.result = True
                            break
                        time.sleep(1)
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1860323964" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1860323964" could not be found.')
   

                        
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseAction() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _chooseAWemoToCompleteActionField(self, WemoFriendlyName):
        """
        Choose a Wemo to complete the Action Field
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Choosing a Wemo:%s to complete the Action Field."%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_live_action_attributes_live_action_fields_attributes_0_value",0)):
                    time.sleep(1)
                    self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_action_attributes_live_action_fields_attributes_0_value", WemoFriendlyName)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_live_action_attributes_live_action_fields_attributes_0_value" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_live_action_attributes_live_action_fields_attributes_0_value" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _chooseAWemoToCompleteActionField() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createActionByClickingTheCreateActionButton(self):
        """
        Click on the Create Action Button.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Create Action Button.")
                
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=validate_action_btn",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "nclick:id=validate_action_btn", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=validate_action_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=validate_action_btn" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createActionByClickingTheCreateActionButton() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _createAndActivateIFTTTRecipe(self,description=None):
        """
        Create A Recipe by clicking on the Create a Recipe button
        """
        try:
            self.result = None
            if description!=None:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Create and Activate IFTTT Recipe with description:%s."%description)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Create and Activate IFTTT Recipe.")
            if description!=None:
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=statement_description",0)):
                        time.sleep(1)
                        self.ExperitestClient.elementSendText("WEB", "id=statement_description", 0, description)
                        time.sleep(1)
                        self.result = True
                        break
                    time.sleep(1)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_description" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=statement_description" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_create_task_submit",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "nclick:id=statement_create_task_submit", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_create_task_submit" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_create_task_submit" could not be found.') 
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createAndActivateIFTTTRecipe() encountered and Error")
                self.WeMoAppLog.LogException()
            
    
    def _getRecipeId(self):
        """
        Getting the Recipe Id from the IFTTT Page
        """
        try:
            self.result = None
            self.RecipeId = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Get the Recipe Id of the Recipes Created.")
                self.WeMoAppLog.Info("Launching the IFTTT Page:http://ifttt.com/logs.")
            self.ExperitestClient.launch("http://ifttt.com/logs", True, True)
            time.sleep(10)
            self.result = True
            
            activityLogs = self.ExperitestClient.getText("WEB")
            activityLogsList = activityLogs.split("\n")
            
            for line in activityLogsList:
                if line.find("view Recipe")!=-1:
                    self.RecipeId=line.split()[-1].strip()
                    assert self.RecipeId != None  
                    print self.RecipeId
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("Could not get the Recipe Id of the Recipe Created")
                raise Exception("Could not get the Recipe Id of the Recipe Created")
        except:
            time.sleep(1)
            self._homeScreen()
            time.sleep(1)
            self.result = False
            self.RecipeId = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _getRecipeId() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _deleteRecipe(self,recipeId):
        """
        Delete the Recipe from the IFTTT Web Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Deleting the Recipe whose Recipe Id is:%s."%recipeId)
            self.ExperitestClient.launch("http://ifttt.com/myrecipes/personal/%s"%recipeId, True, True)
            time.sleep(10)
            self.result = True
            time.sleep(10)
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Delete",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Delete", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Delete" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Delete" could not be found.') 
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=OK",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE", "text=OK", 0, 1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=OK" could not be found.')
                raise Exception('Raising the Exception as the element:"text=OK" could not be found.') 
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _deleteRecipe() encountered and Error")
                self.WeMoAppLog.LogException()
    #################################################################################################
    ##############################################
    ##  MORE FEATURE POP-UP   
    ##############################################
    
    def _verifyMoreFeaturePopUpAndClickOnShowMoreInDiscoveryPage(self):
        """
        Verify the More feature pop up on the device discovery page  
        """
        
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info(" Verify the More feature pop up on the device discovery page ")
        try:
            self.result = None 
            self.exception_msg = None 
            
            for i in range(5):            
                if (self.ExperitestClient.isElementFound("WEB","text=More Features",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("The More feature pop up on the device discovery page is verified")
                    self.result = True 
                    if self.ExperitestClient.isElementFound("WEB","text=Show me",0):
                        self.ExperitestClient.click("WEB","text=Show me",0,1)
                        self.result = True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("The More feature pop up on the device discovery page is verified and successfully clicked on Show me") 
                        break 
                    
                else:
                    self._handlePopUpOnWeMoApp ( MoreFeature_Check = False)
                    assert self.result == True 
                 
            else:
                self.exception_msg = "The element:'text=More Features' or text = 'Show me' could not be found"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=More Features" or text = "Show me" could not be found.')
                raise Exception('Raising the Exception as the element:"text=More Features" or text = "Show me" could not be found.') 
        except:
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyMoreFeaturePopUpAndClickOnShowMoreInDiscoveryPage() encountered and Error")
                self.WeMoAppLog.LogException()                

    def _verifyTheUIscreensofMoreFeaturePopUpInWeMoApp(self):
        """
        This function will verify the different screens of the More feature pop-up on the Wemo App
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info(" This function will verify the different screens of the More feature pop-up on the Wemo App ")
        
        try:
            self.result = None 
            self.exception_msg = None 
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@css,'DIV.owl-page')]",0):
                    self.ExperitestClient.click("WEB","xpath=//*[contains(@css,'DIV.owl-page')]",0,1)
                    if self.ExperitestClient.isElementFound("WEB","text=Grouping LED Lightbulbs",0):
                        if self.ExperitestClient.isElementFound("WEB","text=Select 'Edit Device' in the overflow menu.",0):
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info(" The 1st page of the Grouping LED UI screen is verified ")  
                        self.result = True         
                        break  

            for i in range(10):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@css,'DIV.owl-page')]",1):
                    self.ExperitestClient.click("WEB","xpath=//*[contains(@css,'DIV.owl-page')]",1,1)
                    if self.ExperitestClient.isElementFound("WEB","text=Grouping LED Lightbulbs",0):
                        if self.ExperitestClient.isElementFound("WEB","text=Drag one light bulb onto another to group them.",0):
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info(" The 2nd page of the Grouping LED UI screen is verified ")  
                        self.result = True         
                        break  

            for i in range(10):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@css,'DIV.owl-page')]",2):
                    self.ExperitestClient.click("WEB","xpath=//*[contains(@css,'DIV.owl-page')]",2,1) 
                    if self.ExperitestClient.isElementFound("WEB","text=Grouping LED Lightbulbs",0):
                        if self.ExperitestClient.isElementFound("WEB","text=Numbers above light bulb icons show the number of bulbs in a group.",0):
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info(" The 3rd page of the Grouping LED UI screen is verified ")  
                        self.result = True 
                        break 
                        
                    
        except:
            self._getTheAndroidDeviceLogs() 
            self._screenCapture()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheUIscreensofMoreFeaturePopUpInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()             
                    

    
    def _verifyMoreFeaturePopUpAndClickOnNotNowInDiscoveryPage(self):
        """
        Verify the More feature pop up on the device discovery page  
        """
        
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info(" Verify the More feature pop up on the device discovery page ")
        try:
            self.result = None 
            self.exception_msg = None 
            
            for i in range(5):            
                if (self.ExperitestClient.isElementFound("WEB","text=More Features",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("The More feature pop up on the device discovery page is verified")
                    self.result = True 
                    if self.ExperitestClient.isElementFound("WEB","text=Not now",0):
                        self.ExperitestClient.click("WEB","text=Not now",0,1)
                        self.result = True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("The More feature pop up on the device discovery page is verified and successfully clicked on text=Not now") 
                        break 
                    
                else:
                    self._handlePopUpOnWeMoApp ( MoreFeature_Check = False)
                    assert self.result == True 
                    
            else:
                self.exception_msg = "The element:'text=More Features' or text = 'Show me' could not be found"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=More Features" or text = "Not now" could not be found.')
                raise Exception('Raising the Exception as the element:"text=More Features" or text = "Not now" could not be found.') 
        except:
            self._homeScreen()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyMoreFeaturePopUpAndClickOnNotNowInDiscoveryPage() encountered and Error")
                self.WeMoAppLog.LogException()                
                
    ###############################
    #Firmware Update Tab Functions#
    ############################## 
    
    def _verifyTheFirmwareUpdatePage(self):
        """
        Verify the Firmware Update Page
        """
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Firmware Update Page")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=FIRMWARE")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=FIRMWARE" could not be found.')
                raise Exception('Raising the Exception as the element:"text=FIRMWARE" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=enable_upgrade")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=enable_upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"id=enable_upgrade" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheFirmwareUpdatePage() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _verifyTheTextOnTheFirwareUpdateReleaseNotes(self,releaseNoteText):
        """
        Check for the Firmware Update Page and the Release Notes and verify the text
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for the Firmware Update Page and the Release Notes and verify the text")
        try:
            self._isAppLaunched()
            assert  self.result == True
            
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify the Firmware Update Page and verify the Release Notes Text")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=FIRMWARE")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=FIRMWARE" could not be found.')
                raise Exception('Raising the Exception as the element:"text=FIRMWARE" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "id=enable_upgrade")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=enable_upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"id=enable_upgrade" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.getText("WEB")).find(releaseNoteText)!=-1:
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the text:%s could not be found.'%releaseNoteText)
                raise Exception('Raising the Exception as the text:%s could not be found.'%releaseNoteText)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheTextOnTheFirwareUpdateReleaseNotes() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _checkForFirmwareUpgradePopUpInTheDeviceListScreen(self,refresh=True):
        """
        Check for the Firmware Upgrade Pop up in the Device List Page
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for the Firmware Upgrade Pop up in the Device List Page")
        try:
            self.exception_msg = None
            self.result = None
            for i in range(3):
                if self.ExperitestClient.isElementFound("WEB", "id=new_firmware") == True:
                    self.result = True
                    break
                time.sleep(1)
                if refresh==True:
                    self._clickOnRefreshButton()
                    assert self.result == True
            else:
                self.exception_msg = "Failed to find the id=new_firmware, as the pop-up id would have changed  "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=new_firmware" could not be found.')
                raise Exception('Raising the Exception as the element:"id=new_firmware" could not be found.')
            
            for i in range(3):
                if ((self.ExperitestClient.isElementFound("WEB", "text=Firmware Update",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Firmware Update",1))) and (self.ExperitestClient.isElementFound("WEB", "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?") == True):
                    self.result = True
                    break
                elif ((self.ExperitestClient.isElementFound("WEB", "text=Firmware Update Available",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Firmware Update Available",1))) and (self.ExperitestClient.isElementFound("WEB", "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?") == True):    
                    self.result = True
                    break
                
                time.sleep(1)
            else:
                self.exception_msg = "Failed as 'Firmware Update Available' or 'Firmware Update' text on the firmware pop-up was not correct "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Firmware Update" or "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?" could not be found.')
                raise Exception('Raising the Exception as the element:"Firmware Update" or "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradePopUpInTheDeviceListScreen() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _checkForFirmwareUpgradePopUpAndDoNotUpdateTheFirmware(self, refresh = False):
        """
        Check for the Firmware Upgrade Pop up in the Device List Page and do not update the Firmware
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for the Firmware Upgrade Pop up in the Device List Page and do not update the Firmware")
        try:
            self.result = None
            self._isAppLaunched()
            assert self.result == True 

            for i in range(2):
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Updating your firmware keeps your WeMo devices happy.Would you like to update?']")):
                    if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Not Now']")):
                        self.ExperitestClient.click("WEB", "xpath=//*[@text='Not Now']")
                        self.result = True
                        break
                else:
                    self._handlePopUpOnWeMoApp()
                    if self.result == True:
                        if self.WeMoAppLog != None :
                            self.WeMoAppLog.Info("A pop-up has over shaded the screen ,so the firmware update pop-up was not able to be clicked")
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Not Now" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Not Now" could not be found.')
        except:
            self.exception_msg = "Raising the Exception as the element:text=Not Now could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradePopUpAndDoNotUpdateTheFirmware() encountered and Error")
                self.WeMoAppLog.LogException()
                     
    def _checkForFirmwareUpgradePopUpAndUpdateTheFirmware(self,refresh=True):
        """
        Check for the Firmware Upgrade Pop up in the Device List Page and update the Firmware
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for the Firmware Upgrade Pop up in the Device List Page and update the Firmware")
        try:
            self.exception_msg = None
            self.result = None    
            for i in range(3):
                if self.ExperitestClient.isElementFound("WEB", "id=new_firmware") == True:
                    self.result = True
                    break
                time.sleep(1)
                if refresh==True:
                    self._clickOnRefreshButton()
                    assert self.result == True
            else:
                self.exception = "Failed to identify the pop-up on the App "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=new_firmware" could not be found.')
                raise Exception('Raising the Exception as the element:"id=new_firmware" could not be found.')
            
            for i in range(5):
                if ((self.ExperitestClient.isElementFound("WEB", "text=Firmware Update",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Firmware Update",1))) and (self.ExperitestClient.isElementFound("WEB", "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?") == True):
                    self.result = True
                    break
                    
                elif ((self.ExperitestClient.isElementFound("WEB", "text=Firmware Update Available",0)) or (self.ExperitestClient.isElementFound("WEB", "text=Firmware Update Available",1))) and (self.ExperitestClient.isElementFound("WEB", "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?") == True):    
                    self.result = True
                    break                    
                time.sleep(1)
            else:
                self.exception_msg = "Failed as 'Firmware Update Available' or 'Firmware Update' text on the firmware pop-up was not correct "
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Firmware Update" or "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Firmware Update" or "text=Updating your firmware keeps your WeMo devices happy.Would you like to update?" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB", "text=Yes") == True):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Yes")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Yes" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Yes" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradePopUpAndUpdateTheFirmware() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnFirmwareUpdateTab(self):
        """
        Click on the New Firmware Available Tab in the More Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the New Firmware Available Tab in the More Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "id=more_new_firmware")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=more_new_firmware")
                    time.sleep(2)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "id=firmwareUpdate")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=firmwareUpdate")
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(2)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=more_new_firmware" or "id=firmwareUpdate" could not be found.')
                raise Exception('Raising the Exception as the element:"id=more_new_firmware" or "id=firmwareUpdate" could not be found.')
            
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=FIRMWARE")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "text=Firmware Upgrade")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=FIRMWARE" or "text=Firmware Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"text=FIRMWARE" or "text=Firmware Upgrade" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnFirmwareUpdateTab() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnAcceptAndUpgradeButtonInFirmwareUpdatePage(self):
        """
        Click on the Accept And Upgrade Button on the Firmware Update Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on the Accept And Upgrade Button on the Firmware Update Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=FIRMWARE")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "text=Firmware Upgrade")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=FIRMWARE" or "text=Firmware Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"text=FIRMWARE" or "text=Firmware Upgrade" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=enable_upgrade")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "id=enable_upgrade")
                    time.sleep(10)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Accept & Upgrade']/..")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "xpath=//*[@text='Accept & Upgrade']/..")
                    time.sleep(10)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=enable_upgrade" or "text=Accept & Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"id=enable_upgrade" or "text=Accept & Upgrade" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnAcceptAndUpgradeButtonInFirmwareUpdatePage() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def _checkForFirmwareUpgradeSuccessfulMessages(self,WemoSerialNumber,WeMoDeviceType,refresh=True):
        """
        Check for the Firmware Upgrade Successful Message in the Devices Page
        """
        try:
            if WeMoDeviceType not in ["Switch","Sensor","Insight","SlowCooker","HeaterA","Motion"]:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor" "Insight" "Motion" "Heater A"')
                raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor" "Insight" "Motion" "Heater A"')
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Wemo Device Type is:%s"%WeMoDeviceType)
                self.WeMoAppLog.Info("Verify dFirmware Upgrade Successful Message of the  WeMo Device:%s"%WemoSerialNumber)
            
            if WeMoDeviceType == "Switch": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Socket-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Socket-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Socket-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=FW upgrade successful!", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Socket-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Socket-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Socket-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Socket-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            elif (WeMoDeviceType == "Sensor") or (WeMoDeviceType == "Motion"): 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=FW upgrade successful!", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Sensor-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Sensor-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            elif WeMoDeviceType == "Insight": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Insight-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Insight-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Insight-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=FW upgrade successful!", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Insight-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Insight-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Insight-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Insight-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            elif WeMoDeviceType == "SlowCooker": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Crockpot-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Crockpot-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Crockpot-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=FW upgrade successful!", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Crockpot-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Crockpot-1_0-%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Crockpot-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Crockpot-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            
            elif WeMoDeviceType == "HeaterA" : 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:HeaterA-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:HeaterA-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:HeaterA-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=FW upgrade successful!", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"text=%s" and "text=FW upgrade successful!" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:HeaterA-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:HeaterA-1_0-%s" could not be found.'%WemoSerialNumber.strip())                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradeSuccessfulMessages() encountered and Error")
                self.WeMoAppLog.LogException()
                         

    def _checkForDownloadingNewFirmwareMessage(self,WemoSerialNumber,WeMoDeviceType,refresh=True):
        """
        Check for Downloading New Firmware Message for the Wemo.
        @param WemoSerialNumber: The Wemo Firendly Name 
        @type WemoSerialNumber: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for Downloading New Firmware Message for the Wemo:%s"%WemoSerialNumber)
        try:
            if WeMoDeviceType not in ["Switch","Sensor","Insight","SlowCooker","HeaterA","Motion","HeaterB","Humidifier"]:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor" "Insight" "Motion" "Heater A"')
                raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor" "Insight" "Motion" "Heater A"')
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Wemo Device Type is:%s"%WeMoDeviceType)
                self.WeMoAppLog.Info("Verify dFirmware Upgrade Successful Message of the  WeMo Device:%s"%WemoSerialNumber)
            
            if WeMoDeviceType == "Switch": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Socket-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Socket-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Socket-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Socket-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Socket-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Socket-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Socket-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            elif (WeMoDeviceType == "Sensor") or (WeMoDeviceType == "Motion"): 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Sensor-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Sensor-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Sensor-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            elif WeMoDeviceType == "Insight": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Insight-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Insight-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Insight-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Insight-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Insight-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Insight-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Insight-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            elif WeMoDeviceType == "SlowCooker": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Crockpot-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Crockpot-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Crockpot-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"id=uuid:Crockpot-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"id=uuid:Crockpot-1_0-%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Crockpot-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Crockpot-1_0-%s" could not be found.'%WemoSerialNumber.strip())
            
            elif WeMoDeviceType == "HeaterA": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:HeaterA-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:HeaterA-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:HeaterA-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"text=%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:HeaterA-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:HeaterA-1_0-%s" could not be found.'%WemoSerialNumber.strip())        


            elif WeMoDeviceType == "HeaterB": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:HeaterB-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:HeaterB-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:HeaterB-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"text=%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:HeaterB-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:HeaterB-1_0-%s" could not be found.'%WemoSerialNumber.strip())                                        

            elif WeMoDeviceType == "Humidifier": 
                for i in range(15):
                    if(self.ExperitestClient.isElementFound("WEB", "id=device_container")) and (self.ExperitestClient.isElementFound("WEB", "id=uuid:Humidifier-1_0-%s"%WemoSerialNumber.strip())) and (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Humidifier-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=Not Detected", 0, 0) == False):
                        if (self.ExperitestClient.isFoundIn("WEB", "id=uuid:Humidifier-1_0-%s"%WemoSerialNumber.strip(), 0, "Inside", "WEB", "text=downloading new firmware", 0, 0)):
                            time.sleep(1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                            raise Exception('Raising the Exception as the element:"text=%s" and "text=downloading new firmware" could not be found.'%WemoSerialNumber.strip())
                    if refresh==True:
                        self._clickOnRefreshButton()
                        assert self.result == True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Humidifier-1_0-%s" could not be found.'%WemoSerialNumber.strip())
                    raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Humidifier-1_0-%s" could not be found.'%WemoSerialNumber.strip())                                        

                                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradeSuccessfulMessages() encountered and Error")
                self.WeMoAppLog.LogException()


    def _checkForUpdatingNewFirmwareMessage(self,refresh=True,*WemoFriendlyName):
        """
        Check for Updating New Firmware Message for the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for Updating New Firmware Message for the %s Devices"%WemoFriendlyName)
        try: 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            WeMoInDeviceListContainer = WemoFriendlyName[0][:]
            print WemoFriendlyName
            for i in range(10):
                for WeMoDevice in WeMoInDeviceListContainer:
                    self._verifyWeMoDeviceCompletelyDisplayedOnScreen(WeMoDevice)
                    assert  self.result == True
                    
                    if(self.ExperitestClient.isElementFound("WEB", "text=%s"%WeMoDevice)):
                        WeMoInDeviceListContainer.remove(WeMoDevice)
                    else:
                        self._handlePopUpOnWeMoApp()
                        assert self.result == True                    
                        self._clickOnRefreshButton()
                        assert self.result == True 
                
                if len(WeMoInDeviceListContainer) == 0:
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            
            
            FWMessageinDeviceListContainer = WemoFriendlyName[0][:]
            for i in range(50):                      
                for WeMoDevice in FWMessageinDeviceListContainer:
                    print "WeMoDevice===%s"%WeMoDevice
                    if (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WeMoDevice, 0, "Down", "WEB", "text=Updating new firmware...", 0, 0)):
                        time.sleep(1)
                        FWMessageinDeviceListContainer.remove(WeMoDevice)
                    elif (self.ExperitestClient.isFoundIn("WEB", "text=%s"%WeMoDevice, 0, "Down", "WEB", "xpath=//*[contains(@text,'Updating new firmware...')]", 0, 0)):
                        time.sleep(1)
                        FWMessageinDeviceListContainer.remove(WeMoDevice)
                    else:
                        self._handlePopUpOnWeMoApp()
                        assert self.result == True                     
                        time.sleep(5)
                    
                    if len(FWMessageinDeviceListContainer) == 0:
                        break
                if len(FWMessageinDeviceListContainer) == 0:
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Raising the Exception as the element:"text=%s" and "text=Updating new firmware..." could not be found.'%WemoFriendlyName)
                #raise Exception('Raising the Exception as the element:"text=%s" and "text=Updating new firmware..." could not be found.'%WemoFriendlyName)
                
            self.result = True    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForUpdatingNewFirmwareMessage() encountered and Error")
                self.WeMoAppLog.LogException()             
        
    def _checkForReleaseNotesInFirmwareUpdatePage(self):
        """
        Check for Release Notes on the Firmware Update Page
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Check for Release Notes on the Firmware Update Page")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=FIRMWARE")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "text=Firmware Upgrade")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=FIRMWARE" or "text=Firmware Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"text=FIRMWARE" or "text=Firmware Upgrade" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "id=before_upgrade_container")):
                    if self.ExperitestClient.isElementFound("WEB", "text=Release Notes:"):
                        time.sleep(1)
                    #assert self.ExperitestClient.elementGetText("WEB", "id=before_upgrade_container",0).strip().find("Release Notes:")!=-1
                        self.result = True
                        break
                elif(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Please make sure to update all phones and tablets to the latest app version. ']/../..")):
                    if self.ExperitestClient.isElementFound("WEB", "text=Please make sure to update all phones and tablets to the latest app version."):
                        time.sleep(1)
                    #assert self.ExperitestClient.elementGetText("WEB", "id=before_upgrade_container",0).strip().find("Release Notes:")!=-1
                        self.result = True
                        break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=before_upgrade_container" could not be found.')
                raise Exception('Raising the Exception as the element:"id=before_upgrade_container" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForReleaseNotesInFirmwareUpdatePage() encountered and Error")
                self.WeMoAppLog.LogException()
                         
    def _checkForUpdateCompletePopUp(self):
        """
        Check for the Update Complete pop up
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for the Update Complete pop up")
        try:
            self.result = None
            for i in range(15):
                if self.ExperitestClient.isElementFound("WEB", "text=Update Complete") == True:
                    self.result = True
                    break
                time.sleep(1)
            else:
                self.result = True
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Warning('The Update Complete Pop up did not appear.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkForUpdateCompletePopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def clickOnHoorayButtonOnUpdateCompletePopUp(self):
        """
        Check for the Update Complete pop up and click on the Hooray Button
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Check for the Update Complete pop up and click on the Hooray Button")
        try:
            self.result = None
            for i in range(15):
                if (self.ExperitestClient.isElementFound("WEB", "text=Update Complete") == True) and (self.ExperitestClient.isElementFound("WEB", "text=All of your WeMo devices are feeling happy and running with the latest firmware.") == True):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Update Complete" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Update Complete" could not be found.')
            
            for i in range(15):
                if(self.ExperitestClient.isElementFound("WEB", "text=Hooray!")):
                    time.sleep(1)
                    self.ExperitestClient.click("WEB", "text=Hooray!")
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Hooray!" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Hooray!" could not be found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnHoorayButtonOnUpdateCompletePopUp() encountered and Error")
                self.WeMoAppLog.LogException()
                 ######################################################################################
    
    def clickOnSuspendingTheExistingCountDownRule(self):
        """
        Check for Rule Conflict Pop Up and click ok button
        """ 
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to suspend the existing Count down rule while Timer Rule is active.")  

                
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","id=rule_conflict_other",0) and self.ExperitestClient.isElementFound("WEB","text=Existing Countdown Timer rules will be suspended and disabled.",0)):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Pop Up Found , clicking OK to suspend the existing Count down rule while Timer Rule is active.")              
                    self.ExperitestClient.click("WEB", "id=ok_btn_other", 0, 1)
                    self.result = True
                    break
                else:
                    time.sleep(5)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Unable to find the Pop up which says the existing rule will be suspended')
                raise Exception('Unable to find the Pop up which says the existing rule will be suspended')                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnSuspendingTheExistingCountDownRule() encountered and Error")
                self.WeMoAppLog.LogException()
 
    def clickOnOk_ToDisableTheConflicting_Auto_Off_Rule(self):
        """
            Click on OK to Disable the Auto Off rule to avoid rule conflict.
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when one count down rule conflicts another count down rule.")
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","id=rule_conflict",0) and self.ExperitestClient.isElementFound("WEB", "xpath=//*[contains(@text ,'This rule conflicts with the rule')]", 0):
                    self.ExperitestClient.click("WEB","id=ok_btn",0,1)
                    self.result = True
                    break
                else:
                    time.sleep(5)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Unable to find the Rule Conflict Pop up')
                raise Exception('Unable to find the Rule Conflict Pop up')                  
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnOk_ToDisableTheConflicting_Auto_Off_Rule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _setTheCustomTimer_Auto_Off_Timer(self,hour,minutes): 
        '''
        Set the custom Time for Auto-Off Timer Rule
        '''
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Set the custom Time for Auto-Off Timer Rule.")    
        if int(hour)> 24:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Hour Range Exceeded. Please Enter a value between 0 and 24')
            raise Exception('Hour Range Exceeded. Please Enter a value between 0 and 24')      
        if int(minutes) > 59:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Minutes Range Exceeded. Please Enter a value between 0 and 60')
            raise Exception('Minutes Range Exceeded. Please Enter a value between 0 and 60')    
            
        try:
            self.result = None
            hour = int(hour)
            minutes = int(minutes)      
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Custom Timer']")):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Custom Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Custom Timer" could not be found.')     
            
            for i in range(2):
                hr = int(self.ExperitestClient.elementGetText("WEB", "xpath=//*[@css='DIV.dw-li.dw-v.dw-sel']", 0).strip('H'))
                if hr == hour:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Hour %dH selected for Custom Time" % hour)
                    self.result = True
                    break
                if (hr > hour):
                    for i in range(abs(hour-hr)):
                        self.ExperitestClient.click("WEB", "css=A.dwb-e.dwwb.dwwbm[href='#']", 0, 1)
                        time.sleep(self.delay)
                else:
                    for i in range(abs(hour-hr)):
                        self.ExperitestClient.click("WEB", "text=+",0,1)
                        time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Was not able to set %dH on Custom Timer Page' % hour)
                raise Exception('Raising Exception : Was not able to set %dH on Custom Timer Page' % hour)              
            
            for i in range(2):
                min = int(self.ExperitestClient.elementGetText("WEB", "xpath=//*[@css='DIV.dw-li.dw-v.dw-sel']", 1).strip('M'))
                if min == minutes:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Minute %dM selected for Custom Time" % minutes)
                    self.result = True                          
                    break                            
                if min > minutes:
                    for i in range(abs(minutes-min)):
                        self.ExperitestClient.click("WEB", "css=A.dwb-e.dwwb.dwwbm[href='#']", 1, 1)
                        time.sleep(self.delay)
                else:
                    for i in range(abs(minutes-min)):
                        self.ExperitestClient.click("WEB", "text=+", 1, 1)
                        time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Was not able to set %dM on Custom Timer Page' % minutes)
                raise Exception('Raising Exception : Was not able to set %dM on Custom Timer Page' % minutes)                               
        except:
            self.exception_msg = "Raising the Exception as the timer for auto off can not be set."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _setTheCustomTimer_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()  

    def _verifyDefaultCustomTimer_Auto_Off_Timer(self,hour,minutes): 
        '''
        Verify default the custom Time for Auto-Off Timer Rule
        '''
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify default the custom Time for Auto-Off Timer Rule.") 
        if int(hour)> 24:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Hour Range Exceeded. Please Enter a value between 0 and 24')
            raise Exception('Hour Range Exceeded. Please Enter a value between 0 and 24')      
        if int(minutes) > 59:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Minutes Range Exceeded. Please Enter a value between 0 and 60')
            raise Exception('Minutes Range Exceeded. Please Enter a value between 0 and 60')    
            
        try:
       
            self.result=None
            hour = int(hour)
            minutes = int(minutes)      
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Custom Timer")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Custom Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Custom Timer" could not be found.')     
            
            for i in range(12):
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.dw-li.dw-v.dw-sel",0)):
                    time.sleep(1)
                    hr = int(self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 0).strip('H'))
                    print hr                
                    if hr == hour:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Hour %dH selected for Custom Time" % hour)                    
                        self.result = True                          
                        break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Was not able to set %dH on Custom Timer Page' % hour)
                raise Exception('Raising Exception : Was not able to set %dH on Custom Timer Page' % hour)              
            
            for i in range(60):
                min = int(self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 1).strip('M'))           
                if min == minutes:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Minute %dM selected for Custom Time" % minutes)
                    self.result = True                          
                    break                                           
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Was not able to set %dM on Custom Timer Page' % minutes)
                raise Exception('Raising Exception : Was not able to set %dM on Custom Timer Page' % minutes)                               
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyDefaultCustomTimer_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()  
      
    
    #################################################################################
    ############# Android WIFI custom APP (Pair your WeMo Device app)################
    #################################################################################
    
    def _selectTheWifiFromWifiManager(self,ssid,password,security="WPA2"):
        """
        Launching the WiFi Manager App on the Android Phone
        """
        try:
            self.result = None
            self._closeWiFiManagerApp()
            assert self.result == True
            self._launchWiFiManagerApp()
            assert self.result == True

            # verifying the wifi app is launched
            if "com.belkin.pairingwemo" in self.ExperitestClient.getCurrentApplicationName():
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The pairing wemo(wifi) app is launched.")
            else:
                raise Exception("The wifi app is not launched.")

    
            # connecting to the required wifi
            for i in range(5):
                self.ExperitestClient.elementSetProperty("NATIVE","xpath=//*[@id='networkName']",0,"text",ssid)
                if password != None:
                    self.ExperitestClient.elementSetProperty("NATIVE","xpath=//*[@id='password']",0,"text",password)
                    if security == "WPA" or security == "WPA2":
                        self.ExperitestClient.click("NATIVE","xpath=//*[@id='network_spinner']",0)
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='WPA/WPA2']",0)
                else:
                    self.ExperitestClient.click("NATIVE","xpath=//*[@id='network_spinner']",0)
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='None']",0)
                    # time.sleep(15)
                self.ExperitestClient.click("NATIVE","xpath=//*[@id='start_pairing_button']",0)
                time.sleep(15)
                if "Connected To:%s"%ssid in self.ExperitestClient.elementGetProperty("NATIVE","xpath=//*[@id='connectedNetwork']",0,"text"):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the seetest could not find the SSID :%s and pair the smart phone with the same.'%ssid)
                raise Exception('Raising the Exception as the seetest could not find the SSID :%s and pair the smart phone with the same.'%ssid)
                
            self._closeWiFiManagerApp()
            assert self.result == True    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._closeWiFiManagerApp()
            self._clearWiFiManagerApplicationData()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheWifiFromWifiManager() encountered and Error")
                self.WeMoAppLog.LogException()
            
    
    
    def _launchWiFiManagerApp(self):
        """
        Launching the WiFi Manager App on the Android Phone
        """
        try:
            self.result = None
            launchCount = 0
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Launching the WiFi Manager App on the Android Phone")
            self.ExperitestClient.launch("com.belkin.pairingwemo/.pairingActivity", True, True)
            time.sleep(5 * self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._closeWiFiManagerApp()
            self._clearWiFiManagerApplicationData()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _launchWiFiManagerApp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _closeWiFiManagerApp(self):
        """
        Closing the WiFi Manager App on the Android Phone
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Closing the WiFi Manager App on the Android Phone")
            self.ExperitestClient.applicationClose("com.belkin.pairingwemo")
            time.sleep(1)   
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _closeWiFiManagerApp() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _clearWiFiManagerApplicationData(self):
        """
        Clearing the Application Data of the WiFi Manager App
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Clearing the Application Data of the WiFi Manager")
        try:
            self.ExperitestClient.applicationClearData("com.belkin.pairingwemo")
            time.sleep(1)
            self.result = True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self.result = False
            if self.WeMoAppLog != None:    
                self.WeMoAppLog.Error("The method _clearWiFiManagerApplicationData() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _filterSSIDBySignalInWiFiManager(self):
        """
        Filter the SSID list in the Wifi Manager App by Signal
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Filter the SSID list in the Wifi Manager App by signal ")
        try:    
            for i in range(3):
                if (self.ExperitestClient.isElementFound("NATIVE","id=wifi_list_sort_spinner",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","id=wifi_list_sort_spinner",0,1)
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","text=By signal",0,1)
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=wifi_list_sort_spinner" is found.')
                raise Exception('Raising the Exception as the element:"id=wifi_list_sort_spinner" is found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._closeWiFiManagerApp()
            self._clearWiFiManagerApplicationData()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _filterSSIDByNameInWiFiManager() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _reloadAPListInWiFiManager(self):
        """
        Reload the AP List in the WiFi Manager App
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Reload the AP List in the WiFi Manager App")
        try:
            # self._filterSSIDByNameInWiFiManager()
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE","id=button_start_scan",0)):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","id=button_start_scan",0,1)
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=button_start_scan" is found.')
                raise Exception('Raising the Exception as the element:"id=button_start_scan" is found.')
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._closeWiFiManagerApp()
            self._clearWiFiManagerApplicationData()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _reloadAPListInWiFiManager() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _selectTheSSIDInTheNetworkListInWiFiManager(self,ssid):
        """
        Select the SSID in the Network List in the WiFi Manager. 
        @param ssid: The Wireless SSID to which the Wemo will connect to.
        @type ssid: String
        """
        try:
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Selecting the SSID:%s in the WiFi Manager"%(ssid))
                
            for i in range(5):
                self.ExperitestClient.elementSetProperty("NATIVE","xpath=//*[@id='networkName']",0,"text",ssid)
                self.ExperitestClient.click("NATIVE","xpath=//*[@id='network_spinner']",0)
                self.ExperitestClient.click("NATIVE","xpath=//*[@text='None']",0)
                self.ExperitestClient.click("NATIVE","xpath=//*[@id='start_pairing_button']",0)
                time.sleep(15)
                if "Connected To:%s"%ssid in self.ExperitestClient.elementGetProperty("NATIVE","xpath=//*[@id='connectedNetwork']",0,"text"):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the seetest could not find the SSID :%s and pair the smart phone with the same.'%ssid)
                raise Exception('Raising the Exception as the seetest could not find the SSID :%s and pair the smart phone with the same.'%ssid)

            self._closeWiFiManagerApp()
            assert self.result == True
            
        except:
            self._screenCapture()
            self._closeWiFiManagerApp()
            time.sleep(1)
            self._clearWiFiManagerApplicationData()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheSSIDInTheNetworkListInWiFiManager() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    
    def _forgetWiFiNetwork(self,ssid):
        """
        Forgetting the WiFi Network in the WiFi Connection Manager App
        @param ssid: The Wireless Network to be forgotten
        @type ssid: String 
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Forgetting the WiFi Network in the WiFi Connection Manager App")
        try:
            for i in range(15):
                if (self.ExperitestClient.isElementFound("NATIVE","id=alertTitle",0)) and (self.ExperitestClient.elementGetText("NATIVE", "id=alertTitle", 0).strip() == "Network: %s"%ssid):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","text=Forget",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=alertTitle" is found.')
                raise Exception('Raising the Exception as the element:"id=alertTitle" is found.')
        except:
            self._closeWiFiManagerApp()
            time.sleep(1)
            self._clearWiFiManagerApplicationData()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _forgetWiFiNetwork() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _disconnectWiFiNetwork(self,ssid):
        """
        Disconnecting the WiFi Network in the WiFi Connection Manager App
        @param ssid: The Wireless Network to be forgotten
        @type ssid: String 
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Disconnecting the WiFi Network in the WiFi Connection Manager App")
        try:
            for i in range(15):
                if (self.ExperitestClient.isElementFound("NATIVE","id=alertTitle",0)) and (self.ExperitestClient.elementGetText("NATIVE", "id=alertTitle", 0).strip() == "Network: %s"%ssid):
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","id=Disconnect",0,1)
                    time.sleep(1)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=alertTitle" is found.')
                raise Exception('Raising the Exception as the element:"id=alertTitle" is found.')
        except:
            self._screenCapture()
            self._closeWiFiManagerApp()
            time.sleep(1)
            self._clearWiFiManagerApplicationData()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _disconnectWiFiNetwork() encountered and Error")
                self.WeMoAppLog.LogException()
                 
    def _cancelChangesConnectingToWirelessNetworkInWiFiManager(self):
        """
        Cancelling the changes made in the Wifi Connection Manager
        """
        self.result = None
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Cancelling the changes made in the Wifi Connection Manager")
        try:
            for i in range(15):
                if (self.ExperitestClient.isElementFound("NATIVE","id=alertTitle",0)) == True:
                    time.sleep(1)
                    self.ExperitestClient.click("NATIVE","text=Cancel",0,1)
                    time.sleep(2)
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=alertTitle" is found.')
                raise Exception('Raising the Exception as the element:"id=alertTitle" is found.')
        except:
            self._screenCapture()
            self._closeWiFiManagerApp()
            time.sleep(1)
            self._clearWiFiManagerApplicationData()
            time.sleep(1)
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _cancelChangesConnectingToWirelessNetworkInWiFiManager() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _syncTheTimeOnSmartDevice(self,CurrentYear,setDate):
        try:
            self.result = True
        except:
            self._screenCapture()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _syncTheTimeOnSmartDevice() encountered and Error")
                self.WeMoAppLog.LogException()

    def _syncTheTimeActualLocation(self,CurrentYear):
        try:
            self.result = True
        except:
            self._screenCapture()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _syncTheTimeActualLocation() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheTimeOnTheSmartPhonewithRulesetTime(self,RuleTime):
        """
        Verify the time on the Device 
        """
        try:
            # Time_on_Phone_1 = self.ExperitestClient.run("date").strip().split(' ')
            # for t in Time_on_Phone_1:
            #     if ":" in t:
            #         Time_on_Phone = t[0:-3]
            #         break
            for i in range(100):
                Time_on_Phone_1 = self.ExperitestClient.run("date").strip().split(' ')
                for t in Time_on_Phone_1:
                    if ":" in t:
                        Time_on_Phone = t[0:-3]
                        break
                if 'am' in Time_on_Phone or 'pm' in Time_on_Phone or 'AM' in Time_on_Phone or 'PM' in Time_on_Phone:
                    TimeOnPhone= "".join(Time_on_Phone.split(" ")[0].split(":"))
                    if len(TimeOnPhone) != 3:
                        TimeOnPhone = '0'+ TimeOnPhone
            
                    if int(RuleTime.split(":")[0]) > 12:
                        timeToBeChecked="%s:%s"%(int(RuleTime.split(":")[0])-12,RuleTime.split(":")[1])
                    elif int(RuleTime.split(":")[0]) == 0:
                        timeToBeChecked="%s:%s"%("12",RuleTime.split(":")[1])
                    else:
                        timeToBeChecked="%s:%s"%(int(RuleTime.split(":")[0]),RuleTime.split(":")[1])
        
                    TimeToBeCompared = "".join(timeToBeChecked.split(":"))
                    
                    if int(TimeToBeCompared) <= int(TimeOnPhone):
                        break
                    else:
                        print TimeToBeCompared,TimeOnPhone
                        time.sleep(30)
                else:
                    TimeOnPhone="".join(Time_on_Phone.split(":"))  
                    if len(TimeOnPhone) != 3:
                        TimeOnPhone = '0'+ TimeOnPhone 
  
                    TimeToBeCompared = "".join(RuleTime.split(":"))
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Time on phone is %s waiting for time to be %s." % (Time_on_Phone,RuleTime))                    
                    # print   "  TimeToBeCompared"   ,TimeToBeCompared
                    if int(TimeToBeCompared) <= int(TimeOnPhone):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The Time is set to trigger the rule .")
                    
                        break
                    else:
                        time.sleep(30)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Its been a long time now checking more than 50 mins. There is some thing wrong.")
            
            self.result = True

               
        except:        
            self.result = False
            self._screenCapture()
            self._homeScreen()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheTimeOnTheSmartPhonewithRulesetTime() encountered and Error")
                self.WeMoAppLog.LogException()            

    def _verifyTheTimeOnDevice_Jarden(self,RuleTime):
        """
        Verify the time on the Device 
        """
        try:
            if int(RuleTime.split(":")[0]) > 12:
                timeToBeChecked="%s:%s"%(int(RuleTime.split(":")[0])-12,RuleTime.split(":")[1])
            elif int(RuleTime.split(":")[0]) == 0:
                timeToBeChecked="%s:%s"%("12",RuleTime.split(":")[1])
            else:
                timeToBeChecked="%s:%s"%(int(RuleTime.split(":")[0]),RuleTime.split(":")[1])            
        
            OFFSET = self.ExperitestClient.p2cy(3)
            self.ExperitestClient.swipe2("Up",OFFSET,500)
            for i in range(100):
                if(self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'%s')]"%str(RuleTime.split(" ")[0]))):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("THe Time is set") 
                    self.ExperitestClient.swipe2("Down",OFFSET,500)    
                    break
                    
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s')]"%timeToBeChecked, 0):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Time is set now for the app feature to be verified.")
                    self.result = True
                    self.ExperitestClient.swipe2("Down",OFFSET,500)    
                    break             
                                     
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Time is not yet elapsed , so waiting for the time to get elapsed")
                    self.result = True 
                    time.sleep(20) 
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Seems like time has elapsed and now its time to launch the app.")   
                self.result = True  
                self.ExperitestClient.swipe2("Down",OFFSET,500)
                
                    
        except:        
            self.result = False
            self._screenCapture()
            self._homeScreen()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyTheTimeOnDevice_Jarden() encountered and Error")
                self.WeMoAppLog.LogException()            

            
    
    def _verifyWeMoDeviceCompletelyDisplayedOnScreen(self, WeMoFriendlyName, refresh = False):
        """
        Verify the Wemo Device is Completely displayed On screen
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Verify the Wemo Device Completely displayed On screen") 
        try:
            self.result=None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","id=mainContainer",0)) or (self.ExperitestClient.isElementFound ("WEB","id=device_btn",0)):
                    if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/../.."%WeMoFriendlyName,0)):
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.swipe("Down",250)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info ('Raising the Exception as The Device is not available on the device page')
                raise Exception('Raising the Exception as The Device is not available on the device page')
                        
        except:
            self.exception_msg = "Raising the Exception as The Device is not available on the device page"
            self.result = False
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyWeMoDeviceCompletelyDisplayedOnScreen() encountered and Error")
                self.WeMoAppLog.LogException()        
        
    def _verifyRulesTabOnDeviceDiscoveryPage(self):
        """
        Verify Rules Tab On Device Discovery Page
        """ 
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info ("Verify Rules Tab On Device Discovery Page") 
        try:
            self.result = None 
            self._isAppLaunched()
            assert self.result == True
            
            if (self.ExperitestClient.isElementFound("WEB","id=rules_btn",0)):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Rules Tab is displayed on the Device discovery page as non-Jarden products as there on device discovery page ")
                    self.result = True 
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The Rules Tab is displayed on the Device discovery page")
                    self.result = True             
                
        except:        
            self.result = False
            self._screenCapture()
            self._getTheAndroidDeviceLogs()            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRulesTabOnDeviceDiscoveryPage() encountered and Error")
                self.WeMoAppLog.LogException()               
                                
    ###########################################################
    # Scheduler Functions for Jarden Products 
    ########################################################### 
    
    def _verifyIfTheDayIsSelectedOnDailySchedulePage(self,Day):
        """
        Verify if the weekday is selected on the daily schedule page 
        """ 
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info('Verify if the weekday is selected on the daily schedule page')
        try:
            self._isAppLaunched()
            assert self.result == True
           
            self.result=None
            self.Selected_Days = []
            self.Unselected_Days =[]  
            self.Current_Selected_Day = None
            self.Day_Status = None            
            Days = {"Monday":"Mon","Tuesday":"Tue","Wednesday":"Wed","Thursday":"Thu","Friday":"Fri","Saturday":"Sat","Sunday":"Sun"} 
            
            if Day not in Days:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the Days is not correct.Day can be either "Monday","Tuesday","Wedensday","Thursday","Friday" or "Saturday" or "Sunday"')
                raise Exception('Raising the Exception as the Day is not correct.Day can be either "Monday","Tuesday","Wedensday","Thursday","Friday" or "Saturday" or "Sunday"')
            
            if(self.ExperitestClient.isElementFound("WEB","css=DIV.days")) != False:
                WEEKDAY_VALUE_VALUE=self.ExperitestClient.elementGetProperty("WEB","css=DIV.days",0,"innerHTML")
                 
                for Day_List in WEEKDAY_VALUE_VALUE.split('\n'):
                    if "currentDaySelect daySelect" in Day_List :
                        self.Selected_Days.append(Day_List[-16:-13]) 
                        self.Current_Selected_Day = Days[Day]
                    elif "daySelect" in Day_List:
                        self.Selected_Days.append(Day_List[-16:-13]) 
                    else:   
                         self.Unselected_Days.append(Day_List[-16:-13])
                
                if Days[Day] in self.Selected_Days:
                    self.Day_Status = True 
                    self.result= True    
                else:
                    self.Day_Status = False                    
                self.result= True 
                
            elif(self.ExperitestClient.isElementFound("WEB","css=DIV.weekDays")) != False:
                WEEKDAY_VALUE_VALUE=self.ExperitestClient.elementGetProperty("WEB","css=DIV.weekDays",0,"innerHTML")
                 
                for Day_List in WEEKDAY_VALUE_VALUE.split('\n'):
                    if "focus daySelect" in Day_List and Days[Day]:
                        self.Selected_Days.append(Day_List[-16:-13]) 
                        self.Current_Selected_Day = Day_List[-16:-13]
                    elif "daySelect" in Day_List:
                        self.Selected_Days.append(Day_List[-16:-13]) 
                    else:   
                         self.Unselected_Days.append(Day_List[-16:-13])
                         
                if Days[Day] in self.Selected_Days:
                    self.Day_Status = True 
                    self.result= True    
                else:
                    self.Day_Status = False
                    
                self.result= True                        
            else:    
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"css=DIV.days" could not be found.')    
                raise Exception('Raising the Exception as the element:"css=DIV.days" could not be found.')   
            
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            self.Day_Status = None 
            self.Current_Selected_Day = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyIfTheDayIsSelectedOnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()

   
    def _selectTheDayOn_DailySchedulePage(self,Day):  
        '''
        Select The Day On Daily SchedulePage for Humidifier Device.
        ''' 
        if self.WeMoAppLog != None:    
            self.WeMoAppLog.Info("Select The Day On Daily SchedulePage for Humidifier Device.")      
        Days = {"Monday":"Mon","Tuesday":"Tue","Wednesday":"Wed","Thursday":"Thu","Friday":"Fri","Saturday":"Sat","Sunday":"Sun"}   
        
        if Day not in  Days:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Raising the Exception as the Day is not correct.Day can be either "Monday","Tuesday","Wedensday","Thursday","Friday" or "Saturday" or "Sunday"')
            raise Exception('Raising the Exception as the Day is not correct.Day can be either "Monday","Tuesday","Wedensday","Thursday","Friday" or "Saturday" or "Sunday"')
        try:
            self._isAppLaunched()
            assert self.result == True
           
            self.result = None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Daily Schedule")):
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB","text=BREW SCHEDULE",0)):
                    self.result = True
                    break
                time.sleep(1)                
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Daily Schedule" could not be found.')            
                
            self._verifyIfTheDayIsSelectedOnDailySchedulePage(Day) 
            assert self.result == True  
            if (self.ExperitestClient.isElementFound("WEB","css=DIV.days",0)):
                if self.Day_Status == True:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("The %s is already selected"%Days[Day]) 
                elif self.Day_Status ==  False:
                    if (self.ExperitestClient.isFoundIn("WEB", "css=DIV.days",0,"inside","WEB","text=%s"%Days[Day],0,0)) != False:
                        self.ExperitestClient.click("WEB","text=%s"%Days[Day],0,1) 
                        self.result= True 
                        self._verifyIfTheDayIsSelectedOnDailySchedulePage(Day) 
                        assert self.result == True 
                        assert self.Day_Status == True   
                        if self.WeMoAppLog != None:        
                            self.WeMoAppLog.Info('%s is Selected'%Days[Day])
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the text=%s"'%Days[Day])
                        raise Exception('Raising the Exception as the text=%s"'%Days[Day])     
            
            elif(self.ExperitestClient.isElementFound("WEB","css=DIV.weekDays",0)):  
                if self.Day_Status == True:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("The %s is already selected"%Days[Day]) 
                elif self.Day_Status ==  False:
                    if (self.ExperitestClient.isFoundIn("WEB", "css=DIV.weekDays",0,"inside","WEB","text=%s"%Days[Day],0,0)) != False:
                        self.ExperitestClient.click("WEB","text=%s"%Days[Day],0,1) 
                        self.result= True 
                        self._verifyIfTheDayIsSelectedOnDailySchedulePage(Day) 
                        assert self.result == True 
                        assert self.Day_Status == True  
                        if self.WeMoAppLog != None:    
                            self.WeMoAppLog.Info('%s is Selected'%Days[Day])
                    else:
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Error('Raising the Exception as the text=%s"'%Days[Day])
                        raise Exception('Raising the Exception as the text=%s"'%Days[Day])              
                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheDayOn_DailySchedulePage() encountered and Error") 
                self.WeMoAppLog.LogException()                    
                                 
    def _unselectTheDayOn_DailySchedulePage(self,Day):
        """
        Un select the weekday if selected on the daily schedule page. 
        """ 
        self._verifyIfTheDayIsSelectedOnDailySchedulePage(Day) 
        assert self.result == True         
        
        Days = {"Monday":"Mon","Tuesday":"Tue","Wednesday":"Wed","Thursday":"Thu","Friday":"Fri","Saturday":"Sat","Sunday":"Sun"}   
        
        if Day not in Days:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error('Raising the Exception as the Days is not correct.Day can be either "Monday","Tuesday","Wedensday","Thursday","Friday" or "Saturday" or "Sunday"')
            raise Exception('Raising the Exception as the Day is not correct.Day can be either "Monday","Tuesday","Wedensday","Thursday","Friday" or "Saturday" or "Sunday"')
        
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result=None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "text=Daily Schedule")):
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB","text=BREW SCHEDULE",0)):
                    self.result = True
                    break                    
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Daily Schedule" could not be found.')    
            for i in range(5):     
                if Days[Day] in self.Selected_Days and Days[Day] == self.Current_Selected_Day:
                    self.ExperitestClient.click("WEB","text=%s"%Days[Day],0,1)
                    self.result = True  
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("%s is UnSelected "%Days[Day]) 
                    break
                elif Days[Day] in self.Selected_Days:
                    self.ExperitestClient.click("WEB","text=%s"%Days[Day],0,1)
                    time.sleep(5)
                    self.ExperitestClient.click("WEB","text=%s"%Days[Day],0,1)
                    self.result = True  
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("%s is UnSelected "%Days[Day])             
                    break
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("%s is already Unselected"%Days[Day])  
                    break 
                    
                time.sleep(5)     
                    
                                
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectTheDayOn_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                        

    def _selectDaily_OnDailySchedulePage(self):
        """
        Click all days of the week on Daily Schedule Page
        """    
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result = None
            Days = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            for day in Days:
                self._selectTheDayOn_DailySchedulePage(day) 
                assert self.result == True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectDaily_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()        

    def _unselectAllDays_onDailySchedulePage(self):
        """
        Click all days of the week on Daily Schedule Page
        """    
        try:
            self._isAppLaunched()
            assert self.result == True
        
            self.result = None
            Days = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            for day in Days:
                self._unselectTheDayOn_DailySchedulePage(day)
                assert self.result == True
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _unselectAllDays_onDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()          
   
    def clickOnTime_DailySchedulePage(self):
        """
        Click on the Start Time in the Daily Schedule Page.
        """
        self.WeMoAppLog.Info("Click on the Start Time in the Daily Schedule Page.")    
        try:
            self._isAppLaunched()
            assert self.result == True
            
            self.result=None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Daily Schedule']")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Daily Schedule"  could not be found.')
                raise Exception('Raising the Exception as the element:"text=Daily Schedule" could not be found.')        
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=On")):
                    self.ExperitestClient.clickInsideAnElement2_5("WEB", "css=DIV.setupScheduleHour",0,"inside","WEB","css=LI.form-list-select",0,0,1)
                    time.sleep(1)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("WEB", "text=Start")):
                    self.ExperitestClient.clickInsideAnElement2_5("WEB", "css=DIV.onOption",0,"inside","WEB","css=LI.form-list-select",0,0,1)
                    time.sleep(1)
                    self.result = True
                    break 
                    
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=On" could not be found.')
                raise Exception('Raising the Exception as the element:"text=On" could not be found.')
    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTime_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                
            
    def clickOffTime_DailySchedulePage(self): 
        """
        Click on the End Time in the Daily Schedule Page.
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on the End Time in the Daily Schedule Page.")    
        try:
            #self._isAppLaunched()
            #assert self.result == True
            
            self.result=None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Daily Schedule']")):
                    self.result = True
                    break                                       
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Daily Schedule"  could not be found.')
                raise Exception('Raising the Exception as the element:"text=Daily Schedule" could not be found.')        
            
            for i in range(10):
                if((self.ExperitestClient.isElementFound("WEB", "text=Off",1)) or (self.ExperitestClient.isElementFound("WEB", "text=Off")))!= False: 
                    self.ExperitestClient.clickInsideAnElement2_5("WEB", "css=DIV.setupScheduleHour",1,"inside","WEB","css=LI.form-list-select",0,0,1)
                    time.sleep(1)
                    self.result = True
                    break
                    
                elif(self.ExperitestClient.isElementFound("WEB", "text=End")):
                    self.ExperitestClient.clickInsideAnElement2_5("WEB", "css=DIV.offOption",0,"inside","WEB","css=LI.form-list-select",0,0,2)
                    time.sleep(1)
                    self.result = True
                    break                     
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=On" could not be found.')
                raise Exception('Raising the Exception as the element:"text=On" could not be found.')

        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnTime_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                
            
    def _selectTheStartTimeOn_DailySchedulePage(self,hour,minutes,am_pm): 
        '''
        Select The Start Time On Daily SchedulePage
        '''
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select The Start Time On Daily SchedulePage %s:%s %s." %(hour,minutes,am_pm))    
        if int(hour)> 12:
            Hour_12=int(hour)-12
            Hour=str(Hour_12) 
        else:
            Hour=str(hour)             
        Minutes = str(minutes)
        AM_PM = str(am_pm).upper()  
        
        try:
       
            self.result=None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='On']")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Start Time" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Start Time" could not be found.')        
            
            for i in range(12):
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.dw-li.dw-v.dw-sel",0)):
                    time.sleep(1)
                    if int(self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 0).strip()) == int(Hour):
                        break
                    if (int(Hour) < int(5)):    
                        self.ExperitestClient.click("WEB", "css=A.dwb-e.dwwb.dwwbm[href='#']", 0, 1)
                    else:
                        self.ExperitestClient.click("WEB", "text=+",0,1)
                    time.sleep(1) 
                    
            Present_time = int( self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 1).strip()) 
            for i in range(60): 
                if self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 1).strip() == str(Minutes):
                    break                            
                if int(Present_time) > int(minutes):                     
                    self.ExperitestClient.click("WEB", "css=A.dwb-e.dwwb.dwwbm[href='#']", 1, 1) 
                else:
                    self.ExperitestClient.click("WEB", "text=+", 1, 1)                   
                
       
            for i in range(3) :
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.dw-li.dw-v.dw-sel",2)):
                    time.sleep(1)
                    if self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 2).strip() == str(AM_PM):
                        break
                    self.ExperitestClient.click("WEB", "css=SPAN.upArrow",0,1)
                    time.sleep(1)  
            
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheStartTimeOn_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()  
        
    def _selectTheEndTimeOn_DailySchedulePage(self,hour,minutes,am_pm): 
        '''
        Select The End Time On Daily SchedulePage
        '''
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Select The End Time On Daily SchedulePage %s:%s %s." %(hour,minutes,am_pm))     
        if int(hour)> 12: 
            Hour_12=int(hour)-12
            Hour=str(Hour_12) 
        else:
            Hour=str(hour)
          
        Minutes = str(minutes)
        AM_PM = str(am_pm).upper()  
               
        try:

            self.result=None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Off']")):
                    self.result = True
                    break
                time.sleep(1)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=End Time" could not be found.')
                raise Exception('Raising the Exception as the element:"text=End Time" could not be found.')        
            
            
            for i in range(12):
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.dw-li.dw-v.dw-sel",0)):
                    time.sleep(1)
                    if int(self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 0).strip()) == int(Hour):
                        break
                    
                    if (int(Hour) < int(5)):    
                        self.ExperitestClient.click("WEB", "css=A.dwb-e.dwwb.dwwbm[href='#']", 0, 1)
                    else:
                        self.ExperitestClient.click("WEB", "text=+",0,1)
                    time.sleep(1)                    

            Present_time = int( self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 1).strip()) 
            for i in range(60): 
                if self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 1).strip() == str(Minutes):
                    break                            
                if int(Present_time) > int(minutes):                     
                    self.ExperitestClient.click("WEB", "css=A.dwb-e.dwwb.dwwbm[href='#']", 1, 1) 
                else:
                    self.ExperitestClient.click("WEB", "text=+", 1, 1)                   
                    
            for i in range(3):
                if(self.ExperitestClient.isElementFound("WEB", "css=DIV.dw-li.dw-v.dw-sel",2)):
                    time.sleep(1)
                    if self.ExperitestClient.elementGetText("WEB", "css=DIV.dw-li.dw-v.dw-sel", 2).strip() == str(AM_PM):
                        break
                    self.ExperitestClient.click("WEB", "css=SPAN.upArrow",0,1)
                    time.sleep(1)  
            
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheEndTimeOn_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                
        
    def clickOnSetButtonToConfirmTimeOn_DailySchedulePage(self):
    
        """
        Click on Set Button to Confirm Start or End time on Daily Schedule Page. 
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on Set Button to Confirm Start or End time on Daily Schedule Page.")
        try:
        
            self.result=None
            for i in range(3):
                if ((self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Off']")) or (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='On']"))) != False:
                    if self.ExperitestClient.isElementFound("WEB","text=Set") != False:
                        self.ExperitestClient.click("WEB","text=Set",0,1) 
                        self.result=True
                        break 
                
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Set" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Set" could not be found.')                
                
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnSetButtonToConfirmTimeOn_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()   


    def clickOnCancelButtonToConfirmTimeOn_DailySchedulePage(self):
  
        """
        Click on Cancel Button to Cancel Start or End time on Daily Schedule Page. 
        """
        
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Click on Cancel Button to Cancel Start or End time on Daily Schedule Page. ")
        try:
            self.result=None
            for i in range(3):
                if ((self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Off']")) or (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='On']"))) != False:
                    if self.ExperitestClient.isElementFound("WEB","css=A.dwb.dwb0.dwb-e[href='#']") != False:
                        self.ExperitestClient.click("WEB","css=A.dwb.dwb0.dwb-e[href='#']",0,1) 
                        if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Daily Schedule']")) != False:
                            self.result=True
                            break 
             
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Cancel" could not be found.')                
                
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method clickOnCancelButtonToConfirmTimeOn_DailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()   
            

                
    ###############################################################################################################
    ################
    #Main Functions#
    ################  
    
    def _checkAndEnableRemoteAccess(self,appIdentifier,routerSSID,routerWirelessPassword,routersecurity="WPA2PSK"):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param routerSSID: The router ssid to which the wemo has to be set up 
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network 
        @type routerWirelessPassword: String
        @param routersecurity: The Wireless Password for the Wireless Network 
        @type routersecurity: String
        """
        try:
            
            self.result = None                                 
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info('Check and enable remote access.')
            
            if routersecurity in ["WPA2","WPA2PSK"]:    
                self._selectTheWifiFromWifiManager(routerSSID,routerWirelessPassword)  
                assert self.result == True 
                
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info('Launch the WeMo App.')                  
    
            self._launchWemoApp(appIdentifier)
            assert self.result == True 

            if (self.result):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('The WeMo App has launched successfully.')

                self._clickOnMoreTab()
                assert self.result == True
                                              
                self._clickOnRemoteAccessTab()
                assert self.result == True
                
                self._checkForRemoteAccessDisabled()
                assert self.result == True
                
                if self.remoteAccessEnabled  == True:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info('Remote Access is already Enabled.')
                        self._closeApplication(appIdentifier)
                        assert self.result == True
                        self.result = True
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info('Remote Access is not Enabled. Enabling Remote Access')
                    self._clickOnEnableRemoteAccess()
                    assert self.result == True
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info('Remote Access is enabled now for the router <%s>'%routerSSID)
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _checkAndEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
    
    
    
    def _forgetAllWifiNetworkfromWifiSelectionPage(self):
        """
        Initially forgetting all the wifi networks on the Wifi Manager 
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info ("Forgetting all the wifi networks on the Wifi Manager")
        self.result = None
        self._launchWiFiManagerApp()
        assert self.result == True
        try:
            self.ExperitestClient.click("NATIVE","xpath=//*[@id='forget_network_button']")
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Forget Networks Succeeded']"):
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            self._closeWiFiManagerApp()
                    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _forgetAllWifiNetworkfromWifiSelectionPage() encountered and Error")
                self.WeMoAppLog.LogException()              

                
    #############################################################################
    ##                          CLOCK SYNC API                                ###
    #############################################################################
    
    def _selectTheDayOnSettingApp(self,Day,Month = None ,Year = None):
        '''
        Select the Day on the settings app 
        @param Day : The day to be selected 
        @type      : String
        @param Day : The Month to be selected 
        @type      : String   
        @param Day : The Year to be selected 
        @type      : String   
        '''
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info ("Select the Day on the settings app ") 
        
        try:
            self.exception_msg = None 
            self.result = None 
            OFFSET = self.ExperitestClient.p2cy(3)
            self.ExperitestClient.swipe2("Up",OFFSET,500) 
            ##
            #### Selecting the Settings from notification screen 
            MONTH_VAL = {"01":"Jan","02":"Feb","03":"Mar","04":"Apr","05":"May","06":"Jun","07":"Jul","08":"Aug","09":"Sep","10":"Oct","11":"Nov","12":"Dec"}
            
            
            for i in range(5):
                ###########################################################
                ###              CODE FOR SAMSUNG                      ####
                ###########################################################                            
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@contentDescription='System settings']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@contentDescription='System settings']",0,1)
                    time.sleep(3)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("Setting App is selected on the mobile device ") 
                    break 
                ###########################################################
                ###              CODE FOR NEXUS 5 LOLLIPOP             ####
                ###########################################################                
                
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@contentDescription='Settings']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@contentDescription='Settings']",0,1)
                    time.sleep(3)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("Setting App is selected on the mobile device ") 
                    break 
                    
                else:
                    self.ExperitestClient.swipe2("Up",OFFSET,500) 
                
                
            else:
                self.exception_msg = "The Setting button couldn't be selected on the Notification Page of the mobile device"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Please close the app and check your remote access again after sometime.')
                self.result = False
                    
            ## Selectig the Date & time option from settings Page
            for i in range(5):
                ###########################################################
                ###              CODE FOR SAMSUNG                      ####
                ###########################################################                                        
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.app.ActionBar$Tab']/..//*[contains(@text,'More')]",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@class='android.app.ActionBar$Tab']/..//*[contains(@text,'More')]",0,1)
                    time.sleep(3)                    
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("More Tab is clicked to go to the Date & time selection") 
                        
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Date and time')]",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Date and time')]",0,1)
                        time.sleep(3)                        
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Date and Time tab is selected") 
                        self.result = True     
                        break     
                    else:
                        self.ExperitestClient.swipe2("Down",800,1000)
                        
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='General']",0):  
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='General']",0,1)
                    time.sleep(3)                    
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("General Tab is clicked to go to the Date & time selection") 
                        
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Date and time')]",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Date and time')]",0,1)
                        time.sleep(3)                        
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Date and Time tab is selected") 
                        self.result = True     
                        break     
                    else:
                        self.ExperitestClient.swipe2("Down",800,1000)
                        
                ###########################################################
                ###              CODE FOR NEXUS 5 LOLLIPOP             ####
                ###########################################################                
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Settings']",0):  
                    time.sleep(3)                    
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("Its in Settings Page go to the Date & time selection") 
                    
                     
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Date & time' and @onScreen='true']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Date & time' and @onScreen='true']",0,1)
                        time.sleep(3)                        
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Date and Time tab is selected") 
                        self.result = True     
                        break     
                    else:
                        self.ExperitestClient.swipe2("Down",800,1000)
                        
            else:
                self.exception_msg = "The 'Date and time' couldn't be selected on the Setting page of the mobile device"            
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Please close the app and check your remote access again after sometime.')
                self.result = False                
            
            ## Automatic data & time update turn off 
            for i in range(3):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set date' and @enabled='false']",0) == False:     
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("Automatic Update of the Date and time is  already Turned off")                     
                    self.result = True    
                    break     
                else:   
                    ###########################################################
                    ###              CODE FOR SAMSUNG                      ####
                    ###########################################################                 
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Automatic date and time']/../..",0): 
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Automatic date and time']/../..",0,1)
                        time.sleep(3) 
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Automatic Update of the Date and time is Turned off") 
                        self.result = True 
                        break 

                    ###########################################################
                    ###              CODE FOR NEXUS 5 LOLLIPOP             ####
                    ###########################################################                         
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Automatic date & time']/../..",0): 
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Automatic date & time']/../..",0,1)
                        time.sleep(3) 
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Automatic Update of the Date and time is Turned off") 
                        self.result = True 
                        break                        
                         
            ## Selecting the Day of the week on the mobile device        
            for i in range (10):                       
                ###########################################################
                ###              CODE FOR SAMSUNG                      ####
                ###########################################################            
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set date']",0): 
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Set date']",0,1)
                    time.sleep(5)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.TextView']",0):     
                        self.result = True 
                        break 
                   
                ###########################################################
                ###              CODE FOR NEXUS 5 LOLLIPOP             ####
                ###########################################################                            
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set date']",0): 
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Set date']",0,1)
                    time.sleep(5)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.TextView']",0):     
                        self.result = True 
                        break                    
                   
                   
            for i in range(20):     
                ###########################################################
                ###              CODE FOR SAMSUNG                      ####
                ###########################################################  
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@contentDescription='Increase day']",0):     
                    if self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@contentDescription='Increase day']",0,"Down","NATIVE","text=%s"%str(Day),0,0):
                        if self.WeMoAppLog != None :
                            self.WeMoAppLog.Info("The Day is selected on the settings page")
                        self.result    
                        break     
                    else:  
                        self.ExperitestClient.click("NATIVE","xpath=//*[@contentDescription='Increase day']",0,1)
                
                ###########################################################
                ###              CODE FOR NEXUS 5 LOLLIPOP             ####
                ###########################################################       

                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.ListView']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[contains(@contentDescription,'%s')]"%Day,0)
                    time.sleep(5)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@contentDescription,'%s')]"%Day,0):    
                        if self.WeMoAppLog != None :
                            self.WeMoAppLog.Info("The Day is selected on the settings page")
                        self.result    
                        break                     
                
            if Month != None :                
                ### Selecting the Month            
                for i in range(20):                                                                    
                    if self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@contentDescription='Increase month']",0,"Down","NATIVE","text=%s"%MONTH_VAL[Month],0,0):
                        if self.WeMoAppLog != None :
                            self.WeMoAppLog.Info("The Month is selected on the settings page")
                        self.result    
                        break     
                    else:     
                        self.ExperitestClient.click("NATIVE","xpath=//*[@contentDescription='Increase month']",0,1)
    
    
            if Year != None:
                ### Selecting the Year
                for i in range(20):
                    if str(self.ExperitestClient.elementGetText("NATIVE", "xpath=//*[@class='android.widget.EditText']", 2).strip()) == str(Year):
                        if self.WeMoAppLog != None :
                            self.WeMoAppLog.Info("The Month is selected on the settings page")
                        self.result    
                        break     
                    else:  
                        self.ExperitestClient.click("NATIVE","xpath=//*[@contentDescription='Increase year']",0,1)
        
            
            ## Selecting the Time on the mobile device  
            if   Time_to_be_set != None:  
                for i in range (10):                       
                    ###########################################################
                    ###              CODE FOR SAMSUNG                      ####
                    ###########################################################            
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set date']",0): 
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Set date']",0,1)
                        time.sleep(5)
                        if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.TextView']",0):     
                            self.result = True 
                            break 
                        
                    ###########################################################
                    ###              CODE FOR NEXUS 5 LOLLIPOP             ####
                    ###########################################################                            
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set date']",0): 
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Set date']",0,1)
                        time.sleep(5)
                        if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.widget.TextView']",0):     
                            self.result = True 
                            break                    
        
                
            ## Clicking on Set Button or Ok Button 
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set']",0)):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Set']",0,1)
                    time.sleep(3)
                    break 
                    
                elif (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK']",0)):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                    time.sleep(3)
                    break     

            self._homeScreen()
            assert self.result == True    
    
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheDayOnSettingApp() encountered and Error")
                self.WeMoAppLog.LogException()                         
                

    def _bringTheDateToAutoOnSettingApp(self):
        '''
        Select Automatic from network for Day on the settings app 
        '''
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info ("Select Automatic from network for Day on the settings app ") 
        
        try:
            self.exception_msg = None 
            self.result = None 
            OFFSET = self.ExperitestClient.p2cy(3)
            self.ExperitestClient.swipe2("Up",OFFSET,500) 
            ##

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@contentDescription='System settings']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@contentDescription='System settings']",0,1)
                    time.sleep(3)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("Setting App is selected on the mobile device ") 
                    break 
            else:
                self.exception_msg = "The Setting button couldn't be selected on the Notification Page of the mobile device"
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Please close the app and check your remote access again after sometime.')
                self.result = False
                    
            ## Selectig the Date & time option from settings Page
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='android.app.ActionBar$Tab']/..//*[contains(@text,'More')]",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@class='android.app.ActionBar$Tab']/..//*[contains(@text,'More')]",0,1)
                    time.sleep(3)                    
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("More Tab is clicked to go to the Date & time selection") 
                        
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Date and time')]",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Date and time')]",0,1)
                        time.sleep(3)                        
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Date and Time tab is selected") 
                        self.result = True     
                        break     
                    else:
                        self.ExperitestClient.swipe2("Down",800,1000)
                        
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='General']",0):  
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='General']",0,1)
                    time.sleep(3)                    
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("General Tab is clicked to go to the Date & time selection") 
                        
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Date and time')]",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Date and time')]",0,1)
                        time.sleep(3)                        
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Date and Time tab is selected") 
                        self.result = True     
                        break     
                    else:
                        self.ExperitestClient.swipe2("Down",800,1000)
                        
                        
            else:
                self.exception_msg = "The 'Date and time' couldn't be selected on the Setting page of the mobile device"            
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info('Please close the app and check your remote access again after sometime.')
                self.result = False                
            
            ## Automatic data & time update turn off 
            for i in range(3):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set date' and @enabled='false']",0) == False:     
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Automatic date and time']/../..",0,1) 
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info ("Automatic Update of the Date and time is Turned on")                     
                    self.result = True    
                    break     

                        
                else:   
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Automatic date and time']/../..",0): 
                        time.sleep(3) 
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info ("Automatic Update of the Date and time is Turned on") 
                        self.result = True 
                        break 
                                        
            self._homeScreen()
            assert self.result == True    
                   
        except:
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheDayOnSettingApp() encountered and Error")
                self.WeMoAppLog.LogException()
       
    def _bringToPersonalizePage(self,appIdentifier,WeMoSmartPhoneSSIDName,WeMoDeviceType,routerSSID,routerWirelessPassword):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param WeMoSmartPhoneSSIDName: The Wemo Smart Phone SSID Name
        @type WeMoSmartPhoneSSIDName: String 
        @param WeMoFriendlyName: The Wemo Friendly Name 
        @type WeMoFriendlyName: String
        @param routerSSID: The router ssid to which the wemo has to be set up 
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network 
        @type routerWirelessPassword: String
        """
        
        self._unlockAndroid()
        assert self.result == True
     
        self._launchWiFiManagerApp()
        assert self.result == True 
        
        for i in range(3):
            self._selectTheSSIDInTheNetworkListInWiFiManager(WeMoSmartPhoneSSIDName)                
            self.ExperitestClient.sleep(4000)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='%s']/..//*[contains(@text,'Connected')]"%WeMoSmartPhoneSSIDName, 0): 
                self._closeWiFiManagerApp()
                assert self.result == True 
                if self.WeMoAppLog != None:    
                    self.WeMoAppLog.Info("WeMo Device is connected to the Network")
                break 
                
            elif self.result == False:
                self._closeWiFiManagerApp()
                assert self.result == True
                self._launchWiFiManagerApp()
                assert self.result == True


    def _wemoCouldNotConnectToWiFiPopUp(self):
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("verifying no wifi pop up on wemo")
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='NO NETWORK CONNECTION']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("no wifi pop up on wemo verified")
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                self.wemoConnectFailure = False
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('The Wemo Connection To Wifi Failed Error Pop up did not appear.')

        except:
            self.exception_msg = "Raising the Exception as the no wifi pop up could not be found."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _wemoCouldNotConnectToWiFiPopUp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _handleDimmerSetupScreens(self):
        try:
            self.result = False
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Next']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Test']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Yes']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Test']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Yes']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Next']")
            self.result = True
        except:
            self.exception_msg = "Raising the Exception as the dimmer setup screens can not be verified."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _handleDimmerSetupScreens() encountered and Error")
                self.WeMoAppLog.LogException()

    def setupWemoApp(self,appIdentifier,WeMoSerialNumber,WeMoSmartPhoneSSIDName,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity,WeMoDeviceType,wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=True,uncheckRememberWiFiSettings=False,email_opt_screen = False,want_email_promos = False):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param WeMoSmartPhoneSSIDName: The Wemo Smart Phone SSID Name
        @type WeMoSmartPhoneSSIDName: String
        @param WeMoFriendlyName: The Wemo Friendly Name
        @type WeMoFriendlyName: String
        @param routerSSID: The router ssid to which the wemo has to be set up
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network
        @type routerWirelessPassword: String
        @param email_opt_screen: True if email opt in screen is expected and needs to be validated otherwise False
        @param want_email_promos: True if "its OK" is checked otherwise False
        """
        try:
            # the flag to enable the testing of email optin feature. If False, the email opt in feature wont be tested
            email_opt_feature = True
            self._unlockAndroid()
            assert self.result == True

            # Forgetting all the learned networks
            if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Forgetting all wifi from setup function')
            if forgetwififromsettingspage:
                self._forgetAllWifiNetworkfromWifiSelectionPage()
                assert self.result == True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Continue without forgetting the Wifi on the Settings-Wifi page.')

            # Learning the home router
            self.SSIDPageSeen = False
            if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Learning home router <%s> with pwd <%s>.'%(routerSSID,routerWirelessPassword))
            self._selectTheWifiFromWifiManager(routerSSID,routerWirelessPassword)

            # Connecting to the wemo to be setup
            self._launchWiFiManagerApp()
            assert self.result == True
            for i in range(3):
                self._selectTheSSIDInTheNetworkListInWiFiManager(WeMoSmartPhoneSSIDName)
                if self.result:
                    self._closeWiFiManagerApp()
                    assert self.result == True
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("WeMo Device is connected to the Network")
                    break

                else:
                    self.result = False
                    self._closeWiFiManagerApp()
                    assert self.result == True
                    self._launchWiFiManagerApp()
                    assert self.result == True


            # Closing and launching wemo and starting the setup process
            self._closeApplication(appIdentifier)
            assert self.result == True
            self._clearApplicationData(appIdentifier)
            assert self.result == True
            self._launchWemoApp(appIdentifier)
            assert self.result == True
            for i in range(5):
                self._verifyAndCheckForThePersonalizePage()
                self._verifyDefaultWemoFriendlyNameOnPersonalizePage(WeMoFriendlyName,WeMoDeviceType)
                if self.result == False:
                    if(self.ExperitestClient.isElementFound("WEB","text=No Network Connection",0)):
                        self._closeApplication(appIdentifier)
                        assert self.result == True
                        self._launchWemoApp(appIdentifier)
                        assert self.result == True
                    else:
                        self._closeApplication(appIdentifier)
                        assert self.result == True
                        self._launchWemoApp(appIdentifier)
                        assert self.result == True
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The WeMo APP is in Personalize Page")

                else:
                    self._enterWemoFriendlyName(WeMoFriendlyName,WeMoSmartPhoneSSIDName)
                    assert self.result == True
                    if uncheckRememberWiFiSettings == True:
                        self._uncheckRememberWiFiSettingsInPersonalizePage()
                        assert self.result == True
                    self._clickOnPersonalizeButton(verify_email=False)
                    assert self.result == True
                    time.sleep(self.delay*3)
                    # handling the setup screens specific to dimmer setup
                    if WeMoDeviceType == "Dimmer":
                        self._handleDimmerSetupScreens()
                        assert self.result == True
                    if email_opt_feature:
                        if email_opt_screen:
                            self.verifyEmailOptIn(want_email_promos)
                    break
            time.sleep(self.delay*4)
            for i in range(5):
                if not email_opt_screen: # hack: as there are scenarios where we will not be able to know the status of app(fresh or old) and the sequence of test cases to determine whether the email opt in screen
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Email']"):  # will appear or not; however email opt in feature will be tested in setup cases 89 and 90
                        self.verifyEmailOptIn(want_email_promos)
                        break

            # selecting the home router to complete the pairing
            self.ExperitestClient.waitForElement("WEB", "xpath=//*[@text='Select Your Home Wi-Fi Network']",0,5*60*1000) # waiting for the site survey to get completed
            if uncheckRememberWiFiSettings == True or email_opt_screen or self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Select Your Home Wi-Fi Network']"):  # as if wifi setings are remembered the site survey screen will not appear # hack: to handle site survey screen when it is not supposed to appear
                for i in range(5):
                    if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Select Your Home Wi-Fi Network']")):
                        # self._checkForWeMoSetupScreen()
                        # assert self.result == True
                        self._selectTheSSIDInTheNetworkListInWemoApp(routerSSID)
                        assert self.result == True
                        self._enterWirelessSecurityPasswordInWemoApp(password=routerWirelessPassword)
                        assert self.result == True
                        self._clickOnJoinButtonToAssociateWemoToRouter()
                        time.sleep(120)  # waiting for the setup to get complete
                        assert self.result == True
                        self.SSIDPageSeen = True
                        break
                    else:
                        time.sleep(4*self.delay)
                else:
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The site survey screen did not show up.")
                        raise Exception("The site survey screen did not show up.")
            else:
                time.sleep(120)  # waiting for the setup to get complete  # setup is in progress and the site survey did not appear

            # self.remoteAccess = False
            # # self._checkForRemoteAccess(routerSSID,routerWirelessPassword,WeMoSmartPhoneSSIDName,WeMoSerialNumber)
            # if (self.ExperitestClient.isElementFound("WEB","xpath=//*[@id='remote_status_body']",0)):
            #     if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='OK']",0):
            #         if self.WeMoAppLog != None:
            #             self.WeMoAppLog.Info("Remote Access got enabled")
            #         self.ExperitestClient.click("WEB","xpath=//*[@text='OK']",0)
            #         self.remoteAccess = True
            #         time.sleep(5 * self.delay)  # waiting for the discovery to get complete
            #     else:
            #         if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Later']",0):
            #             if self.WeMoAppLog != None:
            #                 self.WeMoAppLog.Info("Remote Access did not get enabled")
            #             self.ExperitestClient.click("WEB","xpath=//*[@text='Later']",0)
            #             self.remoteAccess = False
            #             time.sleep(5 * self.delay)  # waiting for the discovery to get complete
            #
            # ssdp.discover(WeMoSerialNumber,"urn:Belkin:service:basicevent:1")
            # self.WeMoIP = ssdp.ipOfWeMoDevice
            # if self.WeMoIP == None:
            #     self.result = False
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Info("The WeMo device = %s is not paired to the network , Failed to setup the device "%WeMoDeviceType)
            #         raise Exception("The WeMo device = %s is not paired to the network , Failed to setup the device "%WeMoDeviceType)
            # else:
            #     if self.WeMoAppLog != None:
            #         self.result = True
            #         self.WeMoAppLog.Info("The WeMo device = %s is successfully paired to the home network "%WeMoDeviceType)


            self._closeApplication(appIdentifier)
            assert self.result == True
            self._selectTheWifiFromWifiManager(routerSSID,routerWirelessPassword)
        except:
            self.exception_msg = "Raising the Exception as the setup for wemo could not e completed."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method setupWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyDefaultWemoFriendlyNameOnPersonalizePage(self,WeMoFriendlyName,WeMoDeviceType):
        try:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying default name for <%s> on personalize screen."%WeMoDeviceType)

            WemoDefaultNames = {"Dimmer":"Wemo Dimmer","Switch":"WeMo Switch","Sensor":"WeMo Motion","Insight":"WeMo Insight","Motion":"WeMo Motion","Light":"WeMo Light Switch","AirPurifier":"AirPurifierPersonalize","Humidifier":"HumidifierPersonalize","SlowCooker":"SlowCookerPersonalize","CoffeeMaker":"CoffeeMakerPersonalize","HeaterA":"HeaterAPersonalize","Maker":"WeMo Maker","HeaterB":"HeaterAPersonalize","InsightV2":"WeMo Insight"}
            if WeMoDeviceType not in WemoDefaultNames:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')
                raise Exception('Raising the Exception as the WeMoDeviceType is not correct.WeMo Device Type can be either "Switch","Sensor"or "Insight"')

            # ID change in Dagobah
            # till dagobah: self.ExperitestClient.elementGetProperty("WEB","xpath=//*[@id='friendly_name']",0,"placeholder")
            # from dagobah: self.ExperitestClient.elementGetProperty("WEB","xpath=//*[@id='friendly_name']",0,"text")
            for i in range(5):
                if self.ExperitestClient.elementGetProperty("WEB","xpath=//*[@id='friendly_name']",0,"text").__contains__(WemoDefaultNames[WeMoDeviceType]):
                    self.result = True
                    break

            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:xpath=//*[@id=friendly_name] could not be found.')
                raise Exception('Raising the Exception as the element:xpath=//*[@id=friendly_name] could not be found.')

        except:
            self.exception_msg = "Raising the exception as default name of wemo can not be verified."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyDefaultWemoFriendlyNameOnPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()

    def verifyEmailOptIn(self,its_ok):
        try:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying email opt in scenarios")
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Email']") and self.ExperitestClient.isElementFound("WEB","xpath=//*[@class='opt_in_check selected']"):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The app is in email opt in screen and the default state of opt_in is checked")
                self.result = True
            else:
                self.result = False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The app is not in email opt in screen or the opt_in is not checked by default")
                raise Exception("The app is not in email opt in screen or the opt_in is not checked by default")
            # vaidating the scenarios
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying email opt in scenarios.Setup/OPtInEmail/7/8/16")
                self.WeMoAppLog.Info("Entering blank email.")
            for email_to_test in ["($&%*","","mynameatgmail.com"]:
                self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='enter_email']",0,email_to_test)
                self._verifyAndClickTheElement("WEB","xpath=//*[@class='save_email ui-link']")
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Email']") and self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='It is also OK to contact me about promotions, new products, and beta tests']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Email opt in scenarios PASSED for email <%s>"%email_to_test)
                    self.result = True
                else:
                    self.result = False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Email opt in scenarios FAILED for email %s"%email_to_test)
            # verifying if user can opt out and proceed
            if not its_ok:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Unchecking the opt_in checkbox.Verifying Setup/OPtInEmail/15")
                self._verifyAndClickTheElement("WEB","xpath=//*[@id='opt_in']")
                assert self.ExperitestClient.isElementFound("WEB","xpath=//*[@class='opt_in_check']")
            # verifying with a valid email id
            self.ExperitestClient.elementSendText("WEB","xpath=//*[@id='enter_email']",0,"account.nitin@gmail.com")
            self._verifyAndClickTheElement("WEB","xpath=//*[@class='save_email ui-link']")
            self.result = True
            time.sleep(6*self.delay)
        except:
            self.exception_msg = "Raising the exception Email opt in can not be verified."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method verifyEmailOptIn() encountered and Error")
                self.WeMoAppLog.LogException()


    def _verifySetupEdgeConditions_AndSetup(self,appIdentifier,WeMoSerialNumber,WeMoSmartPhoneSSIDName,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity,WeMoDeviceType,wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=True, uncheckRememberWiFiSettings=False, verifyWrongPasswordScenario = False, verifyHomeRouterOffScenario = False, verifyWeMoOffScenario = False,setup = True):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param WeMoSmartPhoneSSIDName: The Wemo Smart Phone SSID Name
        @type WeMoSmartPhoneSSIDName: String
        @param WeMoFriendlyName: The Wemo Friendly Name
        @type WeMoFriendlyName: String
        @param routerSSID: The router ssid to which the wemo has to be set up
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network
        @type routerWirelessPassword: String
        """
        try:
            self._unlockAndroid()
            assert self.result == True

            self.SSIDPageSeen = False

            # Connecting to the wemo to be setup
            self._launchWiFiManagerApp()
            assert self.result == True
            self._selectTheSSIDInTheNetworkListInWiFiManager(WeMoSmartPhoneSSIDName)
            assert self.result == True
            self._closeWiFiManagerApp()
            assert self.result == True

            # Closing and launching wemo and starting the setup process
            self._closeApplication(appIdentifier)
            assert self.result == True
            self._clearApplicationData(appIdentifier)
            assert self.result == True
            self._launchWemoApp(appIdentifier)
            assert self.result == True
            for i in range(5):
                self._verifyAndCheckForThePersonalizePage()
                self._enterWemoFriendlyName("This is a name which has more than thirty characters in it.",WeMoSmartPhoneSSIDName)
                assert self.result == True
                self._clickOnPersonalizeButton(verify_email=False)
                assert self.result == True
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[@text='Please enter a name 30 characters or less.']")):
                    self.ExperitestClient.click("WEB","xpath=//*[@text='OK' and @width>0]",0)
                self._enterWemoFriendlyName("lets:*-;/\}{+-try:it",WeMoSmartPhoneSSIDName)
                assert self.result == True
                self._clickOnPersonalizeButton(verify_email=False)
                assert self.result == True
                if (self.ExperitestClient.isElementFound("WEB", "xpath=//*[contains(@text,'Please enter a name 30 characters or less that uses only letters, numbers, spaces, dashes, dot or underscores.')]")):
                    self.ExperitestClient.click("WEB","xpath=//*[@text='OK' and @width>0]",0)
                break
            if setup:
                self.setupWemoApp(appIdentifier,WeMoSerialNumber,WeMoSmartPhoneSSIDName,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity,WeMoDeviceType,wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=True,uncheckRememberWiFiSettings=False)

        except:
            self.exception_msg = "Raising the Exception as the setup for wemo could not e completed."
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method setupWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _softResetTheWeMoDevice(self,**kwargs):
        """
        Soft resetting the WeMo device on the App 
        1) WEMOSERIALNUMBER -  String 
        2) RESETTYPE :- 
            1) Reset_Rules_Name_Data
            2) Reset_Wifi
            3) Erase_All_Content 
        """
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Soft resetting the WeMo device on the App  ")
        
        RESET_TYPE = {
        
                        'Reset_Rules_Name_Data' : "id=clear_name_icon_button",
                        'Reset_Wifi'            : "id=clear_wifi_button",
                        'Erase_All_Content'     : "text=Erase All Content & Settings",
                        
                        }
        RESET_CONFIRM = {
                            'Reset_Rules_Name_Data' : "id=clear_name_icon_rules_save_btn",
                            'Reset_Wifi'            : "id=clear_wifi_save_btn",
                            'Erase_All_Content'     : "id=reset_factory_defaults_reset_btn",
                            
                        }     
        
        RESET_CANCEL = {
                            'Reset_Rules_Name_Data' : "id=clear_name_icon_rules_cancel_btn",
                            'Reset_Wifi'            : "id=clear_wifi_cancel_btn",
                            'Erase_All_Content'     : "id=reset_factory_defaults_cancel_btn",
                            
                        }     
                        
        try:
            if self.WeMoAppLog != None: 
                self.WeMoAppLog.Info("Soft reset the device using on App")            
            
            self.exception_msg = None 
            self._isAppLaunched()
            assert self.result == True 
            self.result = None         
            
            ## Click on Edit device button  
            for i in range(3):
                if self.ExperitestClient.isElementFound("WEB","id=modify_device",0):
                    self.ExperitestClient.click("WEB","id=modify_device",0,1)
                    if (self.ExperitestClient.isElementFound("WEB","css=SPAN.edit_device_arrow_icon",0)):
                        self.result =  True 
                        break 
                    
                    elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                        time.sleep(15)
                        
                        
                elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                        time.sleep(15)    
                
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True 
                        
            for i in range(5):
                if filter(lambda val:str.upper(val) == 'WEMOSERIALNUMBER', kwargs) and filter(lambda val:str.upper(val) == 'WEMODEVICE', kwargs) :
                    self._goToTheEditDevicePageOfWemo(kwargs['WEMOSERIALNUMBER'],kwargs['WEMODEVICE'])
                    if self.result == True and (self.ExperitestClient.isElementFound("WEB","text=Edit Device")):
                        self.result = True 
                        break 
                        
            for i in range(5):
                if (self.ExperitestClient.isElementFound("WEB","text=Edit Device")):
                    if (self.ExperitestClient.isElementFound("WEB","id=reset_options",0)):
                        self.ExperitestClient.click("WEB","id=reset_options",0,1)
                        time.sleep(5)                     
                        if (self.ExperitestClient.isElementFound("WEB","text=Reset",0)):
                            Reset_Type = filter(lambda val:str.upper(val) == "RESETTYPE", kwargs)[0] 
                            print "**********", RESET_TYPE[str.title(kwargs[Reset_Type])]
                            if (self.ExperitestClient.isElementFound("WEB","%s"%RESET_TYPE[str.title(kwargs[Reset_Type])],0)):
                                self.ExperitestClient.click("WEB","%s"%RESET_TYPE[str.title(kwargs[Reset_Type])],0,1)
                                time.sleep(3) 
                                
                                if (self.ExperitestClient.isElementFound("WEB","%s"%RESET_CONFIRM[str.title(kwargs[Reset_Type])],0)): 
                                    self.ExperitestClient.click("WEB","%s"%RESET_CONFIRM[str.title(kwargs[Reset_Type])],0,1)
                                    time.sleep(15) 
                                    break                     
                    
                        elif (self.ExperitestClient.isElementFound("NATIVE","class=android.widget.ProgressBar",0)):
                            if self.WeMoAppLog != None:
                                self.WeMoAppLog.Info("The Page is Still Loading , the App is waiting for the Page to be launched")
                            time.sleep(15)                
                                    
            else:
                self.exception_msg = "Couldn't soft reset the device on the WeMoApp"
        except:        
            self._screenCapture()
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _softResetTheWeMoDevice() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheThreshold_Insight(self,value_to_set):
        self.result = None
        max_tries = 100
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Error("Setting power threshold for insight to <%s>"%value_to_set)
        try:
            curr_value = self.ExperitestClient.getTextIn2("WEB","xpath=//*[@nodeName='DIV' and @width>0 and ./*[@nodeName='TABLE']]",0,"WEB","Inside",0,0).split()[0]
            # optimizing the max tries
            if int(curr_value) < 90:
                max_tries = int(curr_value) + 5
            while int(curr_value) != int(value_to_set) and max_tries > 0:
                if int(curr_value) > int(value_to_set):
                   self.ExperitestClient.elementSwipe("WEB","xpath=//*[@nodeName='DIV' and @width>0 and ./*[@nodeName='TABLE']]",0,"Up",250,5000)
                else:
                   self.ExperitestClient.elementSwipe("WEB","xpath=//*[@nodeName='DIV' and @width>0 and ./*[@nodeName='TABLE']]",0,"Down",250,5000)
                curr_value = self.ExperitestClient.getTextIn2("WEB","xpath=//*[@nodeName='DIV' and @width>0 and ./*[@nodeName='TABLE']]",0,"WEB","Inside",0,0).split()[0]
                print "current value is %s"%curr_value
                print "value to set is %s"%value_to_set
                max_tries = max_tries - 1
                print "swipe attempts remaining are <%s>"%max_tries

            self.ExperitestClient.click("WEB","xpath=//*[@text='Set']",0)
            self.result = True
        except:
            self.exception_msg = "Raising the Exception as threshold for the insight could not be set."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _selectTheDayOnSettingApp() encountered and Error")
                self.WeMoAppLog.LogException()

    # over temp functions

    def _verify_overtempbanner_problemdetected(self):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Problem Detected']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Over Temp Problem Deteted banner found.')
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Over Temp Problem Deteted banner not found.')
                raise Exception('Over Temp Problem Deteted banner not found.')
        except:
            self.exception_msg = "Raising the Exception as problem detected banner could not be found."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verify_overtempbanner_problemdetected() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verify_overtempbanner_problempersists(self):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,' still a problem.') and @top='true']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('There is still a Problem Deteted banner found.')
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('There is still a Problem banner not found.')
                raise Exception('There is still a Problem banner not found.')


        except:
            self.exception_msg = "Raising the Exception as problem persists banner could not be found."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verify_overtempbanner_problempersists() encountered and Error")
                self.WeMoAppLog.LogException()

    def _click_overtempbanner_problempersists(self):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[contains(@text,' still a problem.') and @top='true']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('click on there is still a problem banner.')
                    self.ExperitestClient.click("WEB","xpath=//*[contains(@text,' still a problem.') and @top='true']")
                    time.sleep(self.delay)
                self.result = True

        except:
            self.exception_msg = "Raising the Exception as problem persists banner could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _click_overtempbanner_problempersists() encountered and Error")
                self.WeMoAppLog.LogException()

    def _click_overtempbanner_problemdetected(self):
        self.result = None
        try:
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='Problem Detected' and @top='true']"):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('click on Problem Detected button.')
                    self.ExperitestClient.click("WEB","xpath=//*[@text='Problem Detected' and @top='true']")
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('Swiping to find Problem Detected')
                    self.ExperitestClient.swipe("Down",200)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Problem Detected banner not found.')
                raise Exception('Problem Detected banner not found.')


        except:
            self.exception_msg = "Raising the Exception as problem delected banner could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _click_overtempbanner_problemdetected() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verify_overtemp_tile(self,wemoFriendlyName):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/..//*[@text='Cooling off...']"%wemoFriendlyName):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Over temp tile status verified')
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Over temp tile status not found.')
                raise Exception('Over temp tile status found.')

        except:
            self.exception_msg = "Raising the Exception as problem delected banner could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verify_overtemp_tile() encountered and Error")
                self.WeMoAppLog.LogException()

    def _dismiss_overtemp(self):
        self.result = None
        try:
            self._verifyAndClickTheElement("WEB","xpath=//*[@text='Dismiss']")

        except:
            self.exception_msg = "Raising the Exception as dismiss button could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _dismiss_overtemp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _closeDeviceKeyboard(self):
        try:
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Closing the key board.")
            self.ExperitestClient.closeKeyboard()
            self.result = True
        except:
            self.exception_msg = "Raising the Exception as the keyboard cant be closed."
            self._screenCapture()
            self.result = False
            self._getTheAndroidDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _closeDeviceKeyboard() encountered and Error")
                self.WeMoAppLog.LogException()

    #######################
    #Logging And Reporting#
    #######################
    def generateReports(self):
        if self.WeMoAppLog != None:
            self.WeMoAppLog.Info("Generate the Reports of the test run.")
        self.ExperitestClient.setShowImageInReport(True) 
        self.ExperitestClient.generateReport2(False)

    def setReporters(self,testcase_name):
        report_path = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("AndroidWeMoApp_Generic.py")), os.pardir)), "temp")
        self.ExperitestClient.setProjectBaseDirectory(report_path)
        if not os.path.exists(os.path.join(report_path,"reports")):
            os.mkdir(os.path.join(report_path,"reports"))
        ##Need to set the path for the reports
        self.ExperitestClient.setReporter2("xml",os.path.join(report_path,"reports"),testcase_name)
        self.ExperitestClient.setShowPassImageInReport(True)
        
    def setLogger(self,loggerObject):
        self.WeMoAppLog = loggerObject
    ########################################
        

if __name__ == "__main__":
    # b = AndroidWeMoApp_Generic("adb:XT1060",8889)
    b = AndroidWeMoApp_Generic("adb:Nexus 5",8889)
    # b._unlockAndroid()
    # b._clickOnReportAProblemTab()
    # b._forgetAllWifiNetworkfromWissfiSelectionPage()
    # b._clickOnEditDeviceTab()
    # b._selectTheWifiFromWifiManager("Auto_Belkin2","belkin123","WPA/WPA2")
    # b._verifyDefaultWemoFriendlyNameOnPersonalizePage("abc","Dimmer")
    # b._forgetAllWifiNetworkfromWifiSelectionPage()
    # b._editTheNameOfWemo("dummy","myNewName","WeMo_33D")
    # b._clickOnRemoteAccessTab()
    # b._isAppLaunched()
    # b._clickOnResetOptionsTab("WeMo.Insight.381","WeMo_381")
    # b._clickOnResetNamesRulesDataTab()
    # b._confirmChangesForResettingNameRulesAndData()
    # b._clickOnSupportArticles()
    # b._verifyElementFound("TEXT","WELCOME",0)
    # b._clickOnAnElement("WEB","xpath=//*[@name='yourname']",0,1)
    # b._sendText("John Doe")
    # b._clickOnAnElement("WEB","xpath=//*[@name='phone']",0,1)
    # b._sendText("9499454728")
    # b._pickElementFromVisibleList("xpath=//*[@text='Switch']",0)
    # b._clickOnAnElement("WEB","xpath=//*[@name='product']",0,1)
    # b._clickOnWeMoCommunity()
    # b._pickElementFromVisibleList("xpath=//*[@text='With motion' and ./parent::*[@id='sensor_notification_rule']]",0)
    # b._pickElementFromVisibleList("text=Away mode",0)
    # b._handlePopUpOnWeMoApp()
    # b._verifyWemoDeviceInDeviceListContainer("WeMo_33D")
    # b._verifyRuleCreated("Wemo_359 Long Press Rule")
    # b._clickOnMoreTab()
    # b._setTheThreshold_Insight("50")
    # b._verifyNotDetectedWemoDeviceInDeviceListContainer("WeMo_381")
    # b._forgetAllWifiNetworkfromWifiSelectionPage()
    # b._closeApplication("com.belkin.wemoandroid/com.belkin.activity.MainActivity")
    # b._launchManageWemoChannelActivationPage()  Switch:221250K0100ECE
    # b._selectTheWifiFromWifiManager("Auto_Belkin2","belkin123","WPA2")
    # b._verifyNotDetectedWemoDeviceInDeviceListContainer('WeMo_C9F')
    # b._selectTheSSIDInTheNetworkListInWiFiManager("WeMo.Switch.ECE")
    # b._verifySelectedWifiNetworkSSID("AutoIOS")
    # b._enterWirelessSecurityPasswordInWemoApp("belkin123")
    # b._clickOnJoinButtonToAssociateWemoToRouter()    #
    # b._selectTheSSIDInTheNetworkListInWemoApp("AutoIOS")
    # b._uncheckRememberWiFiSettingsInPersonalizePage()
    # b._enterWemoFriendlyName("ac","abc")
    # b._confirmChangesForSavingTheWemoFriendlyName()
    # b._verifyAndCheckForThePersonalizePage()
    # b._selectTheSSIDInTheNetworkListInWiFiManager("WeMo.Insight.381")
    # b.setupWemoApp(appIdentifier='com.belkin.wemoandroid/com.belkin.activity.MainActivity',WeMoSerialNumber='241634K1500359',WeMoSmartPhoneSSIDName='Wemo.Dimmer.359',WeMoFriendlyName='WeMo_359',routerSSID='Auto_Belkin2',routerWirelessPassword='belkin123',routersecurity='WPA2',WeMoDeviceType="Dimmer",wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=False,uncheckRememberWiFiSettings=False)
    # b._verifySetupEdgeConditions_AndSetup(appIdentifier='com.belkin.wemoandroid/com.belkin.activity.MainActivity',WeMoSerialNumber='221448K1200381',WeMoSmartPhoneSSIDName='WeMo.Insight.381',WeMoFriendlyName='WeMo_381',routerSSID='Auto_Belkin2',routerWirelessPassword='belkin123',routersecurity='WPA2',WeMoDeviceType="Insight",wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=False,uncheckRememberWiFiSettings=False,verifyWrongPasswordScenario = False,verifyHomeRouterOffScenario = False,verifyWeMoOffScenario = False)
    # b._verifySetupEdgeConditions_AndSetup(appIdentifier='com.belkin.wemoandroid/com.belkin.activity.MainActivity',WeMoSerialNumber='221448K1200991',WeMoSmartPhoneSSIDName='WeMo.Insight.991',WeMoFriendlyName='WeMo_381',routerSSID='Auto_Belkin2',routerWirelessPassword='belkin123',routersecurity='WPA2',WeMoDeviceType="Insight",wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=False,uncheckRememberWiFiSettings=False,verifyWrongPasswordScenario = False,verifyHomeRouterOffScenario = False,verifyWeMoOffScenario = False)
    # b._launchWemoApp("com.belkin.wemoandroid/com.belkin.activity.MainActivity")
    # b._turnOnWemo("WeMo_299")
    # b._selectTheWifiFromWifiManager("Auto_Belkin2","belkin123","WPA2")
    # b._selectTheWifiFromWifiManager("xwalk:com.belkin.wemoandroid/com.belkin.activity.MainActivity")
    # b._confirmChangesOnEditDevicePage()
    # b._selectTheWifiFromWifiManager("Auto_Belkin2","belkin123","WPA2")
    # b._clickOnCancelButtonToCancelChangesInWeMoApp()
    # b._forgetWifiSettings()
    # b._clickOnHideButtonOnHideThisPopUp()
    # b._clickOnRemoteAccessTab()
    # b._checkAndEnableRemoteAccess('com.belkin.wemoandroid/com.belkin.activity.MainActivity',"Auto_Belkin2","belkin123","WPA2")
    # b._verifyRulesLog()
    # b._clickOnStartTimeTabOfWhenRulePage_TimerRule()
    # b._setTheTimeInWhenPage_SimpleAndTimerRule("14","07")
    # b._clickOnEndTimeTabOfWhenRulePage_TimerRule()
    # b._setTheTimeInWhenPage_SimpleAndTimerRule("15","00")
    # b._handlePushNotification()
    # b._selectTheTimeForOnThenOffIfNoMotion_MotionRule("don't turn off")
    # b._confirmChangesToCreateRule()
    # b._verifyDefaultWemoFriendlyNameOnPersonalizePage("WeMo_951","Switch")
    # b._clickOnDoneButtonToSetTheTime()
    # b._createARule_InWeMoApp(RULE_TYPE='AUTO_OFF_RULE',DEVICES_IN_NETWORK=['WeMo_951', 'WeMo_33D'],START_TIME="15:40",END_TIME="15:45",RULE_NAME="AutoOffTimer",AUTO_OFF_TIME_INTERVEL="5 m")
    # b._createARule_InWeMoApp(RULE_TYPE='TIMER_RULE',DEVICES_IN_NETWORK=['WeMo_299','WeMo_951',"WeMo_381","WeMo_956"],ACTION='on until time',START_TIME="15:50",END_TIME="15:55",RULE_NAME="Simple Timer Rule123",DAYS=['Monday'])
    # b._createARule_InWeMoApp(RULE_TYPE='MOTION_RULE',MOTION_TRIGGER_FROM='WeMo_C9F',DEVICES_IN_NETWORK=['WeMo_951','WeMo_381'],ACTION='on then',TRIGGER='1 minutes',START_TIME="17:40",END_TIME="17:50",RULE_NAME="Simple M Rule",DAYS=['Monday'])
    # b._createARule_InWeMoApp(RULE_TYPE='AWAY_MODE_RULE',DEVICES_IN_NETWORK = ['WeMo_951','WeMo_381'],START_TIME="17:40",END_TIME="17:50",RULE_NAME="On Vacation ")
    # b._verifyTheRandomnessofAwayModeRule(900,["WeMo_381","WeMo_33D","WeMo_299"])
    # print b.result
    # b._selectTheWeMo_AwayModeRule("WeMo_381")
    # b._selectTheActionForWeMo_TimerRule("WeMo_299","off")
    # b._selectTheTimeIntervalForMotionInHowOftenPage_NotificationRule(timeInterval="notify every time")
    # b._disableTheRule("Sensor-APNS")
    # b._setTheThreshold_Insight("2")
    # b._goToTheDevicesPage()
    # b._selectTheNestDevice_NestRule("Bedroom","Home")
    # b._selectTheWeMoToCreateNest_HomeAwayRule("WeMo_956")
    # b._deleteTheRuleInRulesDetailPage("Auto-off Timer")
    # b._click_overtempbanner_problemdetected()
    # b._dismiss_overtemp()
    # b._goToTheEditDevicePageOfWemo("WeMo Dimmer")
    # b._sensingAllDayOn_SensorRule()
    # b._selectTheActionForWeMo_MotionRule("WeMo_299","on then")
    # b._selectAuto_Off_TimerIntervel("5 m")
    # b._selectTheMotionInMotionRulePage_MotionRule("WeMo_C9F")
    b._clickOnRulesTab()
    # b._deleteOldRulesFromRulesPage()
    print b.result
