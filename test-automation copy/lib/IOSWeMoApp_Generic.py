#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os, sys
import logging
from time import strftime
import socket
import unittest, time, re
from ExperitestClient import Client
import string
import subprocess
import datetime
from time import strftime
import xmlrpclib
import fnmatch, csv
import zipfile
from optparse import OptionParser
import shutil
import traceback
import Trace
from Logger import *
from WirelessProfiler import *
import ssdp
import subprocess


class IOSWeMoApp_Generic:
    
    def __init__(self, smartPhoneDeviceName=None, smartPhonePort=None, delay = 0.5):
        """
        Initialization function for the IOSWeMoApp
        @param smartPhoneDeviceName: The name of the Smart Phone under test
        @type smartPhoneDeviceName: String
        @param smartPhoneDeviceName: The name of the Smart Phone under test
        @type smartPhoneDeviceName: String
        """
        if (smartPhoneDeviceName is not None) and (smartPhonePort is not None):
            # self.WeMoAppLog = Logger(os.path.basename("IOSWeMoApp_Generic.py").replace(".py","_%s_"%smartPhoneDeviceName.split(":")[-1].strip()+strftime("%Y-%m-%d_%H-%M-%S")+".log"))
            self.WeMoAppLog = None
            self.host = "localhost"
            self.port = smartPhonePort
            self.ExperitestClient = Client()
            self.wp = WirelessProfiler()
            self.ExperitestClient.init(self.host, self.port)
            self.ExperitestClient.setDevice(smartPhoneDeviceName)
            self.SmartDeviceInfo = None
            self.SmartDeviceInfo =  self.ExperitestClient.getDevicesInformation()
            self.ExperitestClient.setProjectBaseDirectory(os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("IOSWeMoApp_Generic.py")), os.pardir)), "lib", "IOSWeMoImages"))
            self.ExperitestClient.setReporter("xml","reports")
            self.ExperitestClient.setShowPassImageInReport(True)
            self.launchIdentifier = None
            self.app_Launched_Status = False
            self.CPU_Usage = None
            self.Memory_Usage = None
            self.delay = delay
            
            ## Swipe Device Container with the Below Offsets
            self.TopOffset = self.ExperitestClient.p2cy(11)
            self.BottomOffset = self.ExperitestClient.p2cy(90)
            self.swipeOffset_DeviceListContainer = self.ExperitestClient.p2cy(50)  
            self.MaxHeightOfDevice = int(self.ExperitestClient.p2cy(75))            
            
        self.result = None
    ######################################
    # General Key Events for IOS Phone   #
    ######################################
    def _resetDeviceBridge(self):
        """
        Resetting the Device Bridge to refresh the connection
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Resetting the Device Bridge to refresh the connection.")
            self.ExperitestClient.resetDeviceBridge()
            self.result = True
        except:
            self.exception_msg = "Failed to reset the device bridge"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _resetDeviceBridge() encountered and Error.")
                self.WeMoAppLog.LogException()

    def _unlockIOS(self):
        """
        Unlocking the IOS Smart Device Phone
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Unlocking the IOS Smart Device Phone.")
            self.ExperitestClient.sendText("{UNLOCK}")
            self.result = True
        except:
            self.exception_msg = "Failed to unlock the Smart Device."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unlockIOS() encountered and Error.")
                self.WeMoAppLog.LogException()

    def _lockIOS(self):
        """
        locking the IOS Smart Device Phone
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("locking the IOS Smart Device Phone.")
            self.ExperitestClient.sendText("{SCROLLLOCK}")
            self.result = True
        except:
            self.exception_msg = "Failed to lock the Smart Device."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _lockIOS() encountered and Error.")
                self.WeMoAppLog.LogException()

    def _setDeviceUnderTest(self,Device):
        """
        Set the smart device under test
        """	
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the smart device :%s device under test."%Device)
            self.ExperitestClient.setDevice(Device)
            self.result = True
        except:
            self.exception_msg = "Failed to set the <Smart device: %s> for testing."%Device
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setDeviceUnderTest() encountered an error.")
                self.WeMoAppLog.LogException()    
            
    def _rebootSmartDevice(self):
        """
        Reboot the SmartDevice
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Rebooting the smart device.")
            try:
                self.ExperitestClient.reboot(120000)
            except:
                self.ExperitestClient.sleep(50000)
                # self.ExperitestClient.closeDevice()
                # self.ExperitestClient.openDevice()
            self.result = True
        except:
            self.exception_msg = "Failed to Reboot the Smart device."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _rebootSmartDevice() encountered an error.")
                self.WeMoAppLog.LogException()

    def _homeScreen(self):
        """
        Go to the Home Screen of the IOS Device
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Go to the Home Screen of the IOS Device")
            self.ExperitestClient.sendText("{HOME}")
            self.result = True
        except:
            self.exception_msg = "Failed to bring the Smart device to <Home Screen>"
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _homeScreen() encountered and Error.")
                self.WeMoAppLog.LogException()
            
    def _turnonTheAppDebug(self,appIdentifier):
        """"
        Turn On the Debug option of the App 
        @param appIdentifier: The app identifier name
        @type appIdentifier: String        
        """
        try:
            self.result = None
            self.exception_msg = None
            yoffset = self.ExperitestClient.p2cy(5)
            offset_to_swipe = self.ExperitestClient.p2cy(50)
            
            self._homeScreen()
            assert self.result == True
            self._searchForAppAndClick("Settings")
            assert self.result == True
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAStaticText']") == True:
                    if self.ExperistestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='Airplane Mode' and @class='UIATableCell']", 0, "Down", "NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']", 0, 0):
                        print self.ExperitestClient.swipeWhileNotFound3("Down", offset_to_swipe,2000,"NATIVE", "xpath=//*[@text='%s' and @onScreen='true' and @y>%s]"%(appIdentifier,yoffset), 1000, 15, False)
                        if (self.ExperitestClient.swipeWhileNotFound3("Down", offset_to_swipe,2000,"NATIVE", "xpath=//*[@text='%s' and @onScreen='true' and @y>%s]"%(appIdentifier,yoffset), 1000, 15, False)== True):
                            self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='%s']"%appIdentifier,0,1)
                            self.result = True
                            break
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The App is not in settings page.")
                        if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                            time.sleep(self.delay)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)                            
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The App is not in settings page.")
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']"%appIdentifier,0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Smart Phone is in App page.")
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@class='UIASwitch']", 0, 1)
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                    if(self.ExperitestClient.swipeWhileNotFound3("Up", offset_to_swipe,2000 , "NATIVE", "xpath=//*[@accessibilityLabel='Airplane Mode' and @onScreen='true' and @y>%s]"%yoffset, 1000, 15, False) == True):
                        self.result == True
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Going back to settings page.")
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The debug log info could not be turned on.")
                    
            self._homeScreen()
            assert self.result == True
        except:
            self.exception_msg = "Failed to turn on the Debug on for %s app"%appIdentifier
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("The debug is not turned on.")

    def _deleteText(self):
        """
        Deleting the text in the IOS Device
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Deleting the text in the IOS Device")
            self.ExperitestClient.sendText("{BKSP}")
            self.result = True
        except:
            self.exception_msg = "Failed to delete the text from the textbox"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _deleteText() encountered and Error.")
                self.WeMoAppLog.LogException()
    
    def _submittingText(self):
        """
        Submitting the text in the IOS Device
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Submitting the text in the IOS Device")
            self.ExperitestClient.sendText("{ENTER}")
            self.result = True
        except:
            self.exception_msg = "Failed to submit a text to the text area."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _submittingText() encountered and Error.")
                self.WeMoAppLog.LogException()
    
    def _showNotification_JailBrokenIOS(self):
        """
        Show the notifications on the IOS Jail Broken Device
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Show the notifications on the iOS Jail Broken Device")
            self.ExperitestClient.sendText("{show_notification}")
            self.result = True
        except:
            self.exception_msg = "Failed to show notification on Jail Broken iOS Device"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _showNotification_JailBrokenIOS() encountered and Error.")
                self.WeMoAppLog.LogException() 
    
    def _hideNotification_JailBrokenIOS(self):
        """
        Hide the notifications on the IOS Jail Broken Device
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Hide the notifications on the iOS Jail Broken Device")
            self.ExperitestClient.sendText("{hide_notification}")
            self.result = True
        except:
            self.exception_msg = "Hide notifications on iOS Jail Broken Device."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _hideNotification_JailBrokenIOS() encountered and Error.")
                self.WeMoAppLog.LogException()
    
    def _closeDeviceKeyboard(self):
        """
        Close the keyboard on the App. 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Close the keyboard on the App.")
            self.ExperitestClient.closeKeyboard()
            self.result = True
        except:
            self.exception_msg = "Failed to close the <keyboard> used for entering the text"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _closeDeviceKeyboard() encountered and Error")
                self.WeMoAppLog.LogException()
    
    
    def _verifyWemoDeviceNotPresentInRulesDetailPage(self , ruleName , deviceType):
        """
        Verify the Sensor Not Found in the Rule Detail Page
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        if deviceType is '' or ruleName is '':
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("deviceType/ruleName cannot be '' in _verifySwitchOrSensorNotPresentInRulesDetailPage")
                return
        deviceTypeDict = {
                          'Switch' :'Switch Not Present' ,
                          'Motion' : 'Sensor Not Present', 
                          'Insight' :'Insight Not Present',
                          'InsightV2' : 'Insight Not Present',
                          'Light'   :   'Switch Not Present'
                        } 
        try:
            self._isAppLaunched()
            assert  self.result == True
            self.exception_msg = None 
            self.result = None
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify Sensor/Switch Not Present in the Rule Detail Page")
            for i in range(15):
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s"%ruleName) == True:
                        self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=%s"%ruleName)
                        time.sleep(self.delay)
                        if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']"%ruleName):
                            time.sleep(self.delay)
                            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%deviceTypeDict[deviceType])):
                                    self.result = True
                                    break
                    time.sleep(self.delay)
            else:
#                     self._verifyRandomOccurringPopUpOnWeMoApp()
                    assert self.result == True 
                    if self.WeMoAppLog != None:
                       self.WeMoAppLog.Error("'Switch/Sensor not Present' text not found on the Rule details page")
                    self.result=False                    
        except:
            self.exception_msg = "Failed to Verify the <deviceType> Not Found in the Rule Detail Page "
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifySensorOrSwitchNotFoundInRulesDetailPage() encountered and Error")
                self.WeMoAppLog.LogException()    
    
    def _handleTokenErrorPopUp(self):
        """
        Handling the Token Error Pop up
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Handling the Token Error Pop up")
            for i in range(2):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=TOKEN ERROR")):
                    self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                    self.result = True
                    break
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('The Token Error Screen did not appear.')
        except:
            self.exception_msg = "Failed to assess the Token Error pop up. The token error is seen because of APNS notification of the Smart Device is blocked because of incorrect Mobile Provision Certificate."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _handleTokenErrorPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _wemoCouldNotConnectToWiFiPopUp(self):
        """
        Handling the Wemo Connection To Wifi Failed Error Pop up
        """
        try:
            self.result = None
            self.exception_msg = None
            self.wemoConnectFailure = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Handling the Wemo Connection To Wifi Failed Error Pop up")
            for i in range(1):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=We've lost connection with the WeMo device. Please quit this app, reconnect to the WeMo network, and reopen this app.",0):
                    time.sleep(self.delay)
                    self._clickOnOKButtonForAlertBoxes()
                    self._handlePopUpOnWeMoApp()
                    self.result = True
                    self.wemoConnectFailure = True
                    break
                time.sleep(self.delay)
            else:
                time.sleep(self.delay)
                self.wemoConnectFailure = False
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('The Wemo Connection To Wifi Failed Error Pop up did not appear.')        
        except:
            self.exception_msg = "Handling the Wemo Connection To Wifi Failed Error Pop up FAILED "
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.wemoConnectFailure = None    
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _wemoCouldNotConnectToWiFiPopUp() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheTimeOnTheSmartPhonewithRulesetTime(self,RuleTime):
        """
        Verify whether the Wemo Connection To Wifi Failed Error Pop up occured or not
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Waiting on smart phone home screen for the time : %s" %RuleTime)        
            
            for i in range(80):
                Time_on_Phone = self.ExperitestClient.elementGetText("NATIVE", "xpath=//*[contains(@text,':')]", 0)
                if 'am'.lower() in Time_on_Phone.lower() or 'pm'.lower() in Time_on_Phone.lower():
                    TimeOnPhone= "".join(Time_on_Phone.split(" ")[0].split(":"))
            
                    if int(RuleTime.split(":")[0]) > 12:
                        timeToBeChecked="%s:%s"%(int(RuleTime.split(":")[0])-12,RuleTime.split(":")[1])
                    elif int(RuleTime.split(":")[0]) == 0:
                        timeToBeChecked="%s:%s"%("12",RuleTime.split(":")[1])
                    else:
                        timeToBeChecked="%s:%s"%(int(RuleTime.split(":")[0]),RuleTime.split(":")[1])
    
                    TimeToBeCompared = "".join(timeToBeChecked.split(":"))

                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Printing both the times.TimeToBeCompared,TimeOnPhone are <%s><%s>"%(TimeToBeCompared,TimeOnPhone))
                    if int(TimeToBeCompared) <= int(TimeOnPhone):
                        break
                    else:
                        print TimeToBeCompared,TimeOnPhone
                        time.sleep(self.delay*60)
                else:
                    TimeOnPhone="".join(Time_on_Phone.split(":"))
                    TimeToBeCompared = "".join(RuleTime.split(":"))
                    if int(TimeToBeCompared) <= int(TimeOnPhone):
                        break
                    else:
                        time.sleep(self.delay*60)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Its been a long time now checking more than 20 mins. There is some thing incorrect value in testscript.")
            self.result = True
        except Exception as e:
            self.exception_msg = "Failed to match the time %s on the Smart Device" %RuleTime 
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWemoCouldNotConnectToWiFiPopUp() encountered and Error")
                self.WeMoAppLog.LogException()        

    def _verifyWemoCouldNotConnectToWiFiPopUp(self):
        """
        Verify whether the Wemo Connection To Wifi Failed Error Pop up occured or not
        """
        try:
            self.result = None
            self.exception_msg = None            
            self.wemoConnectFailure = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the Wemo Connection To Wifi Failed Error Pop up")
            if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Sorry, your WeMo couldn't connect to your WiFi. Make sure it is not out of range and try again.",0):
                self.result = True
                self.wemoConnectFailure = True
            else:
                self.result = True
                self.wemoConnectFailure = False
            if self.wemoConnectFailure == True:
                self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                self.result = True
        except:
            self.exception_msg = "Failed to connect to Wi-Fi. Unable to click on <OK> button for the pop up message  <Sorry, your WeMo couldn't connect to your WiFi. Make sure it is not out of range and try again.>"        
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.wemoConnectFailure = None
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWemoCouldNotConnectToWiFiPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    
    def _verifyRulesCannotBeSavedPopUpAndClickOnOkButton(self):
        """
        Verify whether the Wemo Connection To Wifi Failed Error Pop up occured or not
        """
        try:
            self.result = None
            self.exception_msg = None            
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying the Rules Cannot be Saved Error Pop up")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Rule can not be saved.']",0):        
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
            else:
                self.result = False
                raise
        except:
            self.exception_msg = "Rules Cannot be saved pop up not found"        
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.wemoConnectFailure = None
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyRulesCannotBeSavedPopUpAndClickOnOkButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyDeviceNotFoundPopUp(self):
        """
        Verify whether the Wemo Connection To Wifi Failed Error Pop up occured or not
        """
        try:
            self.result = None
            self.exception_msg = None            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the Wemo Connection To Wifi Failed Error Pop up")
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Device Not Found']",0):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Having trouble saving this rule now. Please check the status of all your WeMo devices.']",0):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='OK']")
                    self.result = True
                else:
                    self.result=False
                    self.WeMoAppLog.Info("Verifying text 'Having trouble saving this rule now. Please check the status of all your WeMo devices. Failed'")
            else:
                self.result = False
                self.WeMoAppLog.Info("Verifying text 'Device Not Found'")
        except:
            self.exception_msg = "Exception on clicking device not found pop up"        
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.wemoConnectFailure = None
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyDeviceNotFoundPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    
    def _clickOnBackButtonToGoBackInWeMoApp(self):
        """
        Clicking on the Back button to go back in WeMo App
        """
        try:            
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Back button to go back in WeMo App")
            self._isAppLaunched()
            assert self.result == True
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                    self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Back" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Back" could not be found.')
        except:
            self.exception_msg = "Failed to click on <Back> button to go back. Please refer the screen captured and the log message for exact details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._isAppLaunched()
            if self.result == True:
                self._closeApplication()            
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnBackButtonToGoBackInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnDoneButtonToConfirmChangesInWeMoApp(self):
        """
        Clicking on the Done button to confirm changes in WeMo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Done button to confirm changes in WeMo App")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Done" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Done" could not be found.')
        except:
            self.exception_msg = "Failed to click on <Done> button on the WeMo app. Please refer the screen captured with reference to the issue and logs for more precise details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._isAppLaunched()
            if self.result == True:
                self._closeApplication()             
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnDoneButtonToConfirmChangesInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnSaveButtonToConfirmChangesInWeMoApp(self):
        """
        Clicking on the Save button to confirm changes in WeMo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Save button to confirm changes in WeMo App")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Save")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Save")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
        except:
            self.exception_msg = "Failed to click on <Save> button to save changes on WeMo App. Please refer the screen captured and logs for exact details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._isAppLaunched()
            if self.result == True:
                self._closeApplication()             
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSaveButtonToConfirmChangesInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clickOnCancelButtonToCancelChangesInWeMoApp(self):
        """
        Clicking on the Cancel button to confirm changes in WeMo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Cancel button to cancel changes in WeMo App")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self.exception_msg = "Failed to click on <Cancel> button of WeMo App to cancel the changes. Please refer the screen captured and logs for more details"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._isAppLaunched()
            if self.result == True:
                self._closeApplication()             
            self._homeScreen()
            self.result = False
            self.WeMoAppLog.Error("The method _clickOnCancelButtonToCancelChangesInWeMoApp() encountered and Error")
            self.WeMoAppLog.LogException()
            
    def _clickOnNotificationRuleNavigationButtonInWeMoApp(self):
        """
        Clicking on the Notification Rule Navigation button in WeMo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Notification Rule Navigation button in WeMo App")
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Notification Rule")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Notification Rule" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Notification Rule" could not be found.')
        except:
            self.exception_msg = "Failed to click on <Notification Rule> button of WeMo App. Please refer the screen captured and log for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnNotificationRuleNavigationButtonInWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnKeypadDoneButton(self):
        """
        Clicking on keypad Done button on the IOS Device. 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on keypad Done button on the IOS Device.")
            UIKBKEY_COUNT = self.ExperitestClient.getElementCount("NATIVE", "class=UIKBKeyView")
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIKBKeyView",UIKBKEY_COUNT-1) == True:
                    self.ExperitestClient.click("NATIVE", "class=UIKBKeyView", UIKBKEY_COUNT-1, 1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The keypad Done button is not found.May be it did not appear.')
        except:
            self.exception_msg = "Failed to click on <Done> button on keypad. Please refer the screen capture for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnKeypadDoneButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnKeypadGoButton(self):
        """
        Clicking on keypad Go button on the IOS Device. 
        """
        try:
            self.result = None
            self.exception_msg = None
            UIKBKEY_COUNT = self.ExperitestClient.getElementCount("NATIVE", "class=UIKBKeyView")
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on keypad Go button on the IOS Device.")
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIKBKeyView",UIKBKEY_COUNT-1) == True:
                    self.ExperitestClient.click("NATIVE", "class=UIKBKeyView", UIKBKEY_COUNT-1, 1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The keypad Go button is not found.May be it did not appear.')
        except:
            self.exception_msg = "Failed  to click on <Go> button  on WeMo App. Please refer the Screen Capture and logs for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnKeypadGoButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnOKButtonForAlertBoxes(self):
        """
        Clicking on OK button for the Alert Pop Up Box. 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on OK button for the Alert Pop Up Box.")
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "text=OK") == True:
                    self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The OK button is not found.May be it did not appear.')
        except:
            self.exception_msg = "Failed to click on <OK> button on Alert Pop up. Please refer the screen capture and log for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnOKButtonForAlertBoxes() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnInfoButton(self):
        """
        Clicking on Info(question mark) button. 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on Info(question mark) button. ")
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=infobutton.png") == True:
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=infobutton.png")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('The Info button is not found.May be it did not appear.')
                    raise Exception('Raising the Info button is not found.May be it did not appear.')
        except:
            self.exception_msg = "Failed to click on <?> on the WeMo App. Please refer the screen captured and logs for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnInfoButton() encountered and Error")
                self.WeMoAppLog.LogException()
    ###########################################
    
    #################################################
    #Handling the Device List Screen on the Wemo App#
    #################################################            
    def _isWeMoTurnedOn(self,WemoFriendlyName):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it is turned on.
        @param WemoFriendlyName: The Wemo Firendly Name to be turned On 
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned on"%WemoFriendlyName)

            # self._isAppLaunched()
            # assert self.result == True
            self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
            assert self.result == True
            time.sleep(self.delay*4)
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is ON"%WemoFriendlyName)) == True:
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is STANDBY"%WemoFriendlyName)) == True:
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is ON"%WemoFriendlyName)) == True:
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is STANDBY"%WemoFriendlyName)) == True:
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                    if i%5 == 0:
                        self._clickOnRefreshButton()
                    assert self.result == True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s is ON" is not found.'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=%s is ON" is not found.'%WemoFriendlyName)
        except:
            self.exception_msg = "The WeMo device %s is not  in ON state. Refer the screen captured and log messages for more details."%WemoFriendlyName
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _isWeMoTurnedOn() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _isWeMoTurnedOff(self,WemoFriendlyName):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it is turned off.
        @param WemoFriendlyName: The Wemo Firendly Name to be turned Off
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned off"%WemoFriendlyName)
            # self._isAppLaunched()
            # assert self.result == True
            self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
            assert self.result == True            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is OFF"%WemoFriendlyName)):
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is OFF"%WemoFriendlyName)) == True:
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True 
                    if i%5 == 0 and i == 0:
                        self._clickOnRefreshButton()
                    assert self.result == True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s is OFF" could not be found.'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=%s is OFF" could not be found.'%WemoFriendlyName)
        except:
            self.exception_msg = "The WeMo device %s is not  in OFF state. Refer the screen captured and log messages for more details."%WemoFriendlyName           
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _isWeMoTurnedOff() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def _turnOnWemo(self, WemoFriendlyName):
        """
        Check whether the Wemo is present in the Device List Container and Turn On the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name to be turned On 
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Turn on the WeMo:%s"%WemoFriendlyName)
            # self._isAppLaunched()
            # assert self.result == True
            self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
            assert self.result == True

            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is OFF"%WemoFriendlyName)):
                for i in range(5):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton")):
                        time.sleep(self.delay)
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton", 0, 0)
                        time.sleep(self.delay)
                        for i in range(10):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is ON"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True 
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True
                                if i%5 == 0:
                                    self._clickOnRefreshButton()
                                assert self.result == True
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered on"%WemoFriendlyName)   
                                    self.result = False
                            time.sleep(self.delay)
                    elif (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton")):
                        time.sleep(self.delay)
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton", 0, 0)
                        time.sleep(self.delay)
                        for i in range(10):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is ON"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is STANDBY"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True 
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True
                                if i%5 == 0:                            
                                    self._clickOnRefreshButton()
                                assert self.result == True                            
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered on"%WemoFriendlyName)   
                                    self.result = False
                            time.sleep(self.delay)
                    if self.result == True:
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                        raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)

            elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is OFF"%WemoFriendlyName)):
                for i in range(5):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton")):
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton", 0, 0)
                        time.sleep(self.delay)
                        for i in range(10):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is ON"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True
                                if i%5 == 0:
                                    self._clickOnRefreshButton()
                                assert self.result == True
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered on"%WemoFriendlyName)
                                    self.result = False
                            time.sleep(self.delay)
                    elif (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton")):
                        time.sleep(self.delay)
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton", 0, 0)
                        time.sleep(self.delay)
                        for i in range(10):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is ON"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is STANDBY"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True
                                if i%5 == 0:
                                    self._clickOnRefreshButton()
                                assert self.result == True
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered on"%WemoFriendlyName)
                                    self.result = False
                            time.sleep(self.delay)
                    if self.result == True:
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                        raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            else:
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is ON"%WemoFriendlyName) == True or self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is STANDBY"%WemoFriendlyName) == True or self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is ON"%WemoFriendlyName) == True or self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is STANDBY"%WemoFriendlyName) == True
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('WeMo:%s is already On'%WemoFriendlyName)
        except:
            self.exception_msg = "The WeMo Device with friendly name %s is not turned on"%(WemoFriendlyName)
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _turnOnWemo() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _turnOffWemo(self,WemoFriendlyName):
        """
        Check whether the Wemo is present in the Deivce List Container and Turn Off the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name to be turned Off 
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            Trials = 0
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Turn off the WeMo:%s"%WemoFriendlyName)            
            # self._isAppLaunched()
            # assert self.result == True
            self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
            assert self.result == True     
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is ON"%WemoFriendlyName)):
                while Trials < 2:
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton")):
                        time.sleep(self.delay)
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton", 0, 0)
                        time.sleep(self.delay)
                        Trials = Trials + 1
                        
                        for i in range(10):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is OFF"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True          
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True    
                                if i%5 == 0:                                                        
                                    self._clickOnRefreshButton()
                                assert self.result == True
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered off"%WemoFriendlyName)   
                                self.result = False
                    elif (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton")):
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton", 0, 0)
                        Trials = Trials + 1
                        for i in range(5):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is OFF"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True
                                
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True                                                            
                                if i%5 == 0:
                                    self._clickOnRefreshButton()
                                assert self.result == True
                                
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered off"%WemoFriendlyName)   
                                    self.result = False 
                    if self.result == True:
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                        raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)

            elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is ON"%WemoFriendlyName)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is STANDBY"%WemoFriendlyName)):
                while Trials < 2:
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton")):
                        time.sleep(self.delay)
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=WeMoButton", 0, 0)
                        time.sleep(self.delay)
                        Trials = Trials + 1

                        for i in range(10):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is OFF"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True
                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True
                                if i%5 == 0:
                                    self._clickOnRefreshButton()
                                assert self.result == True
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered off"%WemoFriendlyName)
                                self.result = False
                    elif (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton")):
                        self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "class=InsightButton", 0, 0)
                        Trials = Trials + 1
                        for i in range(5):
                            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is OFF"%WemoFriendlyName) == True):
                                self.result = True
                                break
                            else:
                                self._handlePopUpOnWeMoApp()
                                assert self.result == True

                                self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName)
                                assert self.result == True
                                if i%5 == 0:
                                    self._clickOnRefreshButton()
                                assert self.result == True

                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("WeMo %s is not powered off"%WemoFriendlyName)
                                    self.result = False
                    if self.result == True:
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                        raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            else:
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s is OFF"%WemoFriendlyName) == True or self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=%s is OFF"%WemoFriendlyName) == True
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('WeMo:%s is allready Off'%WemoFriendlyName)
        except:
            self.exception_msg = "The WeMo device with friendly name %s is not turned off after %s trials"%(WemoFriendlyName,Trials)
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _turnOffWemo() encountered and Error")
                self.WeMoAppLog.LogException()
    ######################################################################################################################
    
    ################################################
    #Handling the Wemo App Presetup Screens for SNS#
    ################################################
    def _clickOnSwitchAndMotionSetupButton(self):
        """
        Click on the Switch/Motion button to go through the Demo of how to set up the Switch/Sensor on the Wemo App.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Switch/Motion button to go through the Demo of how to set up the Switch/Sensor on the Wemo App.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=WeMo Switch/Insight")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=WeMo Switch/Insight")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=btn_setup_switchsensor.png" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=btn_setup_switchsensor.png" could not be found.')
        except:
            self.exception_msg = "Failed to click Identify/Click on the Switch/Sensor button on Get Started Page. Please refer the screen captured and logs for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@accessibilityIdentifier,'close_btn_white.png')]")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[contains(@accessibilityIdentifier,'close_btn_white.png')]")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSwitchAndMotionSetupButton() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clickOnLightSwitchSetupButton(self):
        """
        Click on the Light Switch button to go through the Demo of how to set up the Switch/Sensor on the Wemo App.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Switch/Motion button to go through the Demo of how to set up the Switch/Sensor on the Wemo App.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=btn_setup_lightswitch.png")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityIdentifier=btn_setup_lightswitch.png")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=btn_setup_switchsensor.png" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=btn_setup_switchsensor.png" could not be found.')
        except:
            self.exception_msg = "Failed to click Identify/Click on the Light Switch button on 'Get Started' Page. Please refer the screen captured and logs for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnLightSwitchSetupButton() encountered and Error")
                self.WeMoAppLog.LogException()   

    def _checkTheLightSwitchSetupPage(self):
        """
        Check for the Plug Me In Box on the Wemo App Screen
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking the Light Swith Setup Page.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Install Light Switch.")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=(see instructions in box)")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Install Light Switch." or "accessibilityLabel=(see instructions in box)" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Install Light Switch." or "accessibilityLabel=(see instructions in box)" could not be found.')
        except:
            self.exception_msg = "Failed to Identify the Light switch setup page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkTheLightSwitchSetupPage() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _checkPlugMeInHelpScreenForSNS(self):
        """
        Check for the Plug Me In Box on the Wemo App Screen
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Plug Me In Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Switch/Sensor Set Up")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Plug Me In")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Switch/Sensor Set Up" or "accessibilityLabel=Plug Me In" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Switch/Sensor Set Up" or "accessibilityLabel=Plug Me In" could not be found.')
        except:
            self.exception_msg = "Failed to Identify the Switch & Sensor setup page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkPlugMeInHelpScreenForSNS() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnDemoButton(self):
        """
        Clicking on the Demo Button for the Switch and Motion for the Setup Help on the Wemo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Demo button on the Setup help page to open the Demo video for the Switch and the Motion.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Demo Video")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Demo Video")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Demo" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Demo" not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWemoSwitchAndMotionSetupDemoButton() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _installWemoApp(self,appPath):
        """
        Installs the Wemo App on the IOS Device
        @param appPath: The Wemo App Path on the machine
        @type appPath: String 
        """
        self.result = None
        try:
            self.exception_msg = None
            if not os.path.exists(appPath):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Cannot install the Application as the appPath:%s does not exists."%appPath)
                raise Exception("Cannot install the Application as the appPath:%s does not exists."%appPath)
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Installing the Wemo App:%s."%appPath)
            self.ExperitestClient.install2(appPath, True, True)
            self.result = True
        except:
            self.exception_msg = "Failed while installing of the WeMo app"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _installWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _uninstallWemoApp(self,appIdentifier):
        """
        Uninstall the Wemo App from the iOS Device
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Uninstall Wemo App:%s."%appIdentifier)
            self._clearApplicationData(appIdentifier)
            self.ExperitestClient.uninstall(appIdentifier)
            self.result = True
        except:
            self.exception_msg = "Failed while Un-installing of the %s app"%appIdentifier
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _uninstallWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                
    # def _handlePopUpOnWeMoApp(self):
    #
    #     try:
    #         self.result = None
    #         self.exception_msg = None
    #         if self.WeMoAppLog is not None:
    #             self.WeMoAppLog.Info("Handling the pop ups")
    #
    #         for i in range(10):
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Allow']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Allow']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityIdentifier='close_btn.png' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityIdentifier='close_btn.png' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='OK' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='OK' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Ok' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Ok' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Not Now' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Not Now' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Not now' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Not now' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Okay' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Okay' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Hooray!' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Hooray!' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='No, Thanks' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='No, Thanks' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #             if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Go Update' and @top='true']")):
    #                 self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Go Update' and @top='true']")
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #         else:
    #             if self.WeMoAppLog is not None:
    #                 self.WeMoAppLog.Error('Raising the Exception as the pop ups could not be found.')
    #                 raise Exception('Raising the Exception as the pop ups could not be found.')
    #     except:
    #         self._screenCapture()
    #         self._getTheIOSDeviceLogs()
    #         self._homeScreen()
    #         self.result = False
    #         if self.WeMoAppLog is not None:
    #             self.WeMoAppLog.Error("The method _handlePopUpOnWeMoApp() encountered and Error")
    #             self.WeMoAppLog.LogException()

    def _handlePopUpOnWeMoApp(self):
        """
            Handle pop up on WeMo App occurring irregularly.
            1. New Firmware Available.
            2. TOKEN ERROR.
            3. Filter Change Detected.
            4. Seems to be missing its filters.
            5. Lost Connection.
            6. More Features.
            7. Needs new filters soon.
            8. Order new filters.
            9. Could not edit the name.
            10. Break apart this group?
            11. Time to Refresh
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for Pop up's on WeMo app and handle the same.")
            Text_OnScreen = []
            List_of_PopUps = {
                                'New Firmware Available':'Not Now',
                                'TOKEN ERROR':'OK',
                                'Filter Change Detected':'Ok',
                                'seems to be missing its filters':'OK',
                                'Lost Connection':'Okay',
                                'More Features':'Not now',
                                'needs new filters soon.':'OK',
                                'Order new filters':'OK',
                                'Could not edit the name. Please try again.':'OK',
                                'Break Apart this group?': 'Remove',
                                'Time to refresh!': 'OK',
                                'Select a Wireless Network':'Cancel',
                                'Update Complete':'Hooray!',
                                'Enjoying WeMo?':'No, Thanks',
                                'Sign In to iTunes Store':'Cancel',
                                'Got Nest?':'When you connect Wemo to Nest, various awesome things become possible.Find out more...',
                                'Notifications may include alerts, sounds and icon badges. These can be configured in Settings.':'OK',
                                'Sorry, we were unable to setup your remote access just now':'OK',
                                'Rule Cannot Be Created':'Go Update',
                                'Disable Remote Access?':'Disable',
                                'Remote Access Enabled':'OK'
                            }
            Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")
            for i in range(10):
                popup_break_flag = True
                for text_message in List_of_PopUps.keys():
                    for message_on_smartdevice in Text_OnScreen:
                        if text_message in message_on_smartdevice:
                            if text_message == 'New Firmware Available':
                                popup_break_flag = False
                                time.sleep(self.delay)
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='New Firmware Available']/../..//*[@accessibilityLabel='Not Now']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='New Firmware Available']/../..//*[@accessibilityLabel='Not Now']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")

                                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='New Firmware Available']/../../..//*[@text='Not Now']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='New Firmware Available']/../../..//*[@text='Not Now']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'TOKEN ERROR':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='TOKEN ERROR']/../../..//*[@text='OK' and @top='true']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='TOKEN ERROR']/../../..//*[@text='OK' and @top='true']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")

                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Break Apart this group?':
                                popup_break_flag = False

                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Break Apart this group?']/..//*[@text='Remove']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Break Apart this group?']/..//*[@text='Remove']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")

                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'seems to be missing its filters':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'seems to be missing its filters.')]",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'seems to be missing its filters.')]/..//*[@text='OK']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Filter Change Detected':
                                popup_break_flag = False
                                try:
                                    self.ExperitestClient.longClick("NATIVE", "accessibilityLabel=Ok", 0, 1, 0, 0)
                                except:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("It seems like another pop-up over shaded Lost Connection pop up Lets try again...")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Lost Connection':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Lost Connection",0) and self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Lost Connection", 0, "Inside", "TEXT", "Lost Connection", 0, 0):
                                    try:
                                        self.ExperitestClient.longClick("NATIVE", "accessibilityLabel=Okay", 0, 1, 0, 0)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("It seems like another pop-up over shaded Lost Connection pop up Lets try again...")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'More Features':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Not now",0):
                                    try:
                                        self.ExperitestClient.longClick("NATIVE", "xpath=//*[@accessibilityLabel='Not now']", 0, 1, 0, 0)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("It seems like another More Feature pop up was over shaded by some other pop up Lets try again...")

                                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Not Now",0):
                                    try:
                                        self.ExperitestClient.longClick("NATIVE", "xpath=//*[@accessibilityLabel='Not Now']", 0, 1, 0, 0)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("It seems like another More Feature pop up was over shaded by some other pop up Lets try again...")

                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Time to refresh!':
                                popup_break_flag = False
                                try:
                                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Time to refresh!']/..//*[@text='OK']",0):
                                        self.ExperitestClient.longClick("NATIVE","xpath=//*[@text='Time to refresh!']/..//*[@text='OK']", 0, 1, 0, 0)
                                except:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("It seems like another Time to refresh pop up was over shaded by some other pop up Lets try again...")

                            Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Order new filters':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Order new filters')]/../..//*[@accessibilityLabel='OK']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Order new filters')]/../..//*[@accessibilityLabel='OK']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'needs new filters soon':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'needs new filters soon.')]/..//*[@accessibilityLabel='OK']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'needs new filters soon.')]/..//*[@accessibilityLabel='OK']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Could not edit the name. Please try again.':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Could not edit the name. Please try again']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Update Complete':
                                popup_break_flag = False
                                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Update Complete']/../../..//*[@text='Hooray!' and @top='true']")):
                                    try:
                                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Update Complete']/../../..//*[@text='Hooray!' and @top='true']")
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == '':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Select a Wireless Network']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","accessibilityLabel=Cancel",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Enjoying WeMo?':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='No, Thanks']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='No, Thanks']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Sign In to iTunes Store':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Cancel']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Cancel']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Notifications may include alerts, sounds and icon badges. These can be configured in Settings.':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Got Nest?':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityIdentifier='close_btn.png']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityIdentifier='close_btn.png']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Sorry, we were unable to setup your remote access just now':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Rule Cannot Be Created':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Go Update']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Go Update']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Disable Remote Access?':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Disable Remote Access?']/../../..//*[@text='Disable' and @top='true']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Disable Remote Access?']/../../..//*[@text='Disable' and @top='true']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

                            if text_message == 'Remote Access Enabled':
                                popup_break_flag = False
                                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK' and @top='true']",0):
                                    try:
                                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='OK' and @top='true']",0,1)
                                    except:
                                        if self.WeMoAppLog is not None:
                                            self.WeMoAppLog.Info("The pop up was over shaded.")
                                Text_OnScreen = self.ExperitestClient.getText("NATIVE").split("\n")

            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("No Pop up found at this point of time.")

            self.result = True
        except:
            self.exception_msg = "Failed while trying to close the pop up. Please refere the screen capture for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _handlePopUpOnWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _startVideoCapture(self):
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Start the video capture.")

            LogDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("IOSWeMoApp_Generic.py")), os.pardir)), "logs")    
            self.ExperitestClient.setReporter2("html", LogDir, "Video")
            self.ExperitestClient.startVideoRecord()
            self.result = True
        except:
            self.exception_msg = "Failed while trying to close the pop up. Please refere the screen capture for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _startVideoCapture() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _stopVideoCapture(self):
        try:
            self.result = None
    
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Stop the video capture.")
            
    
            self.ExperitestClient.stopVideoRecord()
            self.ExperitestClient.generateReport2(False)
            LogDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("IOSWeMoApp_Generic.py")), os.pardir)), "logs")    
            for root,dirs,files in os.walk(LogDir):
                for filenames in files:
                    if filenames.endswith("mp4"):
                        print filenames
            self.result = True
        except:
            self.exception_msg = "Failed while trying to close the pop up. Please refere the screen capture for more details."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _stopVideoCapture() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _getCPUStats(self):
        '''
        Get CPU Stats
        '''
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Start Monitoring the CPU statistics.")

                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIAPageIndicator']",0):
                    self.app_Launched_Status = False
                    self.result = True
                else:
                    self.ExperitestClient.startMonitor("cpu")
                    self.ExperitestClient.startMonitor("memory")
                    self.CPU_Usage = self.ExperitestClient.getCounter("cpu")
                    self.Memory_Usage = self.ExperitestClient.getCounter("memory")
                    self.result = True
        except:
            self.exception_msg = "Failed to get CPU Usage after App Launch."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getCPUStats() encountered and Error")
                self.WeMoAppLog.LogException()     

    def _launchWemoApp(self,appIdentifier,closePopUpOnLaunch = True):
        """
        Launch the Wmo App on the IOS Device
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String
        """
        try:
            self.result = None
            self.exception_msg = None
            self.crashCount = 0
            launchCount = 0
            self.launchIdentifier = True
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Launching the Wemo App:%s and waiting for it."%appIdentifier)
            self.ExperitestClient.launch("search:%s"%appIdentifier, True, False)
            time.sleep(self.delay*2)
            self._isAppLaunched()
            self.ExperitestClient.waitForElement("NATIVE","xpath=//*[@text='Personalise']",0,10000)
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Personalise']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Personalize page found, continuing with WEMO device pairing")
            else:
                self._wemoCouldNotConnectToWiFiPopUp()
                self._handlePopUpOnWeMoApp()
        except:
            self.exception_msg = "Tried to launch the %s app %d times and the app did not launch. Please check the App for more details."%(appIdentifier,launchCount)
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _isAppLaunched(self):
        """
        Check whether the App is launched or not
        """
        self.result = True
        # try:
        #     if "wemo" in self.ExperitestClient.getCurrentApplicationName():
        #         self.result = True
        #     else:
        #         raise Exception("WeMo App crashed")
        # except:
        #     self.exception_msg = "App crashed."
        #     self._screenCapture()
        #     self._getTheIOSDeviceLogs()
        #     self._homeScreen()
        #     self.result = False
        #     if self.WeMoAppLog is not None:
        #         self.WeMoAppLog.Error("The method _isAppLaunched() encountered and Error")
        #         self.WeMoAppLog.LogException()
    
    def _closeApplication(self,appIdentifier=None):
        """
        Closing the Wemo App on the IOS Device
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String 
        """
        self.result = None
        self.exception_msg = None
        self.launchIdentifier = False
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Closing the application:%s."%appIdentifier)
        try:
            # self._getCPUStats()
            # print self.result
            #
            # if (float(self.CPU_Usage) > 80 or float(self.Memory_Usage) > 75000000):
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info("It's time to Reboot the Phone since the Memory/CPU has crossed 75%..")
            #
            #     self._rebootSmartDevice()
                
            if appIdentifier == None:
                time.sleep(self.delay)
                self.ExperitestClient.applicationClose("")
                time.sleep(self.delay)
                self.result = True
            else:
                time.sleep(self.delay)
                self.ExperitestClient.applicationClose(appIdentifier)
                time.sleep(self.delay)
                self.result = True
        except:
            self.exception_msg = "Failed while closing the app. "
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _closeApplication() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clearApplicationData(self,appIdentifier=None):
        """
        Clearing the Application Data of the Wemo App
        @param appIdentifier: The Wemo App Identifier
        @type appIdentifier: String 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clearing the Application Data of the application:%s."%appIdentifier)            
            if appIdentifier == None:
                self.ExperitestClient.applicationClearData("")
                self.result = True
            else:
                self.ExperitestClient.applicationClearData(appIdentifier)
                self.result = True
        except:
            self.exception_msg = "Application Clear Failed.."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clearApplicationData() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _getTheIOSDeviceLogs(self,identifier=None):
        """
        Get the IOS Device Logs from the IOS Device
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Getting the IOS Device Logs from the Phone")
        try:            
            self.result = None
            time.sleep(self.delay)
            deviceLogPath = self.ExperitestClient.getDeviceLog()
            time.sleep(self.delay)
            if os.path.exists(deviceLogPath):
                deviceLogFile = open(deviceLogPath,'r')
                deviceLog = deviceLogFile.read()
                deviceLogList = deviceLog.split("\n")
                deviceLogFile.close()
                if identifier:
                    logDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("IOSWeMoApp_Generic.py")), os.pardir)), "logs")
                    fileName = "iOSDeviceLog" + '_' +identifier
                    currentLogFilePath = os.path.join(logDir,'%s_%s.log'%(strftime("%Y-%m-%d_%H-%M-%S"),fileName))
                    with open(currentLogFilePath,'w') as applog:
                        for deviceLogLine in deviceLogList:
                            if (deviceLogLine.find("LaunchAgent")==-1) and (deviceLogLine.find("<Warning>: dump")==-1) and (deviceLogLine.find('"frame"')==-1):
                                applog.write(deviceLogLine)
                    self.result = True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("==============")
                        self.WeMoAppLog.Info("IOS DEVICE LOGS:")
                        self.WeMoAppLog.Info("==============")
                    for deviceLogLine in deviceLogList:
                        if (deviceLogLine.find("LaunchAgent")==-1) and (deviceLogLine.find("<Warning>: dump")==-1) and (deviceLogLine.find('"frame"')==-1):
                            self.WeMoAppLog.Info(deviceLogLine)

                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("==============")
                    self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Could not get the Device Logs of the IOS Device")
                    raise Exception("Could not get the Device Logs of the IOS Device")        
        except:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheIOSDeviceLogs() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _screenCapture(self,currentLogFileNameIdentifier = "%Y-%m-%d_%H-%M-%S"):
        """
        Capture the Screen on the iOS Device
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Capture the Screen on the iOS Device")
        try:
            capturedFilePath = self.ExperitestClient.capture()
            print capturedFilePath
            LogDir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("IOSWeMoApp_Generic.py")), os.pardir)), "logs")
            if self.WeMoAppLog is not None:
                currentLogFilePath = self.WeMoAppLog.getLogFilePath()
            if os.path.exists(currentLogFilePath):
                currentLogFileName = (os.path.basename(currentLogFilePath)).strip().replace(".log","")
            if currentLogFileNameIdentifier != "%Y-%m-%d_%H-%M-%S":
                currentLogFileName = currentLogFileName + '_' + currentLogFileNameIdentifier
            time.sleep(self.delay)
            if os.path.exists(capturedFilePath):
                os.rename(capturedFilePath, os.path.join(LogDir,"%s_%s.png"%(strftime("%Y-%m-%d_%H-%M-%S"),currentLogFileName)))
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Could not get the Captured File Path on the iOS Device")
        except:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.LogException()

    def _getTheSmartDeviceInfo(self):
        """
        Get the IOS Device Info
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Get the IOS Device Info")
            self.WeMoAppLog.Info("Smart Device Info is:%s"%self.SmartDeviceInfo)
        return self.SmartDeviceInfo
    ##########################################################################################
    
    ########################################
    #Handling the Wemo App Presetup Screens#
    ########################################
    def _checkForGetStartedTab(self):
        """
        Verify whether the Get Started .
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Get Started Tab on the Setup Help Page to show how to Setup the Wemo.")
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Get Started")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Get Started" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Get Started" could not be found.')
        except:
            self.exception_msg = "The App Failed while verifying the Get Started page of the WeMo."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForGetStartedTab() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clickOnGetStartedTab(self):
        """
        Click on the Get Started Button on the Wemo App.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Get Started Tab on the Setup Help Page to show how to Setup the Wemo.")
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Get Started")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Get Started")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Get Started" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Get Started" could not be found.')
        except:
            self.exception_msg = "Failed to click on Get Started Tab of the WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnGetStartedTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkOpenSettingsHelpScreen(self):
        """
        Check for the Open Settings Box on the Wemo App Screen
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Open Settings Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Open Settings")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Open Settings" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Open Settings" could not be found.')
        except:
            self.exception_msg = "Open settings box is not seen on the WeMo App."
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkOpenSettingsHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkTapWifiHelpScreen(self):
        """
        Check for the Tap WiFi Box on the Wemo App Screen
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Tap WiFi Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Tap WiFi")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Tap WiFi" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Tap WiFi" could not be found.')
        except:
            self.exception_msg = "Failed while verifying the Element Tap Wifi on the setup process of WeMo.. (Traversed from Get Started Page.)"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkTapWifiHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkSelectWemoNetworkHelpScreen(self):
        """
        Check for the Select the WeMo Network Box on the Wemo App Screen
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Select the WeMo Network Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Select the WeMo Network")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Select the WeMo Network" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Select the WeMo Network" could not be found.')
        except:
            self.exception_msg = "Failed while checking the header Selectthe WeMo Network on the Wifi selection page to select the Home network on WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkSelectWemoNetworkHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkOpenWemoAppHelpScreen(self):
        """
        Check for the Open the WeMo app text on the Wemo App Help Screen.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Open the WeMo app Help Screen to setup the device.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Open the WeMo app to complete the setup.")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Open the WeMo app to complete the setup." could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Open the WeMo app to complete the setup." could not be found.')
        except:
            self.exception_msg = "Failed while opening the WeMo App Help screen (Seen on the Get Started Page.)"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkOpenWemoAppHelpScreen() encountered and Error")
                self.WeMoAppLog.LogException()
               
    def _clickOnTheNextArrowForSetupHelp(self):
        """
        Click on the Forward Arrow on the Setup Help Screen on the Wemo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Next arrow on the Setup help page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Next Step")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Next Step")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Next Step" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Next Step" could not be found.')
        except:
            self.exception_msg = "Failed while traversing (Next Button) across the pages of Get Started to complete the WeMo App documentation process shown on Get started WeMo"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheNextArrowForSetupHelp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnTheBackArrowForSetupHelp(self):
        """
        Click on the Backward Arrow on the Setup Help Screen on the Wemo App
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Back arrow on the Setup help page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Previous Step")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Previous Step")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=btn_arrow_left.png" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=btn_arrow_left.png" could not be found.')
        except:
            self.exception_msg = "Failed while traversing (Back Button) across the pages of Get Started to complete the WeMo App documentation process shown on Get started WeMo"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheBackArrowForSetupHelp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnExitSetupHelp(self):
        """
        Clicking on the exit button to exit the Set up Help Screen
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Exit button on the Setup help page to close the help page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=btn_closewindow.png" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=btn_closewindow.png" could not be found.')
        except:
            self.exception_msg = "Failed while trying to close the Get Started setup sequence by clicking on (X) button."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnExitSetupHelp() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _closeTheSetUpAnotherDevicePage(self):
        """
        Clicking on the exit button to exit the Switch/Motion and Light Switch Demo Help Screen Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Clicking on the exit button to exit the Switch/Motion and Light Switch Demo Help Screen Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=btn closewindow" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=btn closewindow" could not be found.')
        except:
            self.exception_msg = "Failed while exiting the SetupAnother Device page by clicking on (X) on WeMo App Setup."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _closeTheSetUpAnotherDevicePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWemoSetupFAQ(self):
        """
        Clicking on the FAQ button on the Wemo Switch and Motion Help Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the FAQ button on the Wemo Switch and Motion Help Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=FAQ")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=FAQ")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=FAQ" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=FAQ" could not be found.')
        except:
            self.exception_msg = "Failed while selecting the FAQ tab to see more details on Frequently Asked Questions in WeMo App (Get Started Page.)"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWemoSetupFAQ() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnDoneButtonAfterReadingSetupFAQ(self):
        """
        Clicking on the Done button after reading the Wemo Switch and Motion FAQ
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Done button after reading the Wemo Switch and Motion FAQ.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Done")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Done" could not be found.')
        except:
            self.exception_msg = "Failed while closing the FAQ page  by hitting <Done> button traversed from Get Started Page of WeMo"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnDoneButtonAfterReadingSetupFAQ() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnLearnMoreAboutWemoSetup(self):
        """
        Click on the Learn More about WeMo link.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Learn More About Link on the Setup help page to open the Learn More About Wemo Help Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Learn more about WeMo")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Learn more about WeMo")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Learn more about WeMo" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Learn more about WeMo" could not be found.')
        except:
            self.exception_msg = "Failed while Ideintifying/Clicking on Learn More link on the Get Started page of WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnLearnMoreAboutWemoSetup() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnDoneButtonAfterReadingLearnMoreAboutWeMoPage(self):
        """
        Clicking on the Done button after reading the Wemo Switch and Motion Learn More About WeMo Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Done button after reading the Wemo Switch and Motion Learn More About WeMo Page.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Done" could not be found.')
        except:
            self.exception_msg = "Failed while Identifying/Clicking of <Done> button to come back to Get Started page from 'Learn More' link page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Exit Instruction")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Exit Instruction")
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=btn closewindow")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=btn closewindow")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnDoneButtonAfterReadingLearnMoreAboutWeMoPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyNoNetworkConnectionPageWhenLaunchingWemoApp(self):
        """
        Verify the No Network Connection message when launching the Wemo App when the Wifi is turned Off
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the No Network Connection message when launching the Wemo App when the Wifi is turned Off.")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=No Network Connection")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Try Again")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=No Network Connection" or "accessibilityLabel=Try Again"  could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=No Network Connection" or "accessibilityLabel=Try Again" could not be found.')
        except:
            self.exception_msg = "No network page seen while app is launched with No Wifi and already the Remote Access is enabled for the WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyNoNetworkConnectionPageWhenLaunchingWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    ########################################
            
    ####################################
    #Selecting the SSID in the Wemo App#
    ####################################
    def _checkForGetStartedTabNotVisible(self):
        """
        Verify that the Get Started Button is not shown.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying that the Get Started Button is not shown while Setting up the Wemo with the Router.")
            
            for i in range(10):
                if not (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Get Started")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Get Started" is found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Get Started" is found.')
        except:
            self.exception_msg = "The app shows up Get Started page when setup is performed."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForGetStartedTabNotVisible() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyWeMoSetupScreen(self):
        """
        Verify the Wemo Setup Screen when setting up the Wemo
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying that Wemo Setup Screen is displayed which displays the Wireless Networks to connect to.")
            
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=ic_setupquestion.png")) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Select Your Wi-Fi")):
                time.sleep(self.delay)
                return True
            else:
                if self.WeMoAppLog is not None:    
                    self.WeMoAppLog.Warning('The element:"accessibilityLabel=ic_setupquestion.png" is not found.')
                return False
        except:
            self.exception_msg = "Both Setup Successful or Select Your Wi-Fi screen is not seen"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWeMoSetupScreen() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _checkForWeMoSetupScreen(self):
        """
        Check for the Wemo Setup Screen when setting up the Wemo
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying that Wemo Setup Screen is displayed which displays the Wireless Networks to connect to.")
             
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=ic_setupquestion.png")) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Select Your Wi-Fi")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Select Your Wi-Fi" or "accessibilityLabel=Select your home Wi-Fi Network" is not found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Select Your Wi-Fi" or "accessibilityLabel=Select your home Wi-Fi Network" is not found.')
        except:
            self.exception_msg = "Neither Setup Succesful screen is seen nor Select Your Wi-Fi page is shown up."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForWeMoSetupScreen() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _selectTheSSIDInTheNetworkListInWemoApp(self,ssid,security="WPA2"):
        """
        Select the SSID in the Network List in the Wemo App. 
        @param ssid: The Wireless SSID to which the Wemo will connect to.
        @type ssid: String
        @param security: The Wireless Security (WPA2,None or other)
        @type security: String    
        """
        try:
            self.result = None
            self.exception_msg = None
            self._isAppLaunched()
            assert self.result == True
            
            ssidFound = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Selecting the SSID:%s whose wireless Security is:%s"%(ssid,security))
            time.sleep(self.delay)
            if security == "WPA2":
                for i in range(15):
                    if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ssid) == True:
                        time.sleep(self.delay)
                        try:
                            self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%ssid, 0, True)
                            time.sleep(self.delay)
                            ssidFound = True
                            self.result = True
                            break                            
                        except:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The App missed out of the Network before it could select it so let's try again.")
                    time.sleep(self.delay*20)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Warning('Could not find the element:"accessibilityLabel=%s".Retrying again.'%ssid)
                    
                time.sleep(self.delay)
                if ssidFound == False:
                    if(self.ExperitestClient.swipeWhileNotFound2("Down", 0, 2000, "NATIVE", "accessibilityLabel=%s"%ssid, 1000, 20, False))== False:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ssid)
                        raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ssid)
                    else:
                        time.sleep(self.delay)
                        self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%ssid, 0, True)
                        time.sleep(self.delay)
                        ssidFound = True
                        self.result = True
                assert ssidFound == True
                                      
            if security == "None":
                for i in range(10):
                    if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ssid) == True:
                        time.sleep(self.delay)
                        self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%ssid, 0, True)
                        time.sleep(self.delay)
                        ssidFound = True
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Warning('Could not find the element:"accessibilityLabel=%s".Retrying again.'%ssid)
                    
                time.sleep(self.delay)
                if ssidFound == False:
                    if(self.ExperitestClient.swipeWhileNotFound2("Down", 0, 2000, "NATIVE", "accessibilityLabel=%s"%ssid, 1000, 20, False))== False:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ssid)
                        raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ssid)
                    else:
                        time.sleep(self.delay)
                        self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%ssid, 0, True)
                        time.sleep(self.delay)
                        ssidFound = True
                        self.result = True
                assert ssidFound == True
        except:
            self.exception_msg = "Failed while selecting the Wi-Fi (Home network) to which WeMo should be paired and Remote access has to be Enabled. Part of setup process."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheSSIDInTheNetworkListInWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
                    
    def _enterWirelessSecurityPasswordInWemoApp(self,ssid,password):
        """
        Enter the Wireless Network Password for the Wemo to connect to the Wireless Network in the Wemo App. 
        @param ssid: The Wireless SSID to which the Wemo will connect to.
        @type ssid: String
        @param password: The Wireless Security Password for the Wireless Network Selected
        @type password: String    
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Entering the Wireless Network Password:%s for the Wireless Network:%s in the Network Password field"%(ssid,password))
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Enter Password") == True:
                    self.result = True
                    break
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=ic_setupquestion.png")):
                    self._selectTheSSIDInTheNetworkListInWemoApp(ssid)
                    assert self.result == True
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Enter Password" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Enter Password" could not be found.')
             
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Password") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("NATIVE", "accessibilityLabel=Password", 0, password)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Password" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Password" could not be found.')
        except:
            self.exception_msg = "Failed while entering the password. Either the password is too long or the password is not in supported format."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel", 0, 1)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterWirelessSecurityPasswordInWemoApp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnJoinButtonToAssociateWemoToRouter(self):
        """
        Clicking on the Join button to associate the Wemo to the Router. 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Join button to associate the Wemo to the Router")
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Enter Password") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Enter Password" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Enter Password" could not be found.')
            
            UIKBKEY_COUNT = self.ExperitestClient.getElementCount("NATIVE", "class=UIKBKeyView")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIKBKeyView",UIKBKEY_COUNT-1) == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "class=UIKBKeyView", UIKBKEY_COUNT-1, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIKBKeyView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIKBKeyView" could not be found.')
        except:
            self.exception_msg = "Failed to Join the Network selected on WeMo App to associate the WeMo with Home Router network."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel", 0, 1)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnJoinButtonToAssociateWemoToRouter() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForSecurityWarningPopUpWhenConectingToOpenNetwork(self):
        """
        Check for the Security Warning Pop up when connecting to the Open Security Network. 
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for the Security Warning Pop up when connecting to the Open Security Network.")
                        
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Security Warning") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Security Warning" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Security Warning" could not be found.')
        except:
            self.exception_msg = "The WeMo App is getting paired to a network which doesn't have security. The Pop up warning which is expected to be shown up is missing."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForSecurityWarningPopUpWhenConectingToOpenNetwork() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _confirmConnectingToTheOpenNetworkByClickingOnYes(self):
        """
        Click on the Yes button on the Security Warning page to connect to the Open Network
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Yes button on the Security Warning page to connect to the Open Network")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Security Warning") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Security Warning" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Security Warning" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Yes")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
        except:
            self.exception_msg = "The message which shows up the network is insecure to pair the WeMo Device has changed or the Identification has failed."        
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmConnectingToTheOpenNetworkByClickingOnYes() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelConnectingToTheOpenNetworkByClickingOnNo(self):
        """
        Click on the No button on the Security Warning page to not to connect to the Open Network
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the No button on the Security Warning page to not to connect to the Open Network")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Security Warning") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Security Warning" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Security Warning" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=No")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=No")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=No" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=No" could not be found.')
        except:
            self.exception_msg = "Failed to click on No button to cancel the pairing of WeMo device with an inseucre router."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelConnectingToTheOpenNetworkByClickingOnNo() encountered and Error")
                self.WeMoAppLog.LogException()
    ###################################################################################################
    
    ######################################################
    #Handling the Setup Successful Screen in the Wemo App#
    ######################################################
    def _checkForEnterPasswordAgain(self):
        """
        Check for the Pop up which says to Renter the SSID Password Again
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Pop up which says to Renter the SSID Password Again")
        if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Please try re-entering your password.") == True:
            return True
        return False
    
    def _clickOnOKButtonForEnterPasswordAgainPopUp(self):
        """
        Click on the OK button on the Re-enter Password Again Pop Up
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the OK button on the Re-enter Password Again Pop Up")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Please try re-entering your password.") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Please try re-entering your password." could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Please try re-entering your password." could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=OK")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=OK")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=OK" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=OK" could not be found.')
        except:
            self.exception_msg = "Failed to click on OK button on the pop up which says Re-connect by re-entering your password."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnOKButtonForEnterPasswordAgainPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkRouterNotFound(self):
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Checking Wireless Network in range for Wemo to connect.")
            self.WeMoAppLog.Info("Checking for Wireless Router not in range.")
        if(self.ExperitestClient.isElementFound("NATIVE", "class=UIAlertView")) and (re.search("Sorry, your WeMo couldn't connect to your WiFi. Make sure it is not out of range and try again.",self.ExperitestClient.getTextIn2("NATIVE", "class=UIAlertView", 0, "NATIVE","Inside", 0, 0))!=None):
            self._clickOnOKButtonForAlertBoxes()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Join' and @class='UIAButton']"):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Join' and @class='UIAButton']")
                time.sleep(self.delay)
            return True
        return False
    
    def _checkForWeMoConnectivityLost(self):
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Checking for the Alert which says that the WeMo Connectivity is Lost.")
            self.WeMoAppLog.Info("Checking for the Alert which says that the WeMo Connectivity is Lost.")
        if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=We've lost connection with the WeMo device. Please quit this app, reconnect to the WeMo network, and reopen this app.",0)):
            self._clickOnOKButtonForAlertBoxes()
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Warning("The Smart Phone Got connected to the Remote Network. Does not have the Key yet.")
                self.WeMoAppLog.Warning("The Smart Phone Got connected to the Remote Network. Does not have the Key yet.")
            return True
        elif (self.ExperitestClient.isElementFound("NATIVE", "text=We've lost connection with the WeMo device. Please quit this app, reconnect to the WeMo network. If you do not see the WeMo network, setup may have completed. Connect to your Wi-Fi and reopen this app.")):
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Warning("The Smart Phone Got connected to the Remote Network. Does not have the Key yet.")
                self.WeMoAppLog.Warning("The Smart Phone Got connected to the Remote Network. Does not have the Key yet.")
            return True
        return False
    
    def _checkForRemoteAccessNotEnabledPopUp(self):
        """
        Check for the Pop up which says to Remote Access Not Enabled
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Pop up which says to Remote Access Not Enabled")
        if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Sorry, we were unable to setup your remote access just now. To try later, go to More > Remote Access",0):        
            return True
        return False
    
    def _clickOnLaterButtonForNotEnableRemoteAccess(self):
        """
        Click on the Later button on the Remote Access Not Enabled Pop up
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Later button on the Remote Access Not Enabled Pop up")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Sorry, we were unable to setup your remote access just now. To try later, go to More > Remote Access",0):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIAlertView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIAlertView" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Later")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Later")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Later" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Later" could not be found.')
        except:
            self.exception_msg = "Failed to Identify and click on Later button to skip enabling remote access and enable from Remote Access on 'More' Tab of WeMo App"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnLaterButtonForNotEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnTryAgainButtonToEnableRemoteAccess(self):
        """
        Click on the Try Again button on the Remote Access Not Enabled Pop up
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Try Again button on the Remote Access Not Enabled Pop up")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Sorry, we were unable to setup your remote access just now. To try later, go to More > Remote Access",0):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIAlertView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIAlertView" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Try Again")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Try Again")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Try Again" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Try Again" could not be found.')
        except:
            self.exception_msg = "Failed to Identify/click on Try Again button on Enable Remote Access error pop up."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTryAgainButtonToEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _forgetAllWifiNetworkfromWifiSelectionPage(self):
        try:
            self.result = None
            self.exception_msg = None
            # yoffset = self.ExperitestClient.p2cy(5)
            self._homeScreen()
            assert self.result == True
            self._searchForAppAndClick("Settings")
            assert self.result == True
            self._openWifiPage()
            assert self.result == True

            while(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='CHOOSE A NETWORK…']", 0, "Up", "NATIVE", "xpath=//*[contains(@text,'More Info')]", 900, 150)):
                print self.ExperitestClient.clickIn3("NATIVE", "xpath=//*[@text='CHOOSE A NETWORK…']", 0, "Up", "NATIVE", "xpath=//*[contains(@text,'More Info')]", 0,900, 150,1)
                time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Forget This Network' and ./parent::*[@text='Forget This Network']]",0)):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Forget This Network' and ./parent::*[@text='Forget This Network']]",0,1)
                    time.sleep(self.delay)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Forget']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Forget']",0,1)
                        time.sleep(self.delay)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Back']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Back']",0,1)
                        time.sleep(5)
        except:
            self.exception_msg = "Failed while forgetting all Wi-Fi of smart phone from the settings page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            self.remoteAccessEnabled = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _forgetAllWifiNetworkfromWifiSelectionPage() encountered and Error")
                self.WeMoAppLog.LogException()            
            
    def _checkForRemoteAccess(self,routerSSID,routerWirelessPassword,WeMoSmartPhoneSSIDName,appIdentifier,WeMoFriendlyName,WeMoSerialNumber,wifiinterface):
        """
        Check for the Remote Access Pop UP on the Setup Successful Screen.
        Verify that the Remote Access is enabled. If not then try again to Enable it.
        @param routerSSID: Router SSID
        @type routerSSID:String        
        @param routerWirelessPassword: Router Password
        @type routerWirelessPassword:String    
        @param WeMoSmartPhoneSSIDName: SSID of WeMo device shown on the Smart Phone Wi-Fi
        @type WeMoSmartPhoneSSIDName:String   
        @param appIdentifier: "WeMo"
        @type appIdentifier:String      
        @param WeMoFriendlyName: WeMo Friendly name assigned
        @type WeMoFriendlyName:String 
        @param WeMoSerialNumber: Unique serial ID for the WeMo.
        @type WeMoSerialNumber:String   
        @param wifiinterface: Wi-Fi for Windows 8/Wireless Network Connection for Windows 7.
        @type wifiinterface:String          
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Remote Access Pop Up on the Setup Successful sreen of the Wemo App")

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access Enabled") == True) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=Wemo_Navigation_Logo") == True):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Remote Access Pop Up is seen and the Setup is Successfull")
                    break
                else:
                    time.sleep(self.delay*5)
        except:
            self.exception_msg = "Failed while trying to enable the remote access during the setup process. Look into log for more details and screen capture to get page when the failure occured."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            self.remoteAccessEnabled = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyAndCheckForThePersonalizePage(self):
        """
        Verify and check for the Personalize Page while launching the Wemo App during Setup
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify and check for the Personalize Page while launching the Wemo App during Setup")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
        except:
            self.exception_msg = "Failed to Identify the text Personalize text while setting up of the WeMo Device using WeMo App"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyAndCheckForThePersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _getWemoFriendlyNameOnSetUpSuccessfulPage(self):
        """
        Get Friendly Name for the WeMo Device
        """
        try:
            self.result = None
            self.exception_msg = None
            self.WeMoFriendlyName = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get Friendly Name for the WeMo Device:%s"%wemoDevice)
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Personalize page. WeMo App is not in Personalize page now."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UITextField") == True:
                    time.sleep(self.delay)
                    self.WeMoFriendlyName = self.ExperitestClient.elementGetText("NATIVE", "class=UITextField",0).strip()
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "WeMo App could not fetch the text put on the Device Friendly name text box shown on the Personalize page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.WeMoFriendlyName = None
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getWemoFriendlyNameOnSetUpSuccessfulPage() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _verifyWemoFriendlyNameOnPersonalizePage(self,WeMoFriendlyName):
        """
        Verify the Friendly Name for the WeMo Device
        @param wemoDevice: Either a Switch or Motion
        @type wemoDevice:String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Friendly Name for the WeMo Device")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The WeMo App is not on 'Personalize page'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UITextField") == True:
                    time.sleep(self.delay)
                    assert self.ExperitestClient.elementGetText("NATIVE", "class=UITextField",0).strip() == WeMoFriendlyName
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The Friendly Name of the WeMo doesnot match the firendly name in 'Personalize Page'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWemoFriendlyNameOnPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyDefaultWemoFriendlyNameOnPersonalizePage(self,WemoFriendlyName,wemoDevice):
        """
        Verify the Default Friendly Name for the WeMo Device
        @param WemoFriendlyName: WeMo Friendly Name (Default Friendly Name of the WeMo Device)
        @type wemoDevice:String        
        @param wemoDevice: Either a Switch/Sensor/Insight/InsightV2/Light Switch/Slow Cooker/Coffee Brewer/Air Purifier/Humidifier/Heater
        @type wemoDevice:String
        """
        try:
            self.result = None
            DEVICE_TYPE = {}
            
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the default Friendly Name for the WeMo Device:%s"%wemoDevice)         
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The WeMo App is not in 'Personalize Page'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
        
            DEVICE_TYPE = {
                'Switch':'WeMo Switch',
                'Motion':'WeMo Motion',
                'Insight':'WeMo Insight',
				'InsightV2':'WeMo Insight',
                'Maker':'WeMo Maker',
                'Dimmer':'WeMo Dimmer',
                'SlowCooker':u'Crock-Pot® Slow Cooker'.encode('utf-8'),
                'HeaterA':u'Heater'.encode('utf-8'),
                'HeaterB':u'Heater'.encode('utf-8'),
                'Humidifier':u'Humidifier'.encode('utf-8'),
                'Light':'WeMo Light Switch',
                'AirPurifier':u'Air Purifier'.encode('utf-8'),
                'CoffeeMaker':u'Brewer'.encode('utf-8')
            }
        
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UITextField") == True:
                    if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Name']/.//*[contains(@text,'%s')]"%DEVICE_TYPE[wemoDevice],0)) or (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']"%DEVICE_TYPE[wemoDevice],0)) or (self.ExperitestClient.elementGetText("NATIVE", "class=UITextField",0).strip() == WemoFriendlyName):
                        self.result = True
                        break
                    else:
                        self.exception_msg = "The Personalize page shows a different Friendly Name. It should be WeMo Switch"
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"%s" or %s could not be found.'%(DEVICE_TYPE[wemoDevice],WemoFriendlyName))
                        raise Exception('Raising the Exception as the element:"%s" or %s could not be found.'%(DEVICE_TYPE[wemoDevice],WemoFriendlyName))
                    time.sleep(self.delay)
                else:
                    self.exception_msg = "The Personalize page shows a different Friendly Name. It should be %s"%DEVICE_TYPE[wemoDevice]
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                    raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
            else:
                self.exception_msg = "The Device type %s is invalid and not a part of the Automation List"%wemoDevice
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('The device type is not the right device type. It has to be either "%s".'%','.join(DEVICE_TYPE))
                raise Exception('The device type is not the right device type. It has to be either "%s".'%','.join(DEVICE_TYPE))
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:    
                self.WeMoAppLog.Error("The method _verifyDefaultWemoFriendlyNameOnPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _enterWemoFriendlyName(self,WemoFriendlyName,WeMoSmartPhoneSSIDName,wemoDevice="Switch"):
        """
        Enter the Wemo Friendly Name in the Wemo Name Field in the Personalize Screen
        @param WemoFriendlyName: The Wemo Friendly Name for the Wemo Switch or the Sensor
        @type WemoFriendlyName : String
        @param WeMoSmartPhoneSSIDName: The SSID displayed on the Smart Phone by the Device
        @type WeMoSmartPhoneSSIDName : String
        @param wemoDevice: Either a Switch/Sensor/Insight/InsightV2/Light Switch/Slow Cooker/Coffee Brewer/Air Purifier/Humidifier/Heater
        @type wemoDevice : String        
        """
        try:
            self.result = None
            DEVICE_TYPE = {}
            
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Entering the Wemo Friendly Name:%s in the Wemo Name Field"%WemoFriendlyName)         
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The WeMo App is not in 'Personalize Page'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')

            DEVICE_TYPE = {
                'Switch':'WeMo Switch',
                'Maker':'Maker',
                'Motion':'WeMo Motion',
                'Insight':'WeMo Insight',
                'SlowCooker':u'Crock-Pot® Slow Cooker'.encode('utf-8'),
                'HeaterA':u'Holmes® HeaterA'.encode('utf-8'),
                'HeaterB':u'Holmes® HeaterB'.encode('utf-8'),
                'Humidifier':u'Holmes® Humidifier'.encode('utf-8'),
                'Light':'WeMo Light Switch',
                'AirPurifier':u'Holmes® Air Purifier'.encode('utf-8'),
                'CoffeeMaker':u'Mr. Coffee® Brewer'.encode('utf-8')
            }
            #for i in range(10):
            #    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s (ID: %s) is now connected."%(DEVICE_TYPE[wemoDevice],WeMoSmartPhoneSSIDName))) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s (ID: %s) is now connected."%(WemoFriendlyName,WeMoSmartPhoneSSIDName))):
            #        self.result = True
            #        break
            #else:
            #    self.exception_msg = "The Personalize Page doesn't show %s on the 'Personalize Page'"%WeMoSmartPhoneSSIDName
            #    if self.WeMoAppLog is not None:
            #        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=WeMo Switch (ID: %s) is now connected." could not be found.'%WeMoSmartPhoneSSIDName)
            #    raise Exception('Raising the Exception as the element:"accessibilityLabel=WeMo Switch (ID: %s) is now connected." could not be found.'%WeMoSmartPhoneSSIDName)
    
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UITextField") == True:
                    self.ExperitestClient.elementSendText("NATIVE","class=UITextField",0,WemoFriendlyName)
                    self.result = True
                    break
            else:
                self.exception_msg = "The Personalize Page doesn't show %s on the 'Personalize Page'"%WeMoSmartPhoneSSIDName
                if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"placeholder=WeMo Switch" could not be found.')
                raise Exception('Raising the Exception as the element:"placeholder=WeMo Switch" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterWemoFriendlyName() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyDefaultEmailAddressOnPersonalizePage(self):
        """
        Verify the Default Email Address for the WeMo Device
        """
        pass
        # try:
        #     self.result = None
        #     self.exception_msg = None
        #     if self.WeMoAppLog is not None:
        #         self.WeMoAppLog.Info("Verify the Default Email Address for the WeMo Device")
        #
        #     for i in range(10):
        #         if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
        #             self.result = True
        #             break
        #         time.sleep(self.delay)
        #     else:
        #         self.exception_msg = "WeMo App is not in Personalize Page."
        #         if self.WeMoAppLog is not None:
        #             self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
        #         raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
        #
        #     for i in range(10):
        #         if self.ExperitestClient.isElementFound("NATIVE", "placeholder=(Optional)") == True:
        #             time.sleep(self.delay)
        #             assert self.ExperitestClient.elementGetText("NATIVE", "placeholder=(Optional)",0).strip() == ""
        #             self.result = True
        #             break
        #         elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Enter email address']") == True:
        #             time.sleep(self.delay)
        #             assert self.ExperitestClient.elementGetText("NATIVE", "xpath=//*[@accessibilityLabel='Enter email address']",0).strip() == "Enter email address"
        #             self.result = True
        #             break
        #         time.sleep(self.delay)
        #     else:
        #         self.exception_msg = "The Email Field Doesn't show the  default value on the Placeholder."
        #         if self.WeMoAppLog is not None:
        #             self.WeMoAppLog.Error('Raising the Exception as the element:"placeholder=(Optional)" or accessibilityLabel="Enter email address" could not be found.')
        #         raise Exception('Raising the Exception as the element:"placeholder=(Optional)" or accessibilityLabel="Enter email address" could not be found.')
        # except:
        #     self._screenCapture()
        #     self._getTheIOSDeviceLogs()
        #     self._homeScreen()
        #     self.result = False
        #     if self.WeMoAppLog is not None:
        #         self.WeMoAppLog.Error("The method _verifyDefaultEmailAddressOnPersonalizePage() encountered and Error")
        #         self.WeMoAppLog.LogException()
    
    def _getEmailAddressOnPersonalizePage(self):
        """
        Get Email Address for the WeMo Device
        """
        try:
            self.result = None
            self.exception_msg = None
            self.EmailAddress = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get Email Address for the WeMo Device")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "placeholder=(Optional)") == True:
                    time.sleep(self.delay)
                    self.EmailAddress = self.ExperitestClient.elementGetText("NATIVE", "placeholder=(Optional)",0).strip()
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"placeholder=(Optional)" could not be found.')
                raise Exception('Raising the Exception as the element:"placeholder=(Optional)" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            self.EmailAddress = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getEmailAddressOnPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _verifyEmailAddressOnPersonalizePage(self,emailAddress):
        """
        Verify the Email Address for the WeMo Device
        @param emailAddress: Email Address to be verified
        @type emailAddress:String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Email Address for the WeMo Device")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "WeMo App is not in Personalize Page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "placeholder=(Optional)") == True:
                    time.sleep(self.delay)
                    assert self.ExperitestClient.elementGetText("NATIVE", "placeholder=(Optional)",0).strip() == emailAddress
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The Place holder value for Email Field Doesn't match with the value provided."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"placeholder=(Optional)" could not be found.')
                raise Exception('Raising the Exception as the element:"placeholder=(Optional)" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyEmailAddressOnPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
                    
    def _enterEmailAddressOnPersonalizePage(self,emailAddress):
        """
        Enter the Email Address in the Email Address Field in the Personalize Screen
        @param emailAddress: Email Address to be entered
        @type emailAddress:String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Enter the Email Address in the Email Address Field in the Personalize Screen")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "WeMo App is not in Personalize Page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "placeholder=(Optional)") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("NATIVE","placeholder=(Optional)",0,emailAddress)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Replace the Email Address on 'Personalize Page' with %s"%emailAddress
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"placeholder=(Optional)" could not be found.')
                raise Exception('Raising the Exception as the element:"placeholder=(Optional)" could not be found.')   
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterEmailAddressOnPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForInvalidEmailPopUp(self):
        """
        Check for Invalid Email Pop Up in the Personalize Screen
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for Invalid Email Pop Up in the Personalize Screen")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "class=UIAlertView")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Invalid Email")):
                    time.sleep(self.delay)
                    self._clickOnOKButtonForAlertBoxes()
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIAlertView" or "accessibilityLabel=Invalid Email" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIAlertView" or "accessibilityLabel=Invalid Email" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForInvalidEmailPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyRememberWiFiSettingsCheckedInPersonalizePage(self):
        """
        Verify that the Remember WiFi Settings is checked in the Personalize Page
        """
        pass
        # try:
        #     self.result = None
        #     self.exception_msg = None
        #     if self.WeMoAppLog is not None:
        #         self.WeMoAppLog.Info("Verify that the Remember WiFi Settings is checked in the Personalize Page.")
        #
        #     self._isAppLaunched()
        #     assert self.result == True
        #
        #     for i in range(10):
        #         if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
        #             self.result = True
        #             break
        #         time.sleep(self.delay)
        #     else:
        #         self.exception_msg = "WeMo App is not in 'Personalize Page'"
        #         if self.WeMoAppLog is not None:
        #             self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
        #         raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
        #
        #     for i in range(10):
        #         if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remember Wi-Fi Settings")):
        #             time.sleep(self.delay)
        #             assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Remember Wi-Fi Settings", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)==True
        #             self.result = True
        #             break
        #         elif (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@class='_UISwitchInternalViewNeueStyle1']")):
        #             time.sleep(self.delay)
        #             assert self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='REMEMBER WIFI SETTINGS']/../..//*[@width='70' and @x='484']", 0) == True
        #             self.result = True
        #             break
        #         time.sleep(self.delay)
        #         self.ExperitestClient.swipe2("Down", 500)
        #     else:
        #         self.exception_msg = "The Remember Wi-Fi settings is unchecked."
        #         if self.WeMoAppLog is not None:
        #             self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remember Wi-Fi Settings"could not be found.')
        #         raise Exception('Raising the Exception as the element:"accessibilityLabel=Remember Wi-Fi Settings" could not be found.')
        # except:
        #     self._screenCapture()
        #     self._getTheIOSDeviceLogs()
        #     self._homeScreen()
        #     self.result = False
        #     if self.WeMoAppLog is not None:
        #         self.WeMoAppLog.Error("The method _verifyRememberWiFiSettingsCheckedInPersonalizePage() encountered and Error")
        #         self.WeMoAppLog.LogException()

    
    def _uncheckRememberWiFiSettingsInPersonalizePage(self):
        """
        Uncheck Remember WiFi Settings in Setup Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("UnCheck the Remember Wi-Fi Settings Tab in the Setup Page.Make sure it is unchecked.")
            
            SwipeOffset = self.ExperitestClient.p2cy(70)
            self.ExperitestClient.swipe2("Down", SwipeOffset)

            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "WeMo App is not in 'Personalize Page.'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Personalise" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=REMEMBER WI-FI SETTINGS")):
                    self.result = True
                    break
                time.sleep(self.delay)
                self.ExperitestClient.swipe2("Down", 500)
            else:
                self.exception_msg = "Not able to Identify Remember Wi-Fi Settings on the 'Personalize Page'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remember Wi-Fi Settings"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remember Wi-Fi Settings" could not be found.')
            try:
                self.result = None
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Uncheck Remember Wi-Fi settings")
                self.ExperitestClient.runNativeAPICall("NATIVE","xpath=//*[@class='WMWemoSwitch']",0,"invokeMethod:'{\"selector\":\"setOn:\",\"arguments\":[\"false\"]}'")
                if self.ExperitestClient.runNativeAPICall("NATIVE","xpath=//*[@class='WMWemoSwitch']",0,"invokeMethod:'{\"selector\":\"isOn\",\"arguments\":[]}'") == str(0):
                    self.result = True
            except:
                time.sleep(self.delay)

        except:
            self.exception_msg = "Did not Uncheck the Remember Wi-Fi setting option on the 'Personalize Page'"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _uncheckRememberWiFiSettingsInPersonalizePage() encountered and Error")
                self.WeMoAppLog.LogException()
                  
    def _clickOnPersonalizeButton(self,verify_email=True):
        """
        Click on the Done button to confirm the changes on Wemo Personalize Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Proceed button to confirm the changes on Wemo Setup Page")
            
            SwipeOffset = self.ExperitestClient.p2cy(70)                
            self.ExperitestClient.swipe2("Down", SwipeOffset)
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Next")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Next")
                    time.sleep(self.delay*14)
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Proceed")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Proceed")
                    time.sleep(self.delay*14)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on the < Proceed > or <Next> button on the 'Personalize Page'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Proceed" or element:"accessibilityLabel=Proceed" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Proceed" or element:"accessibilityLabel=Proceed" could not be found.')
            time.sleep(self.delay*10)
            if verify_email:
                for i in range(3):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Handling the email screen if it appears")
                         # hack: as there are scenarios where we will not be able to know the status of app(fresh or old) and the sequence of test cases to determine whether the email opt in screen
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Email']"):  # will appear or not; however email opt in feature will be tested in setup cases 89 and 90
                        self.verifyEmailOptIn(True)
                        break
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnPersonalizeButton() encountered and Error")
                self.WeMoAppLog.LogException()       
    ###################################################################################################
    
    #################################################
    #Handling the Device List Screen on the Wemo App#
    #################################################            
    def _clickOnRefreshButton(self,duration=10):
        """
        Clicking on the Refresh button on the Wemo App
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Refresh button on the WeMo App")
            
            self._isAppLaunched()
            assert self.result == True
            
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=Refresh Devices list",0)):
                self.ExperitestClient.click("NATIVE", "accessibilityIdentifier=Refresh Devices list",0,1)
                time.sleep(self.delay*duration*2)
                self.result = True
            elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Refresh Devices list",0)):
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Refresh Devices list",0,1)
                time.sleep(self.delay*duration*2)
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('Raising the Warning as the element:"accessibilityLabel=Refresh Devices list" or "accessibilityIdentifier=Refresh Devices list" could not be found.')
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnRefreshButton() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clicktorefreshtheWeMoApp(self):
        """
        Clicking on the Refresh button on the Wemo App
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Refresh button on the WeMo App")        
            for i in range(1):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Refresh Devices list",0)):            
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Refresh Devices list",0)
                    time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnRefreshButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyRefreshButtonNotFoundWhenClickedOnEditButton(self):
        """
        Verify Refresh button not found on the Wemo App when clicked On the Edit Buttton
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Refresh button not found On the WeMo App when clicked on the Edit buttton")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if not(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Refresh Devices list",0)) and not(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Refresh button is seen though <Edit> button is clicked on the Device Discovery Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Refresh Devices list" is found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Refresh Devices list" is found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRefreshButtonNotFoundWhenClickedOnEditButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnCancelButtonForNotRecreatingTheDeviceList(self):
        """
        Click on the Cancel button when the Recreate Device List Pop Up appears
        """
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True
            
            popUpFound = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Cancel button when the Reload Device List? Pop Up appears")
            for i in range(3):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reload Device List?")):
                    self.result = True
                    popUpFound = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('The "Reload Device List?" Pop up did not appear.')
            
            if popUpFound == True:
                for i in range(5):
                    if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel",0,1)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnCancelButtonForNotRecreatingTheDeviceList() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifyWemoDeviceInDeviceListContainer(self,WemoFriendlyName,refresh=False):
        """
        Verify whether the Wemo Deivice is present in the Device List Container or not
        @param WemoFriendlyName: The Friendly Name of the Wemo Device
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)

            self._goToTheDevicesPage()
            assert self.result == True

            for i in range(5):
                self._handlePopUpOnWeMoApp()
                assert self.result == True

                if self.ExperitestClient.elementListVisible("", "text=%s"%WemoFriendlyName, 0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Devices is present on the screen:%s"%WemoFriendlyName)
                    break
                else:
                    self.ExperitestClient.swipe("DOWN", 100)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:%s could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:%s could not be found.'%WemoFriendlyName)

            for i in range(10):
                # self._handlePopUpOnWeMoApp()
                # assert self.result == True
                if not self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Devices is present on the screen:%s in Active state"%WemoFriendlyName)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Refreshing the device list before trying again")
                        self._clickOnRefreshButton()
                    # break
                    # self._clickOnRefreshButton()
                    # time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:%s could not be found in active state.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:%s could not be found in active state.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()



    def _getWeMoDeviceStateFromDevicesPage(self,WemoFriendlyName,refresh=True):
            """
            Return the wemo device state i.e. True: if active  and  False: if not detected(greyed out)
            @param WemoFriendlyName: The Friendly Name of the Wemo Device
            @type WemoFriendlyName: String
            """
            try:
                state = False
                self.exception_msg = None

                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Getting the state of WeMo Device: <%s>"%WemoFriendlyName)

                for i in range(2):
                    if self.ExperitestClient.elementListVisible("", "text=%s"%WemoFriendlyName, 0):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The Devices is present on the screen:%s"%WemoFriendlyName)
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

                for i in range(1):
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True

                    if self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60):
                        state = False
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The Device:%s is present on the screen and is in greyed out state"%WemoFriendlyName)
                    else:
                        state = True
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The Device:%s is present on the screen and is in Active state"%WemoFriendlyName)

                return state

            except:
                self._screenCapture()
                # self._getTheIOSDeviceLogs()
                # self._homeScreen()
                self.result = False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("The method _getWeMoDeviceStateFromDevicesPage() encountered and Error")
                    self.WeMoAppLog.LogException()


    #def _verifyWemoDeviceInDeviceListContainer(self,WemoFriendlyName,refresh=True):
    #    """
    #    Verify whether the Wemo Deivice is present in the Device List Container or not
    #    @param WemoFriendlyName: The Friendly Name of the Wemo Device
    #    @type WemoFriendlyName: String 
    #    """
    #    try:
    #        self.result = None
    #        self.exception_msg = None
    #        
    #        if self.WeMoAppLog is not None:
    #            self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
    #            
    #        if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIAPageIndicator']",0):
    #            if self.WeMoAppLog is not None:
    #                self.WeMoAppLog.Info("Seems like WeMo App Crashed so launching againhttps://global.gotomeeting.com/join/918901813")
    #
    #            self._launchWemoApp("WeMo")
    #            assert self.result == True
    #
    #        self._isAppLaunched()
    #        assert self.result == True 
    #        
    #        self._goToTheDevicesPage()
    #        assert self.result == True
    #        
    #        threshold_close_and_open = 8
    #        self.start_counter = 0
    #        SwipeDirection = None
    #        
    #        for i in range(20):
    #            self._handlePopUpOnWeMoApp()
    #            assert self.result == True             
    #            
    #            if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)):
    #                if ("0x444444" in self.ExperitestClient.getAllValues("NATIVE", "text=%s"%WemoFriendlyName, "textColor")):
    #                    if self.WeMoAppLog is not None:
    #                        self.WeMoAppLog.Info("Checking if the device is listed on the screen. If not pull the device to the visible area.")
    #                    heightOfDevice = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@text='%s']/ancestor::*[@class='UITableViewCellContentView']"%WemoFriendlyName, 0, "height"))
    #
    #                    if heightOfDevice > self.MaxHeightOfDevice:
    #                        if self.WeMoAppLog is not None:
    #                            self.WeMoAppLog.Info("The Device height is way too high. So it means the Drawer view is open for the device.")
    #                        self.result = True
    #                        break
    #                    else:
    #                        yCoordinateOfDevice = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@text='%s']/ancestor::*[@class='UITableViewCellContentView']"%WemoFriendlyName, 0, "y"))
    #                        yCoordinateOfDeviceTab = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@accessibilityLabel='Devices']", 0, "y"))
    #                        yCoordinateOfBanner = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@accessibilityIdentifier='DevicesView']", 0, "y"))
    #                        heightCoordinateOfBanner = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@accessibilityIdentifier='DevicesView']", 0, "height"))
    #                        HeightOfTileFromBanner = int(yCoordinateOfDevice) + int(heightOfDevice)
    #                        EndyCoordinateOfBanner = int(yCoordinateOfBanner) + int(heightCoordinateOfBanner)
    #                    
    #                        if HeightOfTileFromBanner > yCoordinateOfDeviceTab:
    #                            if self.WeMoAppLog is not None:
    #                                self.WeMoAppLog.Info("Pull the Device from Under the Footer of the WeMo App")
    #                            self.ExperitestClient.swipe2("Down",self.MaxHeightOfDevice,100)
    #                        elif EndyCoordinateOfBanner > yCoordinateOfDevice:
    #                            if self.WeMoAppLog is not None:
    #                                self.WeMoAppLog.Info("Pull the Device from Under the Header of the WeMo App")
    #                            self.ExperitestClient.swipe2("Up",self.MaxHeightOfDevice,100)
    #                        else:
    #                            if self.WeMoAppLog is not None:
    #                                self.WeMoAppLog.Info("Everything is intact now.")
    #                        self.result = True
    #                        break
    #                else:
    #                    if refresh == True:
    #                        self._clicktorefreshtheWeMoApp()
    #                        self.start_counter = self.start_counter + 1
    #                    time.sleep(self.delay)
    #            else:
    #                if refresh == True:
    #                    self._clicktorefreshtheWeMoApp()
    #                    assert self.result == True
    #                    
    #                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIAPageIndicator']",0):
    #                    self._launchWemoApp("WeMo")
    #                    assert self.result == True
    #                
    #                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityIdentifier,'shadow_bottom_iOS7.png') and @onScreen='true' and @y>=%d]"%self.BottomOffset,0):
    #                    SwipeDirection = "Up"
    #                    self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,300)
    #                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>%d]"%self.TopOffset,0):
    #                    SwipeDirection = "Down"
    #                    self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,300)                        
    #                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityIdentifier,'shadow_bottom.png') and  @onScreen='true'  and @y>%d]"%self.BottomOffset,0):
    #                    SwipeDirection = "Up"
    #                    self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,300)                      
    #                else:
    #                    if SwipeDirection == None:
    #                        SwipeDirection = "Down"
    #                    self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,300)
    #        else:
    #            self.exception_msg = "The WeMo Device %s is not listed on Device List Container"%WemoFriendlyName
    #            if self.WeMoAppLog is not None:
    #                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
    #            raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
    #    except:
    #        self._screenCapture()
    #        self._getTheIOSDeviceLogs()
    #        self._homeScreen()
    #        self.result = False
    #        if self.WeMoAppLog is not None:
    #            self.WeMoAppLog.Error("The method _verifyWemoDeviceInDeviceListContainer() encountered and Error")
    #            self.WeMoAppLog.LogException()
    #
    def _verifyNotDetectedWemoDeviceInDeviceListContainer(self,WemoFriendlyName,refresh=True):
        """
        Verify whether the Wemo Device is present in the Device List Container or not and it is Not Detected
        @param WemoFriendlyName: The Friendly Name of the Wemo Device
        @type WemoFriendlyName: String 
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
        
            self._handlePopUpOnWeMoApp()
            assert self.result == True
            
            self._isAppLaunched()
            assert self.result == True 
            
            for i in range(10):
                self._handlePopUpOnWeMoApp()
                assert self.result == True

                if self.ExperitestClient.elementListVisible("", "text=%s"%WemoFriendlyName, 0):
                    break
                else:
                    self.ExperitestClient.swipe("DOWN", 100)
                    self._clickOnRefreshButton()
                    time.sleep(self.delay*4)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            for i in range(5):
                self._handlePopUpOnWeMoApp()
                assert self.result == True

                if self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Device:%s is present on the screen and is in greyed out state"%WemoFriendlyName)
                    break
                else:
                    self._clickOnRefreshButton()
                    time.sleep(self.delay*4)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Device:%s is present on the screen and is in Active state"%WemoFriendlyName)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found in greyed state.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found in greyed state.'%WemoFriendlyName)
        except:
            self.exception_msg = "The Devices were either not seen or in not detected status was not seen."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyNotDetectedWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnNotDetectedWemoDeviceInDeviceListContainer(self,WemoFriendlyName,refresh=True):
        """
        Verify whether the Wemo Device is present in the Device List Container or not and it is Not Detected and click On It
        @param WemoFriendlyName: The Friendly Name of the Wemo Device
        @type WemoFriendlyName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not and it is Not Detected"%WemoFriendlyName)            
            
            self._isAppLaunched()
            assert self.result == True 

            self._verifyNotDetectedWemoDeviceInDeviceListContainer(WemoFriendlyName)
            assert self.result == True 
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)) and (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "text=%s"%WemoFriendlyName)
                    self.result = True
                    
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Hide This?"):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The pop up Hide This is visible now...")
                        break
                    elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This WeMo?") and self.ExperitestClient.isElementFound("NATIVE","text=The device won't appear until it becomes active again. Or report a problem and we will do our best to help.",0)):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The pop up Hide This is visible now...")
                        break
                time.sleep(self.delay)
                if refresh==True:
                    self._clickOnRefreshButton()
            else:
                self.exception_msg = "Failed to click on the WeMo with friendly name %s."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnNotDetectedWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyHideThisPopUpWhenClickedOnNotDetectedDevices(self):
        """
        Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices")            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This?")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=The device won't appear until it becomes active again")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This WeMo?") and self.ExperitestClient.isElementFound("NATIVE","text=The device won't appear until it becomes active again. Or report a problem and we will do our best to help.",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify 'Hide This?' pop up." 
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Hide This?" and "accessibilityLabel=The device won\'t appear until it becomes active again" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Hide This?" and "accessibilityLabel=The device won\'t appear until it becomes active again" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyHideThisPopUpWhenClickedOnNotDetectedDevices() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnCancelButtonOnHideThisPopUp(self):
        """
        Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices and click on Cancel
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices and click on Cancel")            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This?")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=The device won't appear until it becomes active again")):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel")
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This WeMo?") and self.ExperitestClient.isElementFound("NATIVE","text=The device won't appear until it becomes active again. Or report a problem and we will do our best to help.",0)):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to cancel the 'Hide This?' pop up"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Hide This?" and "accessibilityLabel=The device won\'t appear until it becomes active again" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Hide This?" and "accessibilityLabel=The device won\'t appear until it becomes active again" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnCancelButtonOnHideThisPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnHideButtonOnHideThisPopUp(self):
        """
        Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices and click on Hide
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Hide This? Pop Up when clicked on the Not Detected Devices and click on Hide")            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This?")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=The device won't appear until it becomes active again")):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Hide")
                    self.result = True
                    break
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hide This WeMo?") and self.ExperitestClient.isElementFound("NATIVE","text=The device won't appear until it becomes active again. Or report a problem and we will do our best to help.",0)):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Hide")  
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to click on <Hide> button on the 'Hide This?' pop up."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Hide This?" and "accessibilityLabel=The device won\'t appear until it becomes active again" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Hide This?" and "accessibilityLabel=The device won\'t appear until it becomes active again" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnHideButtonOnHideThisPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _checkForWeakSignal(self):
        """
        Check for the Weak Signal on the Wemo Device List Container Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for the Weak Signal on the Wemo Device List Container Page.")
            for i in range(2):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Weak Signal" ) == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=OK")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The Weak Signal Pop up did not appear. May be the Signal is good.Hooray!!!!..')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForWeakSignal() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyMotionSensed(self,WemoFriendlyName):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it's motion is sensed.
        @param WemoFriendlyName: The Wemo Firendly Name whose Motion is to be sensed 
        @type WemoFriendlyName: String
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the WeMo's:%s motion is sensed"%WemoFriendlyName)
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True            
            
            if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)) and (not self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60)):
                self.result = True
            else:
                self.exception_msg = "Failed to Identify/get the text from the tile of the WeMo device whose friendly name is %s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoFriendlyName.strip())
                raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoFriendlyName.strip())
            
            for i in range(3):
                WeMoMotionText = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='%s']/.."%WemoFriendlyName, 0, "NATIVE","Inside", 0, 0).strip()
                if (WeMoMotionText.find(WemoFriendlyName)!=-1) and ((WeMoMotionText.find("Motion")!=-1) or (WeMoMotionText.find("Motion sensed")!=-1) or (WeMoMotionText.find("Oooh, I sense motion!")!=-1)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the text Motion Sensed"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Motion" or text=Motion sensed" is not found')
                raise Exception('Raising the Exception as the element:"text=Motion" or text=Motion sensed" is not found')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyMotionSensed() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyNoMotionSensed(self,WemoFriendlyName):
        """
        Check whether the Wemo is present in the Deivce List Container and whether it's motion is not sensed.
        @param WemoFriendlyName: The Wemo Firendly Name whose Motion is not to be sensed 
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the WeMo's:%s motion is not sensed"%WemoFriendlyName)
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True            
            
            if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)) and (not self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60)):
                self.result = True
            else:
                self.exception_msg = "Failed to Identify the No Motion message."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoFriendlyName.strip())
                raise Exception('Raising the Exception as the element:"id=device_container" or "id=uuid:Sensor-1_0-%s" could not be found.'%WemoFriendlyName.strip())
            
            for i in range(3):
                WeMoMotionText = self.ExperitestClient.getTextIn2("NATIVE", "class=SensorTableCell", 0, "NATIVE","Inside", 0, 0).strip()
                if (WeMoMotionText.find(WemoFriendlyName)!=-1) and (WeMoMotionText.find("No motion")!=-1):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=No motion" is not found')
                raise Exception('Raising the Exception as the element:"text=Motion" is not found')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyMotionSensed() encountered and Error")
                self.WeMoAppLog.LogException()
    
    
    
    def _verifyWemoDeviceInRuleDetailsPage(self,ruleName,WemoFriendlyName):
        """
        Verify whether the Wemo Deivice is present in the Device List Container or not
        @param WemoFriendlyName: The Friendly Name of the Wemo Device
        @type WemoFriendlyName: String 
        """
        try:    
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Rule Details Page or not"%WemoFriendlyName)
                
            for i in range(15):
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s"%ruleName) == True:
                        time.sleep(self.delay)
                        break
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)

            for i in range(2):
                self._handlePopUpOnWeMoApp()
                assert self.result == True

                if self.ExperitestClient.elementListVisible("", "text=%s"%WemoFriendlyName, 0):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("The Devices is present on the screen:%s"%WemoFriendlyName)
                    break
                else:
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIAPageIndicator']",0):
                        if self.WeMoAppLog != None:
                            self.WeMoAppLog.Info("Seems like WeMo App Crashed so launching.")

                        self._launchWemoApp("WeMo")
                        assert self.result == True

                    self._isAppLaunched()
                    assert self.result == True 
                    
                    self._clickOnRulesTab()
                    assert self.result == True

                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

        except:
            # self.result = False
            # pass
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            # self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifyWemoDeviceInDeviceListContainer() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifySmartReachabilityMessageNoNetwork(self):
        try:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying the _verifySmartReachabilityMessage alert in WeMo")
            for i in range(5):
                self.result = True
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Connect to Wi-Fi so you can use WeMo.']"):
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
        except:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verifySmartReachabilityWeMoMessageNoConnectivity() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyTheDefaultWemoIcon(self,WemoFriendlyName,wemoDevice="Switch"):
        """
        Check whether the default Wemo Icon is present for the Wemo Device.
        @param WemoFriendlyName: The Wemo Firendly Name to be turned Off
        @type WemoFriendlyName: String
        @param wemoDevice: Switch Or Sensor
        @type wemoDevice: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned off"%WemoFriendlyName)
        yOffset=self.ExperitestClient.p2cy(20)
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True            

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the WeMo:%s is turned off"%WemoFriendlyName)
            yOffset=self.ExperitestClient.p2cy(20)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
                self._clicktorefreshtheWeMoApp()
                self.ExperitestClient.swipe2("Down",yOffset,100)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            
            if wemoDevice == "Switch":
                for i in range(10):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Left", "default", "DefaultWeMoSwitchIcon", 0, 0)):
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                    self.ExperitestClient.swipe2("Down",yOffset,100)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "DefaultWeMoSwitchIcon" could not be found'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=%s" and "DefaultWeMoSwitchIcon" could not be found.'%WemoFriendlyName)
                    
            elif wemoDevice == "Insight":
                for i in range(10):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Left", "default", "DefaultWeMoInsightIcon", 0, 0)):
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                    self.ExperitestClient.swipe2("Down",yOffset,100)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "DefaultWeMoSwitchIcon" could not be found'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=%s" and "DefaultWeMoSwitchIcon" could not be found.'%WemoFriendlyName)

            elif wemoDevice == "Maker":
                for i in range(10):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Left", "default", "DefaultWeMoMakerIcon", 0, 0)):
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                    self.ExperitestClient.swipe2("Down",yOffset,100)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "DefaultWeMoMakerIcon" could not be found'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=%s" and "DefaultWeMoMakerIcon" could not be found.'%WemoFriendlyName)
                    
            elif wemoDevice == "Light Switch":
                for i in range(10):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Left", "default", "DefaultWeMoLightSwitchIcon", 0, 0)):
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                    self.ExperitestClient.swipe2("Down",yOffset,100)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "DefaultWeMoLightSwitchIcon" could not be found'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=%s" and "DefaultWeMoLightSwitchIcon" could not be found.'%WemoFriendlyName)
                                
            elif  wemoDevice == "Motion":
                for i in range(10):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Left", "default", "DefaultWeMoSensorIcon", 0, 0)):
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                    self.ExperitestClient.swipe2("Down",yOffset,100)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "DefaultWeMoSensorIcon" could not be found.'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=%s" and "DefaultWeMoSensorIcon" could not be found.'%WemoFriendlyName)
                    
            elif  wemoDevice == "HeaterA":
                for i in range(10):
                    if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Left", "default", "DefaultWeMoHeaterIcon", 0, 0)):
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                    self.ExperitestClient.swipe2("Down",yOffset,100)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "DefaultWeMoHeaterIcon" could not be found.'%WemoFriendlyName)
                    raise Exception('Raising the Exception as the element:"text=%s" and "DefaultWeMoHeaterIcon" could not be found.'%WemoFriendlyName)
        except:
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheDefaultWemoIcon() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _goToTheDevicesPage(self):
        """
        Go to the Devices Page which containes the Device List Container
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Go to the Devices Page which contains the device list container")            
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Devices' and @top='true']")):
                    time.sleep(self.delay*4)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Devices' and @top='true']")
                    time.sleep(self.delay*4)
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
            else:
                self.exception_msg = "Failed to Identify/Click on Device Icon. Hence failed on Go To Devices."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Devices" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Devices" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _goToTheDevicesPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnMoreTab(self):
        """
        Click On the More Icon Tab on the Devices Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the More Icon Tab on the Device Page")
            
            # self._isAppLaunched()
            # assert self.result == True
                        
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=More")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=More")
                    self.result = True
                    self.ExperitestClient.waitForElement("NATIVE","xpath=//*[@text='Not Now']",0,15000)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Not Now']"):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Not Now']",0,1)
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on More Tab on the WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=More" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=More" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnMoreTab() encountered and Error")
                self.WeMoAppLog.LogException()
    ######################################################################################################################
       
    #############################
    #Remote Access Tab Functions#
    #############################
    def _clickOnConnectToNestTab(self):
        """
        Clicking on the Connect to nest
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Connect to nest Tab")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Connect to Nest")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Connect to Nest")
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to click on Connect to nest Tab in 'More' page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Connect to nest" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Connect to nest" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnConnectToNestTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnRemoteAccessTab(self):
        """
        Clicking on the Remote Access Tab
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Remote Access Tab")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Remote Access' and @top='true']")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Remote Access' and @top='true']")
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to click on Remote Access Tab in 'Settings And About' page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnRemoteAccessTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForRemoteAccessPopUpInTheRemoteAccessPage(self):
        """
        Check for the Remote Access Pop UP on the Remote Access Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Checking for the Remote Access Pop Up on the Remote Access Page of the Wemo App")
            for i in range(15):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access Enabled")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=You can now control your WeMo devices with this phone anywhere you have internet access.")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on <OK> button of Remote Access Enabled Pop up."
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('Raising the Warning as the element:"accessibilityLabel=Remote Access Enabled" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForRemoteAccessPopUpInTheRemoteAccessPage() encountered and Error")
                self.WeMoAppLog.LogException()
                   
    def _clickOnForgetAndDisableRemoteAccess(self):
        """
        Click on Forget And Disbale button on the Remote Access Page
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Forget And Disable button on the Remote Access Page.")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to launch the Remoate Access Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Forget and Disable")) == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Forget and Disable")
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Enable Remote Access")):
                         if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info('Remote access is already disabled')
                         break
            else:
                self.exception_msg = "Failed to Identify/Click 'Forget and Disable' button on Remote Access page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Forget and Disable" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Forget and Disable" could not be found.')
            self._handleTokenErrorPopUp()
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnForgetAndDisableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForRemoteAccessDisabled(self):
        """
        Check whether Remote Access is disabled or not
        """
        try:
            self.result = None
            self.exception_msg = None
            
            self.remoteAccessEnabled = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check whether Remote Access is disabled or not.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access")):
                    self.result = True
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to launch Remote Access page of WeMo app."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
            
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Forget and Disable")) == True:
                time.sleep(self.delay)
                self.remoteAccessEnabled = True
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Enable Remote Access")) == True and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Not Enabled")) == True:
                time.sleep(self.delay)
                self.remoteAccessEnabled = False
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.remoteAccessEnabled = None
            self.result = False
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.remoteAccessEnabled = None
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForRemoteAccessDisabled() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnEnableRemoteAccess(self):
        """
        Click on Enable Remote Access on the Remote Access Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Enable Remote Access button on the Remote Access Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to launch the Remote Access page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Enable Remote Access")) == True and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Not Enabled")) == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Enable Remote Access")
                    time.sleep(self.delay*50)
                    self.result = True
                    break            
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
            else:
                self.exception_msg = "Failed to Identify/Click <Enable Remote Access> button on WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Enable Remote Access" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Enable Remote Access" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access Enabled")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=You can now control your WeMo devices with this phone anywhere you have internet access.")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                    time.sleep(self.delay)
                    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access Enabled")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=You can now control your WeMo devices with this phone anywhere you have internet access.")):
                        self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                        self._handleTokenErrorPopUp()
                        self.result = True
                    else:
                        self._handleTokenErrorPopUp()
                        assert self.result == True
                    break
                else:
                    self._handleTokenErrorPopUp()
                    
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Sorry, we were unable to setup your remote access just now. To try later, go to More > Remote Access",0):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                    time.sleep(self.delay)
                    self._handleTokenErrorPopUp()
            else:
                self.exception_msg = "Failed to Enable Remote Access from the WeMo App. Please check the logs/screen captured for more details."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the Remote Access Could not be Enabled.')
                raise Exception('Raising the Exception as the Remote Access Could not be Enabled.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=OK")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:text=OK")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifySmartPhoneInRemoteAccessPage(self,smartPhone):
        """
        Verify the Smart Phone in the Remote Access Page
        @param smartPhone: The Smart Phone whose Remote Access has to be enabled
        @type smartPhone: String  
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Enable the Remote Access for the Smart Phone:%s in the Remote Access Page."%smartPhone)
        
            self.result = None            
            self.exception_msg = None
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Remote Access Page is not launched in WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%smartPhone)):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down", 500)
                time.sleep(self.delay)
            else:
                self.exception_msg = "Could not find the smart phone on the Remote Access Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%smartPhone)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%smartPhone)
        except:
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _diableRemoteAccessForSmartPhone() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _disableRemoteAccessForSmartPhone(self,smartPhone):
        """
        Disable the Remote Access for the Smart Phone in the Remote Access Page.
        @param smartPhone: The Smart Phone whose Remote Access has to be disabled
        @type smartPhone: String  
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Disable the Remote Access for the Smart Phone:%s in the Remote Access Page."%smartPhone)
        
            self.result = None   
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:       
                self.WeMoAppLog.Info("Disable the Remote Access for the Smart Phone:%s in the Remote Access Page."%smartPhone)            
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Remote Access page is not launched."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%smartPhone)):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down", 500) 
                time.sleep(self.delay)
            else:
                self.exception_msg = "Could not find the smartphone mentioned on the list of smart phones in Remote Access Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%smartPhone)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%smartPhone)

            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@text='%s']//*[@class='UISwitch']"%smartPhone, 0, "on") == False):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All Day sensing is already disabled.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "xpath=//*[@text='%s']//*[@class='UISwitch']"%smartPhone, 0, "on", "false")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All day sensing is disabled now..")
                    self.result = True
                    break                
        except:
            self.exception_msg = "Failed to Disable the Remote Access for the Smart device: %s"%smartPhone
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _disableRemoteAccessForSmartPhone() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _enableRemoteAccessForSmartPhone(self,smartPhone):
        """
        Enable the Remote Access for the Smart Phone in the Remote Access Page.
        @param smartPhone: The Smart Phone whose Remote Access has to be enabled
        @type smartPhone: String  
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Enable the Remote Access for the Smart Phone:%s in the Remote Access Page."%smartPhone)
        try:
            self.result = None            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remote Access")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Remote Access Page is not launched on WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remote Access" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%smartPhone)):
                    self.result = True
                    break
                self.ExperitestClient.swipe2("Down", 500)
                time.sleep(self.delay)
                
            else:
                self.exception_msg = "Could not find the smart Phone on the list of smartdevices listed on 'Remote Access' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%smartPhone)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%smartPhone)
            
            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@text='%s']//*[@class='UISwitch']"%smartPhone, 0, "on") == True):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All Day sensing is already enabled.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "xpath=//*[@text='%s']//*[@class='UISwitch']"%smartPhone, 0, "on", "true")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All day sensing is enabled now..")
                    self.result = True
                    break                
        except:
            self.exception_msg = "Failed to Enable the Remote Access for the Smart device: %s"%smartPhone
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _diableRemoteAccessForSmartPhone() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyRemoteAccessErrorPopup(self):
        """
        Verify the Remote Access Error Pop up.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Remote Access Error Pop up..")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Sorry, we were unable to setup your remote access just now. To try later, go to More > Remote Access",0):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the "class=UIAlertView" could not be found.')
                raise Exception('Raising the Exception as the "class=UIAlertView" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=OK")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "text=OK",0,1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Remote Access Error Pop up"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=OK" could not be found.')
                raise Exception('Raising the Exception as the element:"text=OK" could not be found.')
        except:
            self._screenCapture()            
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRemoteAccessErrorPopup() encountered and Error")
                self.WeMoAppLog.LogException()
    ##########################################################################################################
    
    ##################################
    #Settings And About Tab Functions#
    ##################################
    def _clickOnSettingsAndAboutTab(self):
        """
        Clicking on the Settings And About Tab
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Settings And About Tab")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Settings & About")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Settings and About Tab of WeMo App"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=Wemo_Navigation_Logo") == False):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to launch the 'Settings And About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
        except:
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSettingsAndAboutTab() encountered and Error")
                self.WeMoAppLog.LogException()
             
    def _clickOnTheLocationTab(self):
        """
        Clicking on the Location Tab in the Settings and About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Location tab on the Settings and About Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Location")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Location")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Location tab of WeMo App"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Location" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Location" could not be found.')
                
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=\"WeMo\" Would Like to Use Your Current Location")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Dont't Allow")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Ideentify/Click on <Don't Allow> button of WeMo App"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Don\'t Allow" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Dont\'Allow" could not be found.')                
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Search and select your WeMo's home city.")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the text which says Search and select your WeMo's home city."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Search and select your WeMo home city."could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Search and select your WeMo home city." could not be found.')
        except:
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheLocationTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnTheAppInfoTab(self):
        """
        Clicking on the Location Tab in the Settings and About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the App Info tab on the Settings and About Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=App Info")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on App Info tab of WeMo App"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheAppInfoTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnTheHardwareInfoTab(self):
        """
        Clicking on the Location Tab in the Settings and About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the App Info tab on the Settings and About Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hardware Info")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Hardware Info")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Hardware Info tab of WeMo App"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Hardware Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Hardware Info" could not be found.')

        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheHardwareInfoTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _enterTheLocationInLocationPage(self,locationName,locationState,locationCountry="IN"):
        """
        Entering the Location Name in the Location Page in the Settings and About Page
        @param locationName: The Location Name which is entered in the text box
        @type locationName: String.
        @param locationState: The Location State which is entered in the text box
        @type locationState: String.
        @param locationCountry: The Location Country which is entered in the text box
        @type locationCountry: String.        
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Entering the Location in the textbox in the Location Page.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Search and select your WeMo's home city.")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on the message Search and select your WeMo's home city."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Search and select your WeMo home city."could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Search and select your WeMo home city." could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UISearchBarTextField")):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("NATIVE", "class=UISearchBarTextField", 0, locationName)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Parse the value of Location details in to the Text field which has header Search and select your WeMo's home city."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISearchBarTextField" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UISearchBarTextField." could not be found.')
            
            UIKBKEY_COUNT = self.ExperitestClient.getElementCount("NATIVE", "class=UIKBKeyView")
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIKBKeyView",UIKBKEY_COUNT-1) == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "class=UIKBKeyView", UIKBKEY_COUNT-1, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to click on Join and close the Keyboard of WeMo App."
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The keypad Done button is not found.May be it did not appear.')
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s, %s (%s)"%(locationName,locationState,locationCountry))):
                    time.sleep(self.delay)
                    self.ExperitestClient.sync(2000, 0, 10000)
#                     self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s, %s (%s)"%(locationName,locationState,locationCountry), 0, True)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s, %s (%s)"%(locationName,locationState,locationCountry), 0, 1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select %s, %s (%s)"%(locationName,locationState,locationCountry)
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%locationName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s." could not be found.'%locationName)
            
        except:
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterTheLocationInLocationPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelTheChangesMadeOnLocationPage(self):
        """
        Clicking on the Cancel button to close the Location Page
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Cancel button to close the Location Page")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Search and select your WeMo's home city.")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the page with Header Search and Select Your WeMo home city - 'Location Access in Settings and About Page.'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Search and select your WeMo home city."could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Search and select your WeMo home city." could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Cancel button on Search and Select Your WeMo home city - 'Location Access in Settings and About Page.'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Location")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed go back to Settings and About Page after clicking on <Cancel> button on Location Settings page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About" or "accessibilityLabel=Location" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" or "accessibilityLabel=Location" could not be found.')
        except:
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelTheChangesMadeOnLocationPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyTheEmailAddress_SettingsAndAbout(self,emailAddress):
        """
        Verifying the Email Tab in the Settings And About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the Email Tab in the Settings And About Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Email")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Email" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Email" could not be found.')
            
            assert self.ExperitestClient.getTextIn2("NATIVE", "text=Email", 0, "NATIVE","Inside", 0, 0).split()[1].strip() == emailAddress
        except:
            self._screenCapture()        
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheEmailTab_SettingsAndAbout() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _clickOnTheEmailTab(self):
        """
        Clicking on the Email Tab in the Settings and About Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Email tab on the Settings and About Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Email")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Email")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Email" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Email" could not be found.')
        except:
            self._screenCapture()            
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheEmailTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _enterTheEmailInEmailPage(self,newEmailAddress=None):
        """
        Entering the Email Address in the Email Page in the Settings and About Page
        @param emailAddress: The Email Address which is entered in the text box
        @type emailAddress: String. Should be of the format test@*.com (*=gmail,yahoo etc)
        @param oldEmailAddress: The Old Email Address which is entered in the text box
        @type oldEmailAddress: String. Should be of the format test@*.com (*=gmail,yahoo etc)  
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Entering the Email Address:%s in the Email Page."%newEmailAddress)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "class=UITextField")):
                    time.sleep(self.delay)
                    if newEmailAddress!=None:
                        self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, newEmailAddress)
                        time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterTheEmailInEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForInvalidEmailPopUpInEmailPage(self):
        """
        Check for the Invalid Email Error Popup in the Email Page when an invalid email is there.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for the Invalid Email Error Popup in the Email Page when an invalid email is there.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Invalid Email")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=OK")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Invalid Email" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Invalid Email" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForInvalidEmailPopUpInEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _confirmTheChangesMadeOnEmailPage(self):
        """
        Click on the Save button to save the changes made on the Email Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Save button to save the changes made on the Email Page.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Save")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Save")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmTheChangesMadeOnEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _cancelTheChangesMadeOnEmailPage(self):
        """
        Click on the Cancel button to cancel the changes made on the Email Page.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes made on the Email Page.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelTheChangesMadeOnEmailPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    # def _verifyTheAppVersionFromSettingsAndAboutPage(self,appVersion):
    #     """
    #     Verify the App Version Tab from the Settings and About Page.
    #     """
    #     try:
    #         self.result = None
    #         self.exception_msg = None
    #         if self.WeMoAppLog is not None:
    #             self.WeMoAppLog.Info("Verify the App Version Tab from the Settings and About Page.")
    #
    #         self._isAppLaunched()
    #         assert self.result == True
    #
    #         for i in range(10):
    #             if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
    #                 self.result = True
    #                 break
    #             time.sleep(self.delay)
    #         else:
    #             self.exception_msg = "Failed to Identifty the 'Settings & About' page of WeMo App."
    #             if self.WeMoAppLog is not None:
    #                 self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
    #             raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
    #
    #         for i in range(10):
    #             if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Version")):
    #                 assert self.ExperitestClient.getTextIn2("NATIVE", "text=App Version", 0, "NATIVE","Inside", 0, 0).strip().find(appVersion)
    #                 self.result = True
    #                 break
    #             time.sleep(self.delay)
    #         else:
    #             self.exception_msg = "Failed to Identify the AppVersion Placeholder in 'Settings and About' Page."
    #             if self.WeMoAppLog is not None:
    #                 self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
    #             raise Exception('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
    #     except:
    #         self._screenCapture()
    #         self._getTheIOSDeviceLogs()
    #         if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
    #             time.sleep(self.delay)
    #             self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
    #             time.sleep(self.delay)
    #         if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
    #             time.sleep(self.delay)
    #             self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
    #             time.sleep(self.delay)
    #         self._homeScreen()
    #         self.result = False
    #         if self.WeMoAppLog is not None:
    #             self.WeMoAppLog.Error("The method _verifyTheAppVersionFromSettingsAndAboutPage() encountered and Error")
    #             self.WeMoAppLog.LogException()

    def _verifyTheAppVersionFromAppInfoPage(self,appVersion):
        """
        Verify the App Version Tab from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the App Version Tab from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'App Info' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Version")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='App Version']/..//*[@text='%s']"%appVersion, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the AppVersion section in 'App Info' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheAppVersionFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheSmartDeviceNameFromAppInfoPage(self,smartDeviceName):
        """
        Verify the Smart Device Name Tab from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Smart Device Name Tab from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'App Info' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Smart Device Name")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Smart Device Name']/..//*[@text='%s']"%smartDeviceName, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Smart Device Name section in 'App Info' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Smart Device Nsme" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Smart Device Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheSmartDeviceNameFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheSmartDeviceInfoFromAppInfoPage(self,smartDeviceName):
        """
        Verify the Smart Device Info Tab from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Smart Device Info Tab from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'App Info' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Smart Device Info")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Smart Device Info']/..//*[contains(@text,'%s')]"%smartDeviceName, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Smart Device Name section in 'App Info' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Smart Device Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Smart Device Info" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheSmartDeviceNameFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheUniqueDeviceIdentifierFromAppInfoPage(self,uniqueIdentifier):
        """
        Verify the Smart Device Name Tab from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Unique Device Identifier Tab from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'App Info' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Unique Device Identifier")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Unique Device Identifier']/..//*[@text='%s']"%uniqueIdentifier, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Smart Device Name section in 'App Info' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Unique Device Identifier" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Unique Device Identifier" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheUniqueDeviceIdentifierFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheHomeIdFromAppInfoPage(self,homeId):
        """
        Verify the Smart Device Name Tab from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Home ID Tab from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'App Info' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Home ID")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Home ID']/..//*[@text='%s']"%homeId, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Home ID section in 'App Info' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Home ID" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Home ID" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheHomeIdFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()
            
    # def _getTheAppVersionFromSettingsAndAboutPage(self):
    #     """
    #     Get the WeMo App Version from the Settings and About Page.
    #     """
    #     try:
    #         self.result = None
    #         self.exception_msg = None
    #         self.AppVersion = None
    #         if self.WeMoAppLog is not None:
    #             self.WeMoAppLog.Info("Get the WeMo App Version from the Settings and About Page.")
    #
    #         self._isAppLaunched()
    #         assert self.result == True
    #
    #         for i in range(10):
    #             if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
    #                 time.sleep(self.delay)
    #                 self.result = True
    #                 break
    #             time.sleep(self.delay)
    #         else:
    #             self.exception_msg = "Failed to Identify 'Settings & About' Header. "
    #             if self.WeMoAppLog is not None:
    #                 self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
    #             raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
    #
    #         for i in range(10):
    #             if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Version")):
    #                 time.sleep(self.delay)
    #                 self.AppVersion = self.ExperitestClient.getTextIn2("NATIVE", "text=App Version", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
    #                 print self.AppVersion
    #                 self.result = True
    #                 break
    #             time.sleep(self.delay)
    #         else:
    #             self.exception_msg = "Failed to get the text from 'App Version' placeholder in WeMo App - 'Settings & About' page"
    #             if self.WeMoAppLog is not None:
    #                 self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
    #             raise Exception('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
    #     except:
    #         self._screenCapture()
    #         self._getTheIOSDeviceLogs()
    #         if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
    #             time.sleep(self.delay)
    #             self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
    #             time.sleep(self.delay)
    #         if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
    #             time.sleep(self.delay)
    #             self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
    #             time.sleep(self.delay)
    #         self._homeScreen()
    #         self.result = False
    #         self.AppVersion = None
    #         if self.WeMoAppLog is not None:
    #             self.WeMoAppLog.Error("The method _getTheAppVersionFromSettingsAndAboutPage() encountered and Error")
    #             self.WeMoAppLog.LogException()

    def _getTheAppVersionFromAppInfoPage(self):
        """
        Get the WeMo App Version from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.AppVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo App Version from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'App Info' Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Version")):
                    time.sleep(self.delay)
                    self.AppVersion = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='App Version']]", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
                    print self.AppVersion
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'App Version' section in WeMo App - 'App Info' page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Version" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.AppVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheAppVersionFromSettingsAndAboutPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheSmartDeviceNameFromAppInfoPage(self):
        """
        Get the IOS smart device from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.AppVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the IOS smart device from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'App Info' Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Smart Device Name")):
                    time.sleep(self.delay)
                    self.SmartDeviceName = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Smart Device Name']]", 0, "NATIVE","Inside", 0, 0).split()[3:]
                    self.SmartDeviceName = ' '.join(self.SmartDeviceName)
                    print self.SmartDeviceName
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Smart Device Name' section in WeMo App - 'App Info' page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Smart Device Name" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Smart Device Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.SmartDeviceName = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheSmartDeviceNameFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheSmartDeviceInfoFromAppInfoPage(self):
        """
        Get the IOS smart device from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.AppVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the IOS smart device info from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'App Info' Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Smart Device Info")):
                    time.sleep(self.delay)
                    self.SmartDeviceInfo = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Smart Device Info']]", 0, "NATIVE","Inside", 0, 0).split()[3:]
                    self.SmartDeviceInfo = ' '.join(self.SmartDeviceInfo)
                    print self.SmartDeviceInfo
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Smart Device Info' section in WeMo App - 'App Info' page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Smart Device Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Smart Device Info" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.SmartDeviceInfo = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheSmartDeviceInfoFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheUniqueIdentifierFromAppInfoPage(self):
        """
        Get the IOS smart device from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.AppVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the IOS smart device info from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'App Info' Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Unique Device Identifier")):
                    time.sleep(self.delay)
                    self.uniqueIdentifier = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Unique Device Identifier']]", 0, "NATIVE","Inside", 0, 0).split()[3:]
                    self.uniqueIdentifier = ' '.join(self.uniqueIdentifier)
                    print self.uniqueIdentifier
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Smart Device Info' section in WeMo App - 'App Info' page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Unique Device Identifier" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Unique Device Identifier" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.uniqueIdentifier = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheUniqueIdentifierFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheHomeIdFromAppInfoPage(self):
        """
        Get the IOS smart device from the App Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.AppVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the Home ID from the App Info Page.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=App Info")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'App Info' Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=App Info"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=App Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Home ID")):
                    time.sleep(self.delay)
                    self.HomeId = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Home ID']]", 0, "NATIVE","Inside", 0, 0).split()[2]
                    # self.HomeId = ' '.join(self.HomeId)
                    print self.HomeId
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Home ID' section in WeMo App - 'App Info' page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Home ID" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Home ID" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.HomeId = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheHomeIdFromAppInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnTheFirmwareVersionsTab(self):
        """
        Clicking on the Firmware Versions Tab in the Settings and About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Firmware Version tab on the Settings and About Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Settings & About' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Versions")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Firmware Versions")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Firmware Versions' tab on 'Settings & About' page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Versions" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Versions" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Versions")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About") == False):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Firmware Versions' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Versions" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Versions" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheFirmwareVersionsTab() encountered and Error")
            self.WeMoAppLog.LogException()
    
    def _getTheFirmwareVersionOfTheWemo(self,WemoFriendlyName):
        """
        Getting the Firmware Version of the Wemo from the Firmware Versions Page of the Wemo App
        @param WemoFriendlyName: The Wemo Firendly Name whose Firmware to search for 
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            self.FirmwareVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the Firmware Version of the Wemo:%s."%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hardware Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page Header:'Hardware Info'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Hardware Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Hardware Info" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)):
                    self.FirmwareVersion = self.ExperitestClient.getTextIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "NATIVE","Inside", 0, 0).split("\n")[1].strip()
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,500)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the Firmware Version of the WeMo :%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
            
            print self.FirmwareVersion                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.FirmwareVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheFirmwareVersionOfTheWemo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _goToTheHardwareInfoPageOfTheWeMo(self,WemoFriendlyName):
        """
        Getting the Hardware Info of the Wemo from the Hardware Info Page of the Wemo App
        @param WemoFriendlyName: The Wemo Firendly Name whose Firmware to search for
        @type WemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            # self.FirmwareVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Go to the Hardware Info page of the Wemo:%s."%WemoFriendlyName)

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Hardware Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page Header:'Hardware Info'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Hardware Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Hardware Info" could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='%s']"%WemoFriendlyName)):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='%s']/../..//*[@class='UIButton']"%WemoFriendlyName, 0, 1)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,500)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to go to the Hardware Info page of the WeMo :%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            # print self.FirmwareVersion
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            # self.FirmwareVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _goToTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheFriendlyNameOfWeMoFromTheHardwareInfoPageOfTheWeMo(self,defaultText='WeMo_'):
        """
        Get the WeMo friendly name from the hardware  Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.DeviceName = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo friendly name from the Hardware Info Page")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'WeMo Friendly Name' from the Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Name']")):
                    time.sleep(self.delay)
                    self.DeviceName = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Name']]", 0, "NATIVE","Inside", 0, 0).split()[1].strip()
                    print self.DeviceName
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Name' section in WeMo App - 'Hardware Info' page of the WeMo"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Name" could not be found.')
                raise Exception('Raising the Exception as the element:"Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.DeviceName = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheFriendlyNameOfWeMoFromTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheProductTypeOfWeMoFromTheHardwareInfoPageOfTheWeMo(self,defaultText='WeMo_'):
        """
        Get the WeMo product name from the hardware  Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.ProductName = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo product name from the Hardware Info Page")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'WeMo Friendly Name' from the Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Product Type']")):
                    time.sleep(self.delay)
                    self.ProductName = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Product Type']]", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
                    print self.ProductName
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Product Type' section in WeMo App - 'Hardware Info' page of the WeMo"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Product Type" could not be found.')
                raise Exception('Raising the Exception as the element:"Product Type" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.ProductName = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheProductTypeOfWeMoFromTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheFirmwareVersionOfWeMoFromTheHardwareInfoPageOfTheWeMo(self,defaultText='WeMo_'):
        """
        Get the WeMo product name from the hardware  Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.FirmwareVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo firmware version from the Hardware Info Page")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'WeMo Friendly Name' from the Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Firmware Version']")):
                    time.sleep(self.delay)
                    self.FirmwareVersion = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Firmaware Version']]", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
                    print self.FirmwareVersion
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Firmware Version' section in WeMo App - 'Hardware Info' page of the WeMo"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Firmware Version" could not be found.')
                raise Exception('Raising the Exception as the element:"Firmware Version" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.FirmwareVersion = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheFirmwareVersionOfWeMoFromTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheMACAddressOfWeMoFromTheHardwareInfoPageOfTheWeMo(self,defaultText='WeMo_'):
        """
        Get the WeMo MAC Address from the hardware  Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.MACAddr = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo MAC Address from the Hardware Info Page")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'WeMo Friendly Name' from the Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='MAC Address']")):
                    time.sleep(self.delay)
                    self.MACAddr = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='MAC Address']]", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
                    print self.MACAddr
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'MAC Address' section in WeMo App - 'Hardware Info' page of the WeMo"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"MAC Address" could not be found.')
                raise Exception('Raising the Exception as the element:"MAC Address" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.MACAddr = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheMACAddressOfWeMoFromTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheIPAddressOfWeMoFromTheHardwareInfoPageOfTheWeMo(self,defaultText='WeMo_'):
        """
        Get the WeMo IP Address from the hardware  Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.MACAddr = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo IP Address from the Hardware Info Page")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'WeMo Friendly Name' from the Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='IP Address']")):
                    time.sleep(self.delay)
                    self.IPAddr = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='IP Address']]", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
                    print self.IPAddr
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'IP Address' section in WeMo App - 'Hardware Info' page of the WeMo"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"IP Address" could not be found.')
                raise Exception('Raising the Exception as the element:"IP Address" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.IPAddr = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheIPAddressOfWeMoFromTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _getTheSerialNumberOfWeMoFromTheHardwareInfoPageOfTheWeMo(self,defaultText='WeMo_'):
        """
        Get the WeMo Serial NUmber from the hardware  Info Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            self.SerialNumber = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the WeMo Serial Number from the Hardware Info Page")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'WeMo Friendly Name' from the Header. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Serial Number']")):
                    time.sleep(self.delay)
                    self.SerialNumber = self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@class='UITableViewCellContentView' and ./*[@text='Serial Number']]", 0, "NATIVE","Inside", 0, 0).split()[2].strip()
                    self.SerialNumber = (self.SerialNumber).split(':')
                    print self.SerialNumber[0]
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to get the text from 'Serial Number' section in WeMo App - 'Hardware Info' page of the WeMo"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Serial Number" could not be found.')
                raise Exception('Raising the Exception as the element:"Serial Number" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.SerialNumber = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheSerialNumberOfWeMoFromTheHardwareInfoPageOfTheWeMo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheFriendlyNameOfTheWeMoFromTheHardwareInfoPage(self,WeMoFriendlyName,defaultText='WeMo_'):
        """
        Verify the Name tab on from the Hardware Info Page of the WeMo.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Verify the Name tab on from the Hardware Info Page of the WeMo.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo Friendly Name in the Header of  Hardware Info page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMo Friendly Name could not be found.')
                raise Exception('Raising the Exception as the WeMo Friendly Name could not be found.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Name")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Name']/..//*[@text='%s']"%WeMoFriendlyName, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Name section in 'Hardware Info' Page of the WeMo."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Name" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheFriendlyNameOfTheWeMoFromTheHardwareInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheProductTypeOfTheWeMoFromTheHardwareInfoPage(self,WeMoProductType,defaultText='WeMo_'):
        """
        Verify the Product Type tab on from the Hardware Info Page of the WeMo.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Verify the Product Type tab on from the Hardware Info Page of the WeMo.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo Friendly Name in the Header of  Hardware Info page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as the WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Product Type")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Product Type']/..//*[@text='%s']"%WeMoProductType, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Product Type section in 'Hardware Info' Page of the WeMo."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Product Type" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Product Type" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheProductTypeOfTheWeMoFromTheHardwareInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheFirmwareVersionOfTheWeMoFromTheHardwareInfoPage(self,WeMoFirmwareVersion,defaultText='WeMo_'):
        """
        Verify the Firmware Version tab on from the Hardware Info Page of the WeMo.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Verify the Firmware Version tab on from the Hardware Info Page of the WeMo.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo Friendly Name in the Header of  Hardware Info page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as the WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Version")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Firmware Version']/..//*[@text='%s']"%WeMoFirmwareVersion, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Firmware Version section in 'Hardware Info' Page of the WeMo."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Version" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Version" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheFirmwareVersionOfTheWeMoFromTheHardwareInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheMACAddressOfTheWeMoFromTheHardwareInfoPage(self,WeMoMacAddress,defaultText='WeMo_'):
        """
        Verify the Mac Address tab on from the Hardware Info Page of the WeMo.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Verify the Mac Address tab on from the Hardware Info Page of the WeMo.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo Friendly Name in the Header of  Hardware Info page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as the WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=MAC Address")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='MAC Address']/..//*[@text='%s']"%WeMoMacAddress, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the MAC Address section in 'Hardware Info' Page of the WeMo."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=MAC Address" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=MAC Address" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheMACAddressOfTheWeMoFromTheHardwareInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheIpAddressOfTheWeMoFromTheHardwareInfoPage(self,WeMoIpAddress,defaultText='WeMo_'):
        """
        Verify the Ip Address tab on from the Hardware Info Page of the WeMo.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Verify the Ip Address tab on from the Hardware Info Page of the WeMo.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo Friendly Name in the Header of  Hardware Info page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as the WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=IP Address")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='IP Address']/..//*[@text='%s']"%WeMoIpAddress, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the IP Address section in 'Hardware Info' Page of the WeMo."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=IP Address" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=IP Address" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheIPAddressOfTheWeMoFromTheHardwareInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheSerialNumberOfTheWeMoFromTheHardwareInfoPage(self,WeMoSerialNumber,defaultText='WeMo_'):
        """
        Verify the Serial Number tab on from the Hardware Info Page of the WeMo.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Verify the Serial Number tab on from the Hardware Info Page of the WeMo.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s') and ./parent::*[contains(@accessibilityLabel,'%s')]]"%(defaultText,defaultText))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo Friendly Name in the Header of  Hardware Info page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WeMo Friendly Name could not be found in the header.')
                raise Exception('Raising the Exception as the WeMo Friendly Name could not be found in the header.')

            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Serial Number")):
                    assert self.ExperitestClient.getTextIn2("NATIVE", "xpath=//*[@text='Serial Number']/..//*[@text='%s']"%WeMoSerialNumber, 0, "NATIVE","Inside", 0, 0)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Serial Number section in 'Hardware Info' Page of the WeMo."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Serial Number" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Serial Number" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UILabel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=_UINavigationBarBackIndicatorView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheSerialNumberOfTheWeMoFromTheHardwareInfoPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnRememberWifiSettingsTab(self):
        """
        Clicking on the Remember Wi-Fi Settings Tab in the Settings and About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Remember Wi-Fi Settings tab on the Settings and About Page.")
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Settings & About' tab in WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Remember Wi-Fi Settings")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Remember Wi-Fi Settings")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Remember Wi-Fi Settings on 'Settings & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Remember Wi-Fi Settings" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Remember Wi-Fi Settings" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnRememberWifiSettingsTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _rememberWifiSettings(self):
        """
        Check the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is checked
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is checked.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Settings & About' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is allready checked.")
                self.result = True
            else:
                self.exception_msg = "Failed to Identify Remember Wi-Fi Settings/Check mark against the Remember Wi-Fi settings tab in 'Settings & About' page of WeMo App."
                assert self.ExperitestClient.isElementFound("NATIVE", "text=Remember Wi-Fi Settings") == True
                assert (self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)) == False
                self._clickOnRememberWifiSettingsTab()
                assert (self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)) == True
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _rememberWifiSettings() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _forgetWifiSettings(self):
        """
        UnCheck the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is unchecked
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("UnCheck the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is unchecked.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Settings & About' page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)==False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is allready un-checked.")
                self.result = True
                time.sleep(self.delay)
            else:
                assert self.ExperitestClient.isElementFound("NATIVE", "text=Remember Wi-Fi Settings") == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)==True
                self._clickOnRememberWifiSettingsTab()
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)==False
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _forgetWifiSettings() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyRememberWifiSettingsIsChecked(self):
        """
        Check the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is checked
        """
        try:
            self.result = None
            self.exception_msg = None
            self.rememberWifiSettingsChecked = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check the Remember Wi-Fi Settings Tab in the Settings and About Page.Make sure it is checked.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Settings & About' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "text=Remember Wi-Fi Settings", 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is checked.")
                self.rememberWifiSettingsChecked = True
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Remember Wi-Fi Settings Tab is unchecked.")
                self.rememberWifiSettingsChecked = False
                self.result = True
        except:
            self.exception_msg = "Failed to Identify the 'Remember Wi-Fi' option in 'Settings & About' page of WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.rememberWifiSettingsChecked = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRememberWifiSettingsIsChecked() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnTheLegalTab(self):
        """
        Clicking on the Legal Tab in the Settings and About Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Legal tab on the Settings and About Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Settings & About")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Settings & About' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Settings & About"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Settings & About" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Legal")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Legal")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
                self.ExperitestClient.swipe2("Down", 500)
            else:
                self.exception_msg = "Failed to Identify 'Legal' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Legal" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Legal" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTheLegalTab() encountered and Error")
                self.WeMoAppLog.LogException()
    ##########################################################################################################
    
    ###########################
    #Help Center Tab Functions#
    ###########################
    def _clickOnHelpCenterTab(self):
        """
        Clicking on the Help Center Tab on the Devices List Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Help Center Tab on the Device List Page.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Help Center")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Help Center")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Help Center' tab of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:""accessibilityLabel=Help Center""could not be found.')
                raise Exception('Raising the Exception as the element:""accessibilityLabel=Help Center"" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Help Center") == True) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=Wemo_Navigation_Logo") == False):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Help Center" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Help Center" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnHelpCenterTab() encountered and Error")
                self.WeMoAppLog.LogException()
    ###########################################################################################
    
    ###################################
    #Tell Us What You Think! Functions#
    ###################################
    def _clickOnTellUsWhatYouThinkTab(self):
        """
        Clicking on the Tell Us What You Think! Tab on the Devices List Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Tell Us What You Think! Tab on the Device List Page.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Tell Us What You Think!")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Tell Us What You Think!")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Tell Us What you Think!' on 'Settings & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Tell Us What You Think!" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Tell Us What You Think!" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTellUsWhatYouThinkTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnRateWemo(self):
        """
        Clicking on the Rate Wemo on the Tell Us What You Think Page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Rate Wemo on the Tell Us What You Think Page.")
            self.result = None
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "class=UIActionSheet")) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Tell Us What You Think!")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Pop up / Identify 'Tell Us What You Think!' background text in 'Settings & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Tell Us What You Think!" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Tell Us What You Think!" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel= Rate WeMo")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel= Rate WeMo")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Rate WeMo in 'Rate Us' pop up seen on 'Settings & About' Pop up in WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Rate WeMo" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Rate WeMo" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnRateWemo() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnReportAProblemTab(self):
        """
        Clicking on the Report A Problem on the Tell Us What You Think Page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Report A Problem on the Tell Us What You Think Page.")
    
            self.result = None
            self.ExperitestClient.swipe2("Down",400,500)
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Report a Problem")): 
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Report a Problem")
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",400,500)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Report a Problem' in pop up seen as a result of clicking on 'Tell Us What you Think!' seen on 'Settings  & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Report a Problem" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Report a Problem" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnReportAProblemTab() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clearTextOnReportAProblemPage(self, element):
        '''
        :param element: possible values are: Name, email and Phone number
        :return:
        '''
        textBoxes = self.ExperitestClient.getAllValues("NATIVE", "xpath=//*[@class='UITextFieldLabel']", 'y')

        if element.lower()=="Name".lower():
            self.ExperitestClient.click("NATIVE", "xpath=//*[@class='UITextFieldLabel' and @y='%s']"%textBoxes[0])
        elif element.lower()=="Email".lower():
            self.ExperitestClient.click("NATIVE", "xpath=//*[@class='UITextFieldLabel' and @y='%s']"%textBoxes[1])
        elif element.lower()=="Phone".lower():
            self.ExperitestClient.click("NATIVE", "xpath=//*[@class='UITextFieldLabel' and @y='%s']"%textBoxes[2])
        self._clearText()
        if element.lower()=="Comment".lower():
            self.ExperitestClient.click("NATIVE", "xpath=//*[@class='UITextView']")
            for i in range(6): # as length of defect string is 6
                self._sendText("{BKSP}")

    def _scrollUpTheScreen(self,offset=400, time=500):
        self.ExperitestClient.swipe2("Up",offset,time)

    def _scrollDownTheScreen(self,offset=400, time=500):
        self.ExperitestClient.swipe2("Down",offset,time)

    def _clickOnSupportArticles(self):
        """
        Clicking on the Support Articles on the Tell Us What You Think Page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Support Articles on the Tell Us What You Think Page.")
    
            self.result = None
            self.ExperitestClient.swipe2("Down",400,500)
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Support Articles")): 
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Support Articles")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",400,500)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Support Articles' More Page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Support Articles" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Support Articles" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSupportArticles() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _clickOnWeMoCommunity(self):
        """
        Clicking on the WeMo Community on the Tell Us What You Think Page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the WeMo Community on the More Page.")
    
            self.result = None
            self.ExperitestClient.swipe2("Down",400,500)
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=WeMo Community")): 
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=WeMo Community")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",400,500)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'WeMo Communiuty' in More Page of WeMo App"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=WeMo Community" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=WeMo Community" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSupportArticles() encountered and Error")
                self.WeMoAppLog.LogException()

            
    def _VerifyEmailContentofEmailtoSupportCenter(self,WeMoFriendlyName,WeMoFriendlyNameFirmwareVersion):
        """
        Check for the details on the Email drafted for Support center
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for the details on the Email drafted for Support center")
            self.result = None
            if (self.ExperitestClient.swipeWhileNotFound("Down", 200, "TEXT", WeMoFriendlyName, 1000, 3, False)): 
                if (self.ExperitestClient.isFoundIn("TEXT", WeMoFriendlyName, 0, "Up", "TEXT", WeMoFriendlyNameFirmwareVersion, 0, 0)): 
                    self.result = True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the TEXT:"%s" could not be found.'%WeMoFriendlyNameFirmwareVersion)
                    raise Exception('Raising the Exception as the element:"%s" could not be found.'%WeMoFriendlyNameFirmwareVersion)
            elif (self.ExperitestClient.swipeWhileNotFound("Up", 200, "TEXT", WeMoFriendlyName, 1000, 3, False)):
                if (self.ExperitestClient.isFoundIn("TEXT", WeMoFriendlyName, 0, "Up", "TEXT", WeMoFriendlyNameFirmwareVersion, 0, 0)):
                    self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the TEXT:"%s" could not be found.'%WeMoFriendlyName)
                raise Exception('Raising the Exception as the element:"%s" could not be found.'%WeMoFriendlyName)
        except:
            self.exception_msg = "Failed to Verify Email Content of 'Report a Problem' to Customer Support. Eithter Name is not matching or seen or Firmware pertaining to device is not matching with the Friendly Name of the Device."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Delete Draft") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE","accessibilityLabel=Delete Draft", 0, 1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _VerifyEmailContentofEmailtoSupportCenter() encountered and Error")
                self.WeMoAppLog.LogException()                
                               
    def _checkTheSmartPhoneDetailsReported(self,iOS_Version,Appversion):
        """
        Check for the details of Mobile app and iOS version
        """            
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for the details of Mobile app and iOS version")
            self.result = None
            if (self.ExperitestClient.swipeWhileNotFound("Down", 200, "TEXT", "iOS version:", 1000, 5, False)):
                if (self.ExperitestClient.isFoundIn("TEXT", "iOS version:", 0, "Right", "TEXT", iOS_Version, 0, 0)):
                    self.result = True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the TEXT:"iOS version:%s" could not be found.')
                    raise Exception('Raising the Exception as the element:"iOS version:%s" could not be found.')    
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the TEXT:"iOS version" could not be found.'%iOS_Version)
                raise Exception('Raising the Exception as the element:"iOS version" could not be found.'%iOS_Version) 
                
            if (self.ExperitestClient.swipeWhileNotFound("Down", 200, "TEXT", "WeMo App Version:", 1000, 5, False)):
                if (self.ExperitestClient.isFoundIn("TEXT", "WeMo App Version:", 0, "Right", "TEXT", Appversion, 0, 0)):
                    self.result = True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the TEXT:"WeMo App Version:%s" could not be found.'%Appversion)
                    raise Exception('Raising the Exception as the element:"WeMo App Version:%s" could not be found.'%Appversion)    
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the TEXT:"WeMo App Version" could not be found.')
                raise Exception('Raising the Exception as the element:"WeMo App Version" could not be found.')               
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Delete Draft") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE","accessibilityLabel=Delete Draft", 0, 1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkTheSmartPhoneDetailsReported() encountered and Error")
                self.WeMoAppLog.LogException()                      
    
    def _checkForErrorPopupWhenClickedOnReportAProblemInTellUsWhatYouThinkPage(self):
        """
        Check for the error pop up when clicked on Report A Problem Button in Tell Us What You Think
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check for the error pop up when clicked on Report A Problem Button in Tell Us What You Think")
            self.result = None
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=The device cannot send e-mail")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Check for the message when the e-mail is not configured failed. (Report a Problem in Settings & About Page.)"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=The device cannot send e-mail" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=The device cannot send e-mail" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=OK")): 
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=OK")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on OK to close the Pop up 'email is not configured.'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=OK" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=OK" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForErrorPopupWhenClickedOnReportAProblemInTellUsWhatYouThinkPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnNotRightNowTab(self):
        """
        Clicking on the Not Right Now tab on the Tell Us What You Think Page
        """
        try:
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Not Right Now tab on the Tell Us What You Think Page.")
            self.result = None
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Tell Us What You Think!")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'Tell Us What You Think!' in 'Settings & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Tell Us What You Think!" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Tell Us What You Think!" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Not Right Now")): 
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Not Right Now")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Not Right Now' in the pop up shown when 'Tell Us What You Think!' is clicked on 'Settings & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Not Right Now" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Not Right Now" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnNotRightNowTab() encountered and Error")
                self.WeMoAppLog.LogException()
    ###########################################################################################
    
    ##################################
    #Set Up Another Device  Functions#
    ##################################
    def _clickOnSetUpAnotherDeviceTab(self):
        """
        Clicking on the Set Up Another Device Tab on the Devices List Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Set Up Another Device Tab on the Devices List Page.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Set Up Another Device")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Set Up Another Device")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
                self.ExperitestClient.swipe2("Down", 500)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Set Up Another Device' tab on 'Settings & About' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Set Up Another Device"could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Set Up Another Device" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSetUpAnotherDeviceTab() encountered and Error")
                self.WeMoAppLog.LogException()
    ##########################################################################################
    
    ###########################
    #Edit Device Tab Functions#
    ###########################
    def _clickOnEditDeviceTab(self):
        """
        Clicking on the Edit Device Tab on the Devices List Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Edit Device Tab on the Devices List Page.")
            
            self._isAppLaunched()
            assert self.result == True 
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Edit")
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityIdentifier='settings-gear']")):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityIdentifier='settings-gear']")
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Edit Devices']")):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Edit Devices']")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Edit' option in 'Device Discovery' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                raise Exception('Raissing the Exception as the element:"accessibilityLabel=Edit" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEditDeviceTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _goToTheEditDevicePageOfWemo(self,WemoFriendlyName,refresh=False):
        """
        Check whether the Wemo is present in the Deivce List Container and then go to it's Edit Device Page.
        @param WemoFriendlyName: The Wemo Firendly Name whose Edit Device Page to go to
        @type WemoFriendlyName: String
        """
        # if self.WeMoAppLog is not None:
        #     self.WeMoAppLog.Info("Check whether the Wemo:%s is present in the Deivce List Container and then go to it's Edit Device Page"%WemoFriendlyName)
        try:
            self.result = None
            # self.exception_msg = None
            # if self.WeMoAppLog is not None:
            #     self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)
            #
            # self._isAppLaunched()
            # assert self.result == True
            #
            # self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName,False)
            # assert self.result == True
            #
            # for i in range(10):
            #     if(self.ExperitestClient.isElementFound("NATIVE", "text=%s"%WemoFriendlyName)):
            #         self.result = True
            #         break
            #     time.sleep(self.delay)
            #     if refresh==True:
            #         self._clickOnRefreshButton()
            # else:
            #     self.exception_msg = "Failed to Identify the WeMo :%s on 'Device Discovery Page of WeMo App'"%WeMoFriendlyName
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            #     raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%WemoFriendlyName)
            
            for i in range(10):
                # if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s']/../..//*[@accessibilityIdentifier='ic_arrow_green.png']"%WemoFriendlyName,0)):
                #     time.sleep(self.delay)
                #     self.ExperitestClient.click("NATIVE", "xpath=//*[@text='%s']/../..//*[@accessibilityIdentifier='ic_arrow_green.png']"%WemoFriendlyName, 0, 1)
                #     time.sleep(self.delay)
                #     self.result = True
                #     break

                if not self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "TEXT", "Not Detected", 0, 60):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("the Wemo Device:%s is present in active state, clicking on it to go to its edit page"%WemoFriendlyName)
                    self.ExperitestClient.click("NATIVE", "text=%s"%WemoFriendlyName, 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                # time.sleep(1)
            else:
                # self.exception_msg = "Failed to Identify 'text=%s'."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s"'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s"'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _goToTheEditDevicePageOfWemo() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _editTheNameOfWemo(self,WemoSmartPhoneSSIDName,WemoFriendlyName,NewWemoFriendlyName):
        """
        Enter the new Firendly Name for the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name 
        @type WemoFriendlyName: String
        @param NewWemoFriendlyName: The Wemo Firendly Name 
        @type NewWemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Edit the name of Wemo:%s and give it a new name:%s whose Smart Phone SSID is:%s."%(WemoFriendlyName,NewWemoFriendlyName,WemoSmartPhoneSSIDName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'Edit' page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
            
            for i in range(10):
                if((self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Device ID: %s"%WemoSmartPhoneSSIDName))):
                    self.result = True
                    break
                elif((self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Reset Options']"))):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the SSID:%s in the 'Edit' Page of WeMo App"%WemoSmartPhoneSSIDName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Device ID: %s" could not be found.'%WemoSmartPhoneSSIDName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Device ID: %s" could not be found.'%WemoSmartPhoneSSIDName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Friendly Name:%s on 'Edit' page of WeMo App"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "class=UITextFieldLabel",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@class='UITextFieldLabel']", 0, 1)
                    self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, NewWemoFriendlyName)
                    self.ExperitestClient.closeKeyboard()
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Change the text from old friendly name:%s to new friendly name:%s in the 'Edit' page of WeMo App."%(WemoFriendlyName,NewWemoFriendlyName)
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Name" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _editTheNameOfWemo() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _editTheNameOfWemo_RemoteAccess(self,WemoFriendlyName,NewWemoFriendlyName):
        """
        Enter the new Firendly Name for the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name 
        @type WemoFriendlyName: String
        @param NewWemoFriendlyName: The Wemo Firendly Name 
        @type NewWemoFriendlyName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Edit the name of Wemo:%s and give it a new name:%s."%(WemoFriendlyName,NewWemoFriendlyName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Edit' Page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify Friendly Name on 'Edit' page WeMo App:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Name",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Name", 0, 1)
                    self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, NewWemoFriendlyName)
                    self.ExperitestClient.closeKeyboard()
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Name placeholder on 'Edit' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Name" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Name" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _editTheNameOfWemo() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _confirmChangesOnEditDevicePage(self):
        """
        Click on the Save button to confirm the changes on the Edit Device Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Edit Device Page")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Save")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Save")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click <Save> button on WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesOnEditDevicePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelChangesOnEditDevicePage(self):
        """
        Click on the Cancel button to cancel the changes on Edit Device Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes on Edit Device Page")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on <Cancel> button of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelChangesOnEditDevicePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnResetOptionsTab(self,WemoSmartPhoneSSIDName,WemoFriendlyName):
        """
        Click on the Reset Option Tab on the Edit Device Page of the Wemo
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Reset Option Tab of the Wemo:%s whose Smart Phone SSID is:%s."%(WemoFriendlyName,WemoSmartPhoneSSIDName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Edit' page header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=Reset Options") or self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Device ID: %s"%WemoSmartPhoneSSIDName) or self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=WeMo ID: %s"%WemoSmartPhoneSSIDName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify %s on 'Edit' page of WeMo App."%WemoSmartPhoneSSIDName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Device ID: %s" could not be found.'%WemoSmartPhoneSSIDName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Device ID: %s" could not be found.'%WemoSmartPhoneSSIDName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify %s on 'Edit' page of WeMo App."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Options")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Reset Options")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify <Reset Options> tab on 'Edit' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset Options" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset Options" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnResetOptionsTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnResetOptionsTab_RemoteAccess(self,WemoFriendlyName):
        """
        Click on the Reset Option Tab on the Edit Device Page of the Wemo
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Reset Option Tab of the Wemo:%s."%(WemoFriendlyName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Edit' page header of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the %s on 'Edit' page of WeMo App."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Options")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Reset Options")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on <Reset Options> button on the 'Edit' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnResetOptionsTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnResetNamesRulesDataTab(self):
        """
        Click on theClear Name, Icons and Rules Tab on the Reset Device Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Clear Name, Icons and Rules Tab on the Reset Device Page")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Device")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify <Reset Device> Tab on 'Edit' Page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset Device" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset Device" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Name, Rules & Data")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Reset Name, Rules & Data")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on <Reset Name, Rules & Data> button on 'Reset Device' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset Name, Rules & Data" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset Name, Rules & Data" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnResetNamesRulesDataTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelChangesForResettingNameRulesAndData(self):
        """
        Verify the Clear Name, Icon & Rules Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Clear Name, Icon & Rules Pop Up and Cancel the Changes")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Clear the device's name, icon, rules and data?")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Clear the device's name, icon, rules and data' option on the 'Edit ---> Reset' Option of WeMo App. "
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s name, icon, rules and data?" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s name, icon, rules and data?" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Click on Cancel to cancel the changes on 'Reset Option' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelChangesForResettingNameRulesAndData() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _confirmChangesForResettingNameRulesAndData(self):
        """
        Verify the Clear Name, Icon & Rules Pop Up and Confirm the Changes
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Clear Name, Icon & Rules Pop Up and Confirm the Changes")          
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Clear the device's name, icon, rules and data?")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify Clear the device's name, icon, rules and data? on 'Reset Option' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s name, icon, rules and data?" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s name, icon, rules and data?" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Yes", 0, 3)
                    time.sleep(self.delay)
                    if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                        self._getTheIOSDeviceLogs("CheckingYesClicked")
                        self.ExperitestClient.click("NATIVE", "accessibilityLabel=Yes", 0, 3)
                        self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Yes' options on 'Reset Options' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesForResettingNameRulesAndData() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnEraseAllContentsAndSettingsTab(self):
        """
        Clicking on the Erase All Contents and Settings Tab on the Reset Device Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Erase All Contents and Settings Tab on the Reset Device Page")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Device")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify Reset Device Option in 'Edit' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset Device" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset Device" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Erase All Content and Settings")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Erase All Content and Settings")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Erase All Contern and Settings' on 'Edit' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Erase All Content and Settings" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Erase All Content and Settings" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEraseAllContentsAndSettingsTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelChangesForEraseAllContentsAndSetting(self):
        """
        Verify the Erase All Content And Settings Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Erase All Content And Settings Pop Up and Cancel the Changes")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Clear all settings and restore your device to factory defaults?")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on cancel in Cancel Pop up shown up when clicked on 'Erase All Content And Settings' tab."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Clear all settings and restore your device to factory defaults?" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Clear all settings and restore your device to factory defaults?" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on cancel in Cancel Pop up shown up when clicked on 'Erase All Content And Settings' tab."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelChangesForEraseAllContentsAndSetting() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _confirmChangesForEraseAllContentsAndSetting(self):
        """
        Verify the Erase All Content And Settings Pop Up and Confirm the Changes
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Erase All Content And Settings Pop Up and Confirm the Changes")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Clear all settings and restore your device to factory defaults?")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Confirm All changes to restore to factory defaults."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Clear all settings and restore your device to factory defaults?" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Clear all settings and restore your device to factory defaults?" could not be found.')
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Yes", 0, 3)
                    time.sleep(self.delay)
                    if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                        self._getTheIOSDeviceLogs("CheckingYesClicked")
                        self.ExperitestClient.click("NATIVE", "accessibilityLabel=Yes", 0, 3)
                        self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Yes and Confirm changes to 'Erase All Contents And Settings'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesForEraseAllContentsAndSetting() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnResetWiFiSettingsTab(self):
        """
        Clicking on the Reset WiFi Settings Tab on the Reset Device Page
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Reset WiFi Settings Tab on the Reset Device Page")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Device")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'Reset Device' Page Header"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset Device" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset Device" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Reset Wi-Fi settings")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Reset Wi-Fi settings")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on 'Reset Wi-Fi settings' tab on 'Reset Device' page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Reset Wi-Fi settings" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Reset Wi-Fi settings" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnResetWiFiSettingsTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelChangesForResetWiFiSetting(self):
        """
        Verify the Reset WiFi Settings Pop Up and Cancel the Changes
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Reset WiFi Settings Pop Up and Cancel the Changes")
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Clear the device's Wi-Fi settings?\n(You will need to set it up again.)")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Cancel the device's Wi-Fi settings while resetting the Wi-Fi settings on 'Reset Device' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s Wi-Fi settings?\n(You will need to set it up again.)" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s Wi-Fi settings?\n(You will need to set it up again.)" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelChangesForResetWiFiSetting() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _confirmChangesForResetWiFiSetting(self):
        """
        Verify the Reset WiFi Settings Pop Up and Confirm the Changes
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Reset WiFi Settings Pop Up and Confirm the Changes")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'Clear the device')]")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Faled to Identify Clear the device's Wi-Fi settings on Reset Device Tab of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s Wi-Fi settings?\n(You will need to set it up again.)" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Clear the device\'s Wi-Fi settings?\n(You will need to set it up again.)" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Yes")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Yes to confirm the 'Reset Wi-Fi settings' option in 'Reset Device' page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:class=UINavigationItemButtonView")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesForResetWiFiSetting() encountered and Error")
                self.WeMoAppLog.LogException()
    #######################################################################################################################
    
    #####################
    #Rules Tab Functions#
    #####################

    def _handlePushNotification(self,notification_msg):
        try:
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='_UIAlertControllerShadowedScrollView']//*[@text='%s']"%notification_msg):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Dismiss']")
                    time.sleep(self.delay)
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error('Push notification seen and handled.')
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error('Raising the Exception as the push notification didnt come.')
                raise Exception('Raising the Exception as the push notification didnt come.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _handlePushNotification() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyRulesTabOnDeviceDiscoveryPage(self):
        """
        Verify the Rules Tab in Device Discovery Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Rules Tab on Device Discovery Page.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self.VerifyRulesTab = False
            
            if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rules",0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Rules Tab is present on the Device Container List.")
                self.VerifyRulesTab = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Rules Tab is not present on the Device Container List.")
                self.VerifyRulesTab = False
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRulesTabOnDeviceDiscoveryPage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnRulesTab(self):
        """
        Clicking on the Rules Tab to go to the Rules Page
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on Rules Tab to go to the Rules Page.")
            
            self._isAppLaunched()
            assert self.result == True    

            self._handlePopUpOnWeMoApp()
            assert self.result == True               
            
            for i in range(2):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Rules")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Rules")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to move to 'Rules main page' even after clicking on Rules Tab of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Rules" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Rules" could not be found.')
                
            for i in range(2):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CONTROL A DEVICE",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now.")
                    self.result = True
                    break                         
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'ENABLED RULES')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                    self.result = True
                    break                         
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'DISABLED RULES')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                    self.result = True
                    break                                                 
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'Info')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                    self.result = True
                    break                                                                     
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rules tab loading is in progress..")
                    time.sleep(self.delay*500)
            else:
                self.exception_msg = "Failed to Launch Rules Page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Rules tab took more than a minute to load which is not ideal")
                    self.WeMoAppLog.Error('The Rules tab took more than a minute to load which is not ideal')
                raise Exception('The Rules tab took more than a minute to load which is not ideal')                 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            # self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnRulesTab() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _deleteOldRulesFromRulesPage(self):
        """
        Clicking if a Rule is Displayed as Disabled.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True     
            
            # self.ExperitestClient.swipe2("Up", 500, 500)
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CONTROL A DEVICE",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("There are no active rules")
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=  ENABLED RULES",0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=  DISABLED RULES",0)):
                    self.ExperitestClient.clickIn2("NATIVE","xpath=//*[contains(@accessibilityLabel,'ABLED RULES')]",0,"DOWN","NATIVE","xpath=//*[@class='UITableViewCellContentView']")
                    
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Info",0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Summary",0):
                        #yOffset = self.ExperitestClient.p2cy(50)
                        #self.ExperitestClient.swipeWhileNotFound("Down", yOffset, "NATIVE", "accessibilityLabel=Delete Rule", 1000, 5, True)
                        self.ExperitestClient.swipe2("Down", 500, 0)
                        # self.ExperitestClient.swipe2("Down", 500, 0)
                        # time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@accessibilityLabel,'Delete')]//*[contains(@text,'Delete')]",0)
                        time.sleep(self.delay*8)
                    for i in range(20):
                        if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CONTROL A DEVICE",0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The Rule is Deleted now.")
                            self.result = True
                            time.sleep(self.delay)
                            break                         
                        elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'ENABLED RULES')]",0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                            self.result = True
                            time.sleep(self.delay)
                            break                         
                        elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'DISABLED RULES')]",0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The Rule is Deleted now and we see Disabled Rules")
                            self.result = True
                            time.sleep(self.delay)
                            break                
                        elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'Info')]",0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The Rule is Deleted now and we see Disabled Rules")
                            self.result = True
                            time.sleep(self.delay)
                            break                                            
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The Rule is not Deleted. Deletion in Progress.")
                            time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The Deletion/Saving process took a while. More than 1 minute which is not ideal")
                            self.WeMoAppLog.Error('The Deletion/Saving process took a while. More than 1 minute which is not ideal')
                        raise Exception('The Deletion/Saving process took a while. More than 1 minute which is not ideal')                                              
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("There are no active rules")
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("There are no active rules. Deleted 10 rules on the slot.")
            self.result = True
        except:
            self.exception_msg = "Failed while deleting the old Rules on WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _deleteOldRulesFromRulesPage() encountered and Error")
                self.WeMoAppLog.LogException()        

    def _verifyRuleisDisabled(self, RuleName):
        """
        Clicking if a Rule is Displayed as Disabled.
        """
        try:
            self.result = None
            self.exception_msg = None

            self._isAppLaunched()
            assert self.result == True
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify a Rule is Disabled.")
            for i in range(2):
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='%s']/.."%RuleName, 0, "Inside", "NATIVE","accessibilityLabel=Disabled" ,0,0)):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']/..//*[@text='Disabled']"%RuleName,0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The Rule %s is not disabled."%RuleName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%RuleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%RuleName)
        except:
            self._screenCapture()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyaRuleisDisabled() encountered and Error")
                self.WeMoAppLog.LogException()        

    def _verifyRuleisEnabled(self, RuleName):
        """
        Clicking if a Rule is Displayed as Disabled.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify a Rule is Enabled.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(2):
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='%s']/.."%RuleName, 0, "Inside", "NATIVE","accessibilityLabel=Disabled" ,0,0)) == False:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "The Rule %s is not Enabled."%RuleName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%RuleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%RuleName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRuleisEnabled() encountered and Error")
                self.WeMoAppLog.LogException()        
            
    def _verifyByTimeSunriseSunset_TimerRule(self):
        """
        Verify the By Time, sunrise/sunset to create a Timer Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the By Time, sunrise/sunset to create a Timer Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=By time, sunrise/sunset")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=By time, sunrise/sunset")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to Simple Timer/Sunrise-Sunset Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=By time, sunrise/sunset" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=By time, sunrise/sunset" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyByTimeSunriseSunset_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyAuto_Off_TimerRule(self):
        """
        Verify the By Time, sunrise/sunset to create a Timer Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the With Auto-off Timer to create a Auto off Timer Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=With Auto-off Timer")):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=With Auto-off Timer")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to Auto-Off Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=With Auto-off Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=With Auto-off Timer" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyAuto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifyWithMotion_SensorRule(self):
        """
        Verifying the With Motion to create a Sensor Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the With Motion to create a Sensor Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@text='AUTOMATE']",0,"UP","NATIVE","xpath=//*[@text='With Motion']")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to Motion Sensor Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[@text="With Motion"]" could not be found.')
                raise Exception('Raising the Exception as the element:"xpath=//*[@text="With Motion"]" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWithMotion_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyWithNest_HomeAwayRule(self):
        """
        Verifying the With Nest Home Away Rule
        """
        try:
            self.result = None
            self.exception_msg = None

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the With Nest Home Away Rule.")

            self._isAppLaunched()
            assert self.result == True

            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityIdentifier='ic_nest_rules']",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to With Nest Home Away Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityIdentifier=ic_nest_rules.png" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityIdentifier=ic_nest_rules.png" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWithNestHomeAwayRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyWithMotion_NotificationRule(self):
        """
        Verifying the With Motion to create a Notification Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the With Motion to create a Sensor Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@text='GET NOTIFIED']",0,"DOWN","NATIVE","xpath=//*[@text='With Motion']")):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("DOWN",200,1000)
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to Motion Notification Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[@text="With Motion"]" could not be found.')
                raise Exception('Raising the Exception as the element:"xpath=//*[@text="With Motion"]" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyWithMotion_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyAwayModeRule(self):
        """
        Verifying the Away Mode Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the Away Mode Rule.")
            self._verifyAndClickOnAddIconOnRulesPage()
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode",0)):
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Icon pertaining to Away Mode Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _verifyTheRandomnessofAwayModeRule(self,WemoFriendlyName,time_to_monitor):
        """
        Verify the Randomeness of the Away Mode Rule
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the Randomness of Away Mode Rule.")
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            Number_of_Iterations = time_to_monitor/10

            if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is ON"%WemoFriendlyName,0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is STANDBY"%WemoFriendlyName,0):
                ExistingState = "ON"
            else:
                ExistingState = "OFF"
            if self.WeMoAppLog is not None:    
                self.WeMoAppLog.Info("ExistingState",ExistingState)
                self.WeMoAppLog.Info("Number_of_Iterations",Number_of_Iterations)
            for i in range(Number_of_Iterations):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Time Elapsed on wait .. %s seconds"%(i*10))
                if (self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is ON"%WemoFriendlyName,0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is STANDBY"%WemoFriendlyName,0) )and ExistingState == "OFF":
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("OFF to ON-The Rule has toggled the device states")
                    break                        
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is OFF"%WemoFriendlyName,0) and ExistingState == "ON":
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("ON to OFF-The Rule has toggled the device states")
                    break    
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule did not toggle states.") 
                time.sleep(self.delay)
             
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheRandomnessofAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
##############################NEW
    def _verifyTheRandomnessofAwayModeRule(self,time_to_monitor,**kwargs):
            """
            Verify the Randomeness of the Away Mode Rule
            **kwargs =list of WemoFriendlyName of devices 
            """
            try:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Verifying the Randomness of Away Mode Rule using List of devices")
                self.result = None
                
                self._isAppLaunched()
                assert self.result == True            
                
                Number_of_Iterations = time_to_monitor/14
                                
                                
                if kwargs is not None:
                    for key, value in kwargs.iteritems():
                        device_list = value
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("%s == %s" %(key,value))
                            self.WeMoAppLog.Info("LIST :%s" %(device_list))                              
                else: 
                    self.WeMoAppLog.Info("Empty List of devices passed !! Exit method ")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception -Empty List of devices passed !!')
                    raise Exception('Raising the Exception -Empty List of devices passed !!')
                
                ExistingState=[]
                Toggled=False
                
                d=len(device_list)
                Number_of_Iterations=Number_of_Iterations/d
                
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Number_of_Iterations",Number_of_Iterations)    

                
                
                for i in range(len(device_list)):
                    device =device_list[i]
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("##################### Get existing State : DEVICE %s ####################"%(device)) 
                    if (self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is ON"%device,0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is STANDBY"%device,0)):
                        ExistingState.append("ON")
                    else:
                        ExistingState.append("OFF")
                    if self.WeMoAppLog is not None:    
                        self.WeMoAppLog.Info("ExistingState %s :%s"%(device,ExistingState[i]))
                                        
                for k in range(Number_of_Iterations):
                    #time.sleep(self.delay)
                    #print("##############  ITERATION %s :Total Time Elapsed on wait .. %s seconds#######"%(k+1,(k+1)*10))
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("##############  ITERATION %s :Total Time Elapsed on wait is.. %s seconds#######"%(k+1,(k+1)*d*14))
                    for j in range(len(device_list)):
                        device = device_list[j] 
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("############# DEVICE under test %s ###########"%(device))
                        if (ExistingState[j] == "OFF" and self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is ON"%device,0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is STANDBY"%device,0) ):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("%s:OFF to ON-The Rule has toggled the device states"%device)
                            Toggled=True
                        elif ExistingState[j] == "ON" and self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s is OFF"%device,0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("%s:ON to OFF-The Rule has toggled the device states"%device)
                            Toggled=True
                        else:
                            #self.WeMoAppLog.Info("####Add Toggled state to list")
                            Toggled=False
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The %s did not toggle states."%device)
                    if (Toggled):
                        break
                    self.result = True
            except Exception,e:
                print "Exception",e
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)

                self._screenCapture()
                self._getTheIOSDeviceLogs()
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                    time.sleep(self.delay)
                self._homeScreen()
                self.result = False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("The method _verifyTheRandomnessofAwayModeRule() encountered and Error")
                    self.WeMoAppLog.LogException()

###############################NEW              
            
    def _clickOnByTimeSunriseSunset_TimerRule(self):
        """
        Clicking on the By Time, sunrise/sunset to create a Timer Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the By Time, sunrise/sunset to create a Timer Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=By time, sunrise/sunset")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=By time, sunrise/sunset")
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=By time, sunrise/sunset")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=By time, sunrise/sunset")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify/click on the Icon pertaining to Simple Timer/Sunrise-Sunset Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=By time, sunrise/sunset" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=By time, sunrise/sunset" could not be found.')
                
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The timer page is launched now...")
                    break
                else:
                    time.sleep(self.delay)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnByTimeSunriseSunset_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnAuto_Off_TimerRule(self):
        """
        Clicking on the Auto Off timer rule to create a the Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Auto Off timer rule to create a Timer Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=With Auto-off Timer")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=With Auto-off Timer")
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=With Auto-off Timer")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=With Auto-off Timer")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify/click on the Icon pertaining to Auto Off Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=With Auto-off Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=With Auto-off Timer" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnAutoOff_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWithMotion_SensorRule(self):
        """
        Clicking on the With Motion to create a Sensor Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the With Motion to create a Sensor Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@accessibilityLabel='AUTOMATE']",0,"UP","NATIVE","xpath=//*[@accessibilityLabel='With Motion']")):
                    self.ExperitestClient.clickIn("NATIVE","xpath=//*[@accessibilityLabel='AUTOMATE']",0,"UP","xpath=//*[@accessibilityLabel='With Motion']")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify/click on the Icon pertaining to Simple Timer/Sunrise-Sunset Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[@accessibilityLabel="With Motion"]" could not be found.')
                raise Exception('Raising the Exception as the element:"xpath=//*[@accessibilityLabel="With Motion"]" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWithMotion_SensorRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnNest_HomeAwayRule(self):
        """
        Clicking on the With Nest Home Away Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the With Nest Home Away Rule.")

            self._isAppLaunched()
            assert self.result == True

            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='With Nest Home / Away']",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@text='With Nest Home / Away']",0,1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify/click on the Icon pertaining to Simple Timer/Sunrise-Sunset Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityIdentifier=With Nest Home / Away" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityIdentifier=With Nest Home / Away" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnNest_HomeAwayRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWithMotion_NotificationRule(self):
        """
        Clicking on the With Motion to create a Notification Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the With Motion to create a Notification Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            self.ExperitestClient.swipe2("Down", 500, 0)
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                self.ExperitestClient.swipe2("Down", 500, 0)
                if (self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@accessibilityLabel='GET NOTIFIED']",0,"DOWN","NATIVE","xpath=//*[@accessibilityLabel='With Motion']")):
                    time.sleep(self.delay)
                    self.ExperitestClient.clickIn2("NATIVE","xpath=//*[@accessibilityLabel='GET NOTIFIED']",0,"DOWN","NATIVE","xpath=//*[@accessibilityLabel='With Motion']")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify/click on the Icon pertaining to Insight Notification Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[@accessibilityLabel="With Motion"]" could not be found.')
                raise Exception('Raising the Exception as the element:"xpath=//*[@accessibilityLabel="With Motion"]" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWithMotion_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnAwayModeRule(self):
        """
        Clicking on the By Away Mode to create a Away Mode Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the By Away Mode to create a Away Mode Rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            self._verifyAndClickOnAddIconOnRulesPage()
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Away Mode")
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Away Mode")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify/click on the Icon pertaining to Away Mode Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnAwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _selectTheWeMoToCreateTheRule_TimerRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Timer Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True              
            
            # for i in range(10):
            #     if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)):
            #         time.sleep(self.delay)
            #         self.result = True
            #         break
            #     else:
            #         if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
            #             SwipeDirection = "Up"
            #             self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
            #         elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
            #             SwipeDirection = "Down"
            #             self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
            #         else:
            #             SwipeDirection = "Up"
            #             self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
            #         time.sleep(self.delay)
            # else:
            #     self.exception_msg = "Failed to Identify the Header : New Timer Rule/Edit Timer Rule/Timer Rule."
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" or "accessibilityLabel=Timer Rule" could not be found.')
            #     raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" or "accessibilityLabel=Timer Rule" could not be found.')
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    yCoordinateOfDeviceTab = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, "y")
                    print yCoordinateOfDeviceTab
                    CenterofScreen = int(self.ExperitestClient.p2cy(50))
                
                    if  int(yCoordinateOfDeviceTab[0])  > CenterofScreen:
                        self.ExperitestClient.swipe2("Down",750)
                        
                   
                    self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%WemoFriendlyName, 0, True)
                    self.result = True
                    break
                else:
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
                        SwipeDirection = "Down"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    else:
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a simple timer rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateTheRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _selectTheWeMoToCreateTheRule_Auto_Off_Timer(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Auto Off Rule"%WemoFriendlyName)       
                
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Auto-off Timer",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Auto-off Timer",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header Auto-off Timer"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Edit Auto-off Timer or "Auto-off Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"Edit Auto-off Timer or "Auto-off Timer" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementListVisible("", "accessibilityLabel=%s"%WemoFriendlyName, 0)
                    yCoordinateOfDeviceTab = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, "y")
                    print yCoordinateOfDeviceTab
                    CenterofScreen = int(self.ExperitestClient.p2cy(50))
        
                    if  int(yCoordinateOfDeviceTab[0])  > CenterofScreen:
                        self.ExperitestClient.swipe2("Down",750)					
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, 1)
                    time.sleep(self.delay)
                
                    if(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                        self.result = True
                        break
                else:
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
                        SwipeDirection = "Down"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    else:
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Auto Off Timer."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateTheRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()                

    def _unselectTheWeMoToCreateTheRule_Auto_Off_Timer(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Un-Select the WeMo:%s on which the Rule is to be applied for the Auto Off Rule"%WemoFriendlyName)       
                
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Auto-off Timer",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Auto-off Timer",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page header 'Auto-off Timer'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Edit Auto-off Timer or "Auto-off Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"Edit Auto-off Timer or "Auto-off Timer" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    yCoordinateOfDeviceTab = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, "y")
                    print yCoordinateOfDeviceTab
                    CenterofScreen = int(self.ExperitestClient.p2cy(50))
        
                    if  int(yCoordinateOfDeviceTab[0])  > CenterofScreen:
                        self.ExperitestClient.swipe2("Down",750)					
                    time.sleep(self.delay)
                else:
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
                        SwipeDirection = "Down"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    else:
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Unselect the WeMo:%s to create a Auto Off Timer."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheWeMoToCreateTheRule_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException() 
                
    def _selectTheWeMoToCreateTheRule_MotionRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Motion Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Motion Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header 'New Motion Rule' or 'Motion Rule'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" or "accessibilityLabel=Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" or "accessibilityLabel=Motion Rule" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.elementListVisible("", "accessibilityLabel=%s"%WemoFriendlyName, 0):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, 1)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('The devices are not present in the selected list.')
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Motion Sensor Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateTheRule_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _selectTheWeMoToCreateNest_HomeAwayRule(self,WemoFriendlyName):
        """
        Select the WeMo on which the Rule is to be applied for the Nest Rule
        @param WemoFriendlyName: The Wemo Friendly Name of the WeMo
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the Motion Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Nest Home/Away Rule' and @class='UILabel']",0)) or (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Nest Home/Away']",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header 'Nest Home/Away' or 'Nest Home/Away Rule'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Nest Home/Away Rule" or "accessibilityLabel=Nest Home/Away Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Nest Home/Away Rule" or "accessibilityLabel=Nest Home/Away Rule" could not be found.')

            for i in range(10):
                if self.ExperitestClient.elementListVisible("", "accessibilityLabel=%s"%WemoFriendlyName, 0):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, 1)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('The devices are not present in the selected list.')
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Nest Home/Away Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheWeMoToCreateNest_HomeAwayRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _selectTheNestDevice_NestRule(self,WemoFriendlyName,NestDeviceState):
        """
        Select the Nest Device in the Select Nest device Page for the Nest Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("The Nest device to be selected is:%s"%WemoFriendlyName)
        try:
            self.result = None
            self. exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Nest Rule Page"%WemoFriendlyName)

            self._isAppLaunched()
            assert self.result == True

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Nest Home/Away Rule' and @class='UILabel']",0)) or (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Nest Home/Away']",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page Header Nest Home/Away Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Nest Home/Away Rule" or "accessibilityLabel=Nest Home/Away Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Nest Home/Away Rule" or "accessibilityLabel=Nest Home/Away Rule" could not be found.')

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Nest Home/Away Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            if not (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, 1)
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, "Down", "NATIVE", "accessibilityLabel=%s"%NestDeviceState, 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, "Inside", "NATIVE", "xpath=//*[@accessibilityLabel='%s']"%NestDeviceState, 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'%s')]"%WemoFriendlyName, 0, "Inside", "NATIVE", "xpath=//*[@accessibilityLabel='%s']"%NestDeviceState, 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Nest device:%s is already selected for the Rule to apply"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheNestDevice_NestRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheMotionInMotionRulePage_MotionRule(self,WemoFriendlyName):
        """
        Select the Sensor in the Select Sensor Page for the Motion Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("The Sensor to be selected is:%s"%WemoFriendlyName)
        try:
            self.result = None
            self. exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Motion Rule Page"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identifty the Page Header New Motion Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" or "accessibilityLabel=Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" or "accessibilityLabel=Motion Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Motion Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%WemoFriendlyName, 0, True)
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "accessibilityLabel=Motion", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready selected for the Rule to apply"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheMotionInMotionRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheMotionInNotificationRulePage_NotificationRule(self,WemoFriendlyName):
        """
        Select the Sensor in the Notification Rule Page for the Notification Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the Sensor::%s in the Notification Rule Page for the Notification Rule."%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Motion Rule Page"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header New Notification Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" or "accessibilityLabel=Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" or "accessibilityLabel=Notification Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Motion Notification Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%WemoFriendlyName, 0, True)
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "accessibilityLabel=Motion", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready selected for the Rule to apply"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheMotionInNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheWeMo_AwayModeRule(self,WemoFriendlyName):
        """
        Select the WeMo for the Away Mode Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            
            self.WeMoAppLog.Info("Select the WeMo:%s on which the Rule is to be applied for the away Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True     
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode",0)):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header Away Mode Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='%s']//*[@accessibilityIdentifier='ic_checkmark_green.png']"%WemoFriendlyName,0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('Device:%s is already selected'%WemoFriendlyName)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('Selecting the device:%s'%WemoFriendlyName)
                        self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)
                        time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the WeMo:%s to create a Away Mode Rule."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheWeMo_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _selectAuto_Off_TimerIntervel(self,Timer):
        """
        Select the time intervel after which the auto off timer should turn off the device.
        @param TimerIntervel: The action for the WeMo. Actions:on until time, on and off
        @type TimerIntervel: String
        """
        TimerIntervel = ["1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr","custom"]
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the time intervel for which the Switch has to be on then Off")
        try:
            if Timer.strip() not in TimerIntervel:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right timer intervel for the WeMo.Valid values are "1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr","custom"')
                raise Exception('Please give the right timer intervel for the WeMo.Valid values are "1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr","custom"')
            
            self.result = None
            self.exception_msg = None
            self.ExperitestClient.swipe2("Down",500)
            xOffset = self.ExperitestClient.getAllValues("NATIVE", "text=%s"%Timer, "x")
            
            if Timer.strip() in ["1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr"]:
                for i in range(5):
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']/..//*[contains(@accessibilityIdentifier,'btn_radio_off.png') and @x=%s]"%(Timer,xOffset[0]),0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='%s']/..//*[contains(@accessibilityIdentifier,'btn_radio_off.png') and @x=%s]"%(Timer,xOffset[0]),0,1)
                    else:
                        time.sleep(self.delay)
                        if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']/..//*[contains(@accessibilityIdentifier,'btn_radio_on.png') and @x=%s]"%(Timer,xOffset[0]),0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The time intervel %s is selected now"%Timer)
                            self.result = True
                            break                    
                else:
                    self.exception_msg = "Failed to select the timer in Auto Off Timer Rule."%Timer
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Unable to set the time.')
                    raise Exception('Unable to set the time.')
                    
            else:
                xOffset = self.ExperitestClient.getAllValues("NATIVE", "text=1 hr", "x")
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Set",0):
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=Set",0,1)
                    self.result = True
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Custom']/..//*[@class='UIButton' and @x>%d]"%xOffset[0],0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Custom']/..//*[@class='UIButton' and @x > %d]"%xOffset[0],0,1)
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectAuto_Off_TimerIntervel() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _clickOnOk_ToDisableTheOverlappingAuto_Off_Rule(self):
        """
            Click on OK to Disable the Auto Off rule to avoid rule conflict.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on ok to accept the Auto Off Rule for overlapping rule.")            

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Conflict",0):
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to click on Ok to disable the overlapping Autof Off Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Unable to find the Rule Conflict Pop up')
                raise Exception('Unable to find the Rule Conflict Pop up')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnOk_ToDisableTheOverlappingAuto_Off_Rule() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _clickOnOk_ToDisableTheConflicting_Rule(self):
        """
            Click on OK to Disable the rule to avoid rule conflict.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when one count down rule conflicts another count down rule.")
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Conflict",0):
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on Rule Conflict Pop up shown while overlapping two Auto Off Timer Rules."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Unable to find the Rule Conflict Pop up')
                raise Exception('Unable to find the Rule Conflict Pop up')                  
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnOk_ToDisableTheConflicting_Rule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnOk_OnRuleDuplicationPopUp(self):
            """
                Click on OK to rule duplication popup
            """
            try:
                self.result = None
                self.exception_msg = None
                
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Click on OK to close the Pop up which shows up when one count down rule conflicts another count down rule.")
                    
                for i in range(5):
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Duplication",0):
                        self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                        self.result = True
                        break
                    else:
                        time.sleep(self.delay)
                else:
                    self.exception_msg = "Failed to Identify/Click on Rule  Pop up shown ."
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Unable to find the Rule Conflict Pop up')
                    raise Exception('Unable to find the Rule Conflict Pop up')                  
            except:
                self._screenCapture()
                self._getTheIOSDeviceLogs()
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                    time.sleep(self.delay)
                self._homeScreen()
                self.result = False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("The method _clickOnOk_OnRuleDuplicationPopUp() encountered and Error")
                    self.WeMoAppLog.LogException()

    def _clickOnSuspendingTheExistingCountDownRule(self):
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on OK to suspend the existing Count down rule when Timer Rule becomes active.")  

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Existing Auto Off Timer rules will be suspended and disabled.",0):
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to close the pop up which says to suspend the count down timer rule when overlapped over the same timing for a Simple Timer Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Unable to find the Pop up which says the existing rule will be suspended')
                raise Exception('Unable to find the Pop up which says the existing rule will be suspended')                    
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSuspendingTheExistingCountDownRule() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _clickOnOkToDisableExistingCoundDownRule(self):
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on OK to suspend the existing Count down rule when Timer Rule becomes active.")  

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Existing Auto Off Timer rules will be suspended and disabled.']/../../..//*[@text='OK']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Existing Auto Off Timer rules will be suspended and disabled.']/../../..//*[@text='OK']",0,1)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to close the pop up which says to suspend the count down timer rule when overlapped over the same timing for a Simple Timer Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Unable to find the Pop up which says the existing rule will be suspended')
                raise Exception('Unable to find the Pop up which says the existing rule will be suspended')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnOkToDisableExistingCoundDownRule() encountered and Error")
                self.WeMoAppLog.LogException()

        
        
    def _setTheCustomTimer_Auto_Off_Timer(self,hours,minutes):
        """
        Set the custom timer in  the Auto Off timer Rule
        @param hours: The hour to be set for custom timer 
        @type hours: String
        @param minutes: Minutes to ber set for custom timer
        @type minutes: String
        """
        try:
            self.result = None 
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the custome timer hours and minutes in WeMo App for Auto timer rule.")
                
            if int(hours) > 24:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Hour Range Exceeded. Please Enter a value between 0 and 24')
                raise Exception('Hour Range Exceeded. Please Enter a value between 0 and 24')

            if int(minutes) > 59:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Minutes Range Exceeded. Please Enter a value between 0 and 60')
                raise Exception('Minutes Range Exceeded. Please Enter a value between 0 and 60')
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Set']",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Clicking on custom button")
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Set']")
                        time.sleep(self.delay)
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('custom button is not found')
                raise Exception('custom button is not found')

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CUSTOM TIMER",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Custom Timer is present now.")
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Custom Timer is not found')
                raise Exception('Custom Timer is not found')

            if self.ExperitestClient.isElementFound("NATIVE","class=UIPickerView",0):
                self.ExperitestClient.runNativeAPICall("NATIVE", "xpath=//*[@class='UIPickerView']", 0, "invokeMethod:'{\"selector\":\"selectRow:inColumn:animated:\",\"arguments\":[\"%s\", \"0\", \"true\"]}'"%hours)                            
                self.ExperitestClient.runNativeAPICall("NATIVE", "xpath=//*[@class='UIPickerView']", 0, "invokeMethod:'{\"selector\":\"selectRow:inColumn:animated:\",\"arguments\":[\"%s\", \"2\", \"true\"]}'"%minutes)

                self.result = True
        except:
            self.exception_msg = "Failed to set the custom count down timing on the Custom Timer Option of Count Down/Auto Off Timer Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheCustomTimer_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifyTheCustomButtonMessage_Auto_Off_Timer(self,hour,minutes):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param hour: The Wemo Firendly Name of the WeMo 
        @type hour: String
        @param minutes: The action for the WeMo. Actions:on until time, on and off
        @type minutes: String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if int(hour) > 24:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Hour Range Exceeded. Please Enter a value between 0 and 24')
                raise Exception('Hour Range Exceeded. Please Enter a value between 0 and 24')
    
            if int(minutes) > 59:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Minutes Range Exceeded. Please Enter a value between 0 and 60')
                raise Exception('Minutes Range Exceeded. Please Enter a value between 0 and 60')   
    
            Check_the_Hour = "%sh %sm"%(int(hour),int(minutes))
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Auto-off Timer",0):
                    if self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=custom", 0, "Down", "NATIVE", "accessibilityLabel=%s"%Check_the_Hour, 0, 0):
                        self.result = True
    
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Set the custome timer hours and minutes in WeMo App for Auto timer rule.")  
    
                    break
                else:
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the Custom button value for count down. The button should hold the value:%s"%Check_the_Hour
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Minutes Range Exceeded. Please Enter a value between 0 and 60')
                raise Exception('Minutes Range Exceeded. Please Enter a value between 0 and 60')
                self.result = False
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheCustomButtonMessage_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()               
    
    def _clickOnSave_ToSaveCustomTimer(self):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        try:
            self.result = None 
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on save to save the custom timer.")        
            
            if(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=CUSTOM TIMER", 0, "Right", "NATIVE", "accessibilityLabel=Save", 0, 0)):
                self.ExperitestClient.clickIn3("NATIVE", "accessibilityLabel=CUSTOM TIMER", 0, "Right", "NATIVE", "accessibilityLabel=Save", 0, 0, 0, 1)
                self.result = True
        except:
            self.exception_msg = "Failed to Save the Custom Count Down Timer of Auto Off Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSave_ToSaveCustomTimer() encountered and Error")
                self.WeMoAppLog.LogException()   

    def _verifyTheTileStatusCountDownfor_AutoOffTimer(self,WemoFriendlyName):
        """
        Verify the tile status count down for Auto Off timer Rule.
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String        
        """
        try:
            self.result = None 
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the count down for Auto Off timer.")              
            
            for i in range(25):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s']/..//*[contains(@accessibilityLabel,'Auto-off in')]"%WemoFriendlyName,0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The tile is verified..")
                    self.result = True
                    break
                else:
                    self._clickOnRefreshButton()
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the count down message shown on the tile of the WeMo:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Auto-off in" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Auto-off in" could not be found.')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheTileStatusCountDownfor_AutoOffTimer() encountered and Error")
                self.WeMoAppLog.LogException()               

    def _clickOnCancel_ToCancelCustomTimer(self):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        try:
            self.result = None 
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on save to save the custom timer.")        
            
            if(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=CUSTOM TIMER", 0, "Right", "NATIVE", "accessibilityLabel=Save", 0, 0)):
                self.ExperitestClient.clickIn3("NATIVE", "accessibilityLabel=CUSTOM TIMER", 0, "Right", "NATIVE", "accessibilityLabel=Save", 0, 0, 0, 1)
                self.result = True
        except:
            self.exception_msg = "Failed to click on Cancel Button of Custom Timer of Auto Off Timer Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnCancel_ToCancelCustomTimer() encountered and Error")
                self.WeMoAppLog.LogException()    

    def _selectTheActionForWeMo_TimerRule(self,WemoFriendlyName,actionName):
        """
        Select the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        ActionList = ["on until time", "on", "off"]
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("The WeMo on which the action will be applied is:%s"%WemoFriendlyName)
            self.WeMoAppLog.Info("Select the action:%s for the WeMo in the New Timer Rule Page"%actionName)
        try:
            #for i in range(5):
            #    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CONTROL A DEVICE",0):
            #        break
            #    elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Add a new rule",0):
            #        break
            #    else:
            #        time.sleep(self.delay)
            #else:
            #    if self.WeMoAppLog is not None:
            #        self.WeMoAppLog.Error('WeMo App is not on Rules Tab')
            #    raise Exception('WeMo App is not on Rules Tab')
            #
            if actionName.strip() not in ActionList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
                raise Exception('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select Switches Page"%WemoFriendlyName)
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Header - New Timer Rule/Timer Rule/Edit Timer Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)     
            
            for i in range(10):
                if(self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "text=%s"%actionName, 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.clickIn3("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "text=%s"%actionName, 0, 0, 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Action for the WeMo having friendly name:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%actionName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%actionName)         
            
            assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=%s"%actionName, 0, 0) == True
            assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheActionForWeMo_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _selectTheActionForWeMo_NestRule(self,WemoFriendlyName,actionName):
        """
        Select the Action for the Wemo on which the Rule is to be applied for the Motion Rule
        @param WemoFriendlyName: The Wemo Friendly Name of the WeMo
        @type WemoFriendlyName: String
        @param actionName: The action for the Wemo. Actions:"on", "off"
        @type actionName: String
        """
        ActionList = ["on","off"]

        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the action:%s for the Wemo in the New Nest Rule Page"%actionName)
            self.WeMoAppLog.Info("The Wemo on which the action will be applied is:%s"%WemoFriendlyName)
        try:
            if actionName.strip() not in ActionList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right action for the Wemo. The action can  be "on then…","off"')
                raise Exception('Please give the right action for the Wemo. The action can  be "on then…","off"')
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select Switches Page"%WemoFriendlyName)
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Nest Home/Away Rule' and @class='UILabel']",0)) or (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Nest Home/Away']",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header Nest Home/Away Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Nest Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Nest Rule" could not be found.')

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName,0,1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%actionName,0)):
                    time.sleep(self.delay)
                    #self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%actionName, 0, True)
                    #self.ExperitestClient.clickIn3("NATIVE", "xpath=(//*[@text='off' and @class='UILabel'])", 0, "Down", "NATIVE", "xpath=(//*[@accessibilityLabel='off'])", 0, 0, 0, 1)
                    self.ExperitestClient.clickIn3("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "accessibilityLabel=%s"%actionName, 0, 0, 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to select the option %s for the WeMo:%s"%(actionName,WemoFriendlyName)
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%actionName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%actionName)


            assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=%s"%actionName, 0, 0) == True
            assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheActionForWeMo_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheActionForWeMo_MotionRule(self,WemoFriendlyName,actionName):
        """
        Select the Action for the Wemo on which the Rule is to be applied for the Motion Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the Wemo. Actions:"on then", "off"
        @type actionName: String
        """
        ActionList = ["on then","off"]
        
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the action:%s for the Wemo in the New Motion Rule Page"%actionName)
            self.WeMoAppLog.Info("The Wemo on which the action will be applied is:%s"%WemoFriendlyName)
        try:
            if actionName.strip() not in ActionList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right action for the Wemo. The action can  be "on then…","off"')
                raise Exception('Please give the right action for the Wemo. The action can  be "on then…","off"')
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select Switches Page"%WemoFriendlyName)
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header New Motion Rule/Motion Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)     
            
            if actionName == "off":  
                
                for i in range(10):
                    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=off")):
                        time.sleep(self.delay)
                        #self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%actionName, 0, True)
                        #self.ExperitestClient.clickIn3("NATIVE", "xpath=(//*[@text='off' and @class='UILabel'])", 0, "Down", "NATIVE", "xpath=(//*[@accessibilityLabel='off'])", 0, 0, 0, 1)
                        self.ExperitestClient.clickIn3("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "accessibilityLabel=off", 0, 0, 0, 1)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    self.exception_msg = "Failed to select the option 'off' for the WeMo:%s"%WemoFriendlyName
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%actionName)
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%actionName)
            
            if actionName == "on then":
                for i in range(10):
                    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel="+u"on then…")):
                        time.sleep(self.delay)
                        self.ExperitestClient.elementListSelect("", "accessibilityLabel="+u"on then…", 0, True)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=on with motion + 15 minutes")):
                        time.sleep(self.delay)
                        self.ExperitestClient.elementListSelect("", "accessibilityLabel=on with motion + 15 minutes", 0, True)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    self.exception_msg = "Failed to select the action On then for the Wemo :%s"%WemoFriendlyName
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=on then…" or "accessibilityLabel=on with motion + 15 minutes" could not be found.'%actionName)
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=on then…" or "accessibilityLabel=on with motion + 15 minutes" could not be found.'%actionName)
                     
            if actionName == "off":
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=%s"%actionName, 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheActionForWeMo_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _unselectTheActionForWeMo_TimerRule(self,WemoFriendlyName,actionName):
        """
        UnSelect the Action for the WeMo on which the Rule is to be applied for the Timer Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:on until time, on and off
        @type actionName: String
        """
        ActionList = ["on until time", "on", "off"]
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Unselect the action:%s for the WeMo in the New Timer Rule Page"%actionName)
            self.WeMoAppLog.Info("The WeMo on which the action will be applied is:%s"%WemoFriendlyName)
        try:
            if actionName.strip() not in ActionList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
                raise Exception('Please give the right action for the WeMo. The action can  be "on until time", "on" or "off"')
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select WeMo Page"%WemoFriendlyName)
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the header New Timer Rule/Edit Timer Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    self.result = True
                    yCoordinateOfDeviceTab = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, "y")
                    print yCoordinateOfDeviceTab
                    CenterofScreen = int(self.ExperitestClient.p2cy(50))
                    
                    if  int(yCoordinateOfDeviceTab[0])  > CenterofScreen:
                        self.ExperitestClient.swipe2("Down",750)					
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    print "im in Else"				
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
                        SwipeDirection = "Down"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    else:
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=%s"%actionName, 0, 0) == False
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=%s"%actionName, 0, 0) == False
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Action:%s is allready unselected for the Rule to apply"%actionName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheActionForWeMo_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _unselectTheActionForWeMo_MotionRule(self,WemoFriendlyName):
        """
        UnSelect the Action for the WeMo on which the Rule is to be applied for the Motion Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        @param actionName: The action for the WeMo. Actions:"on then�", "off"
        @type actionName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("The WeMo on which the action will be applied is:%s"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Select Switches Page"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Launch the New Motion Rule"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    time.sleep(self.delay)
                    self.result = True
                    yCoordinateOfDeviceTab = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, "y")
                    print yCoordinateOfDeviceTab
                    CenterofScreen = int(self.ExperitestClient.p2cy(50))
                    
                    if  int(yCoordinateOfDeviceTab[0])  > CenterofScreen:
                        self.ExperitestClient.swipe2("Down",750)					
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    print "im in Else"				
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
                        SwipeDirection = "Down"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    else:
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo:%s"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)

            if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Action is allready unselected for the Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheActionForWeMo_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _unselectTheMotionInMotionRulePage_MotionRule(self,WemoFriendlyName):
        """
        UnSelect the Sensor in the Select Sensor Page for the Motion Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("The Sensor to be unselected is:%s"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Motion Rule Page"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the New Motion Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" or "accessibilityLabel=Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" or "accessibilityLabel=Motion Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo %s on the 'New Motion Rule/Edit Motion Rule' Page"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)     
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == False
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == False
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready unselected for the Rule to apply"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheMotionInMotionRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _unselectTheMotionInNotificationRulePage_NotificationRule(self,WemoFriendlyName):
        """
        UnSelect the Sensor in the Notification Rule Page for the Notification Rule
        @param WemoFriendlyName: The sensor to be selected
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("UnSelect the Sensor:%s in the Notification Rule Page for the Notification Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Motion Rule Page"%WemoFriendlyName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify New Notification Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" or "accessibilityLabel=Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" or "accessibilityLabel=Notification Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the WeMo :%s on Notification Rule Page"%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)     
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == False
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "text=Motion", 0, 0) == False
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sensor:%s is allready unselected for the Rule to apply"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheMotionInNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _unselectTheWeMo_AwayModeRule(self,WemoFriendlyName):
        """
        UnSelect the WeMo for the Away Mode Rule
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("UnSelect the WeMo:%s on which the Rule is to be applied for the Timer Rule"%WemoFriendlyName)
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/verify Away Mode Rule page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)):
                    self.result = True
                    yCoordinateOfDeviceTab = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName, "y")
                    print yCoordinateOfDeviceTab
                    CenterofScreen = int(self.ExperitestClient.p2cy(50))
                    
                    if  int(yCoordinateOfDeviceTab[0])  > CenterofScreen:
                        self.ExperitestClient.swipe2("Down",750)
                    break
                else:
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UITableViewWrapperView' and @y>127]",0):
                        SwipeDirection = "Down"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                    else:
                        SwipeDirection = "Up"
                        self.ExperitestClient.swipe2(SwipeDirection,self.swipeOffset_DeviceListContainer,0)
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Wemo :%s on the 'Away Mode Rule' Page."%WemoFriendlyName
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%WemoFriendlyName)
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%WemoFriendlyName)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Inside", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Switch:%s is allready unselected for the Rule to apply"%WemoFriendlyName)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheWeMo_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheTimeForOnThenOffIfNoMotion_MotionRule(self,timeToBeSet):
        """
        Select the Time when click on the on then action for the Motion Rule
        @param time: The time to be selected 
        @type time: String
        """
        TimeList = {"immediately":"0","1 minutes":"1","5 minutes":"2","10 minutes":"3","15 minutes":"4","30 minutes":"5","1 hour":"6","don't turn off":"7"}
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select the time:%s for the Switch in the New Motion Rule Page"%timeToBeSet)
        try:
            if timeToBeSet.strip() not in TimeList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right time. The time can  be "immediately","1 minute","5 minutes","10 minutes","15 minutes","30 minutes","1 hour","don\'t turn off"')
                raise Exception('Please give the right time. The time can  be "immediately","1 minute","5 minutes","10 minutes","15 minutes","30 minutes","1 hour","don\'t turn off"')
            self.result = None
            self.exception_msg = None
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=on, then off if no motion")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify action on, then off if no motion on Motion Rule Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=on, then off if no motion" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=on, then off if no motion" could not be found.')
                    
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIPickerView",0)):
                    time.sleep(self.delay)
                    try:
                        self.ExperitestClient.elementSetProperty("NATIVE", "class=UIPickerView", 0, "index", TimeList[timeToBeSet])
                        time.sleep(self.delay)
                    except:
                        pass
                    self._clickOnDoneButtonToConfirmChangesInWeMoApp()
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to set the time :%s in Motion Rule Page."%timeToBeSet
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIPickerView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIPickerView" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheTimeForOnThenOffIfNoMotion_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _setTheThreshold_Insight(self, ThresholdValue):
        try:
            self.result = None
            if int(ThresholdValue) in range(2, 100):
                print "I am here"
                for index,value in enumerate(range(2,100),0):
                    if int(ThresholdValue) == int(value):
                        index_to_set = index
                        break

                try:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UIPickerTableView", 0, "index", "%s"%index_to_set)
                except:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('The Value is set')
                self.result = True
            else:
                self.exception_msg = "Threshold not in Limit."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Threshold not in Limit.')
                raise Exception('Threshold not in Limit.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheTimeForOnThenOffIfNoMotion_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()


    def _clickOnWhenTab_TimerRule(self,actionName=None):
        """
        Click on the When tab in the Timer Rule Page
        @param actionName: The action for the Switch. Actions:on until time, on and off
        @type actionName: String
        """
        ActionList = ["on until time", "on", "off"]
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the When Tab of the Timer Rule Page for the action:%s"%actionName)
        time.sleep(self.delay)
        yoffset = self.ExperitestClient.p2cy(40)
        self.ExperitestClient.swipe2("Down",yoffset,300)
        try:
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                    time.sleep(self.delay)
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500)
        
            if actionName is not None:
                if actionName.strip() not in ActionList:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Warning('Please give the right action for the Switch. The action can  be "on until time", "on" or "off"')
                    raise Exception('Please give the right action for the Switch. The action can  be "on until time", "on" or "off"')
            self.result = None
            self.exception_msg = None
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Auto-off Timer",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page Header New Timer Rule/Edit Timer Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=WHEN")):
                    time.sleep(self.delay)
                    if actionName == None:
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=Start", 0, 0)
                    if actionName == "on until time":
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=On/Off", 0, 0)
                    if actionName == "on":
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=On", 0, 0)
                    if actionName == "off":
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=Off", 0, 0)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Select the WHEN Page Combination that takes to set the Timer on WHEN Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=WHEN" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=WHEN" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWhenTab_Auto_Off_TimerRule(self):
        """
        Click on the When tab in the Auto Off Timer Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the When Tab of the Auto Off Timer Page")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True 

            yoffset = self.ExperitestClient.p2cy(40)
            self.ExperitestClient.swipe2("Down",yoffset,300)            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Auto-off Timer",0)):
                    self.result = True
                    break
                # time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page Header Auto-off Timer"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Auto-off Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Auto-off Timer" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='All Day, Daily']")):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='All Day, Daily']")
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:					
                    self.ExperitestClient.swipe2("Down",yoffset,300)						
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Green Arrow Mark on When Place holder."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=All Day, Daily" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=All Day, Daily" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_Auto_Off_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()                
    
    def _clickOnWhenTab_TimerRule(self,actionName=None):
        """
        Click on the When tab in the Timer Rule Page
        @param actionName: The action for the Switch. Actions:on until time, on and off
        @type actionName: String
        """
        ActionList = ["on until time", "on", "off"]
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the When Tab of the Timer Rule Page for the action:%s"%actionName)
        time.sleep(self.delay)
        yoffset = self.ExperitestClient.p2cy(40)
        self.ExperitestClient.swipe2("Down",yoffset,300)
        try:
            if actionName is not None:
                if actionName.strip() not in ActionList:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Warning('Please give the right action for the Switch. The action can  be "on until time", "on" or "off"')
                    raise Exception('Please give the right action for the Switch. The action can  be "on until time", "on" or "off"')
            self.result = None
            self.exception_msg = None
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Page Header 'New Timer Rule/Edit Timer Rule.'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=WHEN")):
                    time.sleep(self.delay)
                    if actionName == None:
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=Start", 0, 0)
                    if actionName == "on until time":
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=On/Off", 0, 0)
                    if actionName == "on":
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=On", 0, 0)
                    if actionName == "off":
                        self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=WHEN", 0, "Down", "NATIVE", "accessibilityLabel=Off", 0, 0)
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500)
                    time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the action for which timer needs to be selected.(Start-On/Off-On-Off)"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=WHEN" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=WHEN" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWhenTab_MotionRule(self):
        """
        Click on the When tab in the Motion Rule Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the When Tab of the Motion Rule Page")
        try:
            self.result = None
            self.exception_msg = None
            self._isAppLaunched()
            assert self.result == True              
            time.sleep(self.delay)
            yoffset = self.ExperitestClient.p2cy(40)
            self.ExperitestClient.swipe2("Down",yoffset,300)     
			
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the 'New Motion Rule/Edit Motion Rule' Page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=When",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500)						
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the When Text on 'New Motion Rule/Edit Motion Rule' page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWhenTab_NotificationRule(self):
        """
        Click on the When tab in the Notification Rule Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the When Tab of the Notification Rule Page")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True              
            time.sleep(self.delay)
            yoffset = self.ExperitestClient.p2cy(40)
            self.ExperitestClient.swipe2("Down",yoffset,300)  
			
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the New/Edit Notification Rule Page Header"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=When",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",yoffset,300)  					
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the When placeholder on 'New Notification Rule' Page"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnWhenTab_AwayModeRule(self):
        """
        Click on the When tab in the Away Mode Rule Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the When tab in the Away Mode Rule Page")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True              
            yoffset = self.ExperitestClient.p2cy(40)
            self.ExperitestClient.swipe2("Down",yoffset,300)               
            ##for i in range(10):
            ##    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode",0)):
            ##        self.result = True
            ##        break
            ##    else:
            ##        self.ExperitestClient.swipe2("Down",yoffset,300) 					
            ##    time.sleep(self.delay)
            ##else:
            ##    self.exception_msg = "Failed to Identify the Away Mode Rule Page Header."
            ##    if self.WeMoAppLog is not None:
            ##        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
            ##    raise Exception('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=On/Off",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=On/Off",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify On/Off option on When Tab of Away Mode Rule to adjust the Away Mode Rule Operation Timing."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=On/Off" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=On/Off" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnWhenTab_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnMessageTabOfNotificationRulePage_NotificationRule(self):
        """
        Clicking on the Message Tab of the Notification Rule on the Notification Rule Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Message Tab of the Notification Rule on the Notification Rule Page.")
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the New Notification Rule Page Header"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Message",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Message",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Message Placeholder in the 'New Notification Rule' on WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Message" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Message" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnMessageTabOfNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnHowOftenTabOfNotificationRulePage_NotificationRule(self):
        """
        Clicking on the How Often Tab of the Notification Rule on the Notification Rule Page.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the How Often Tab of the Notification Rule on the Notification Rule Page.")
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the New Notification Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=How Often",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=How Often",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Click on place holder which says How Often you need a Notification."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=How Often" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=How Often" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnHowOftenTabOfNotificationRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createANameOfRule_TimerRule(self,newRuleName=None):
        """
        Create a name of the Rule for the Timer Rule.
        @param ruleName: The Name of the Rule to be given 
        @type ruleName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Create a name of the Rule:%s for the Timer Rule"%newRuleName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Timer Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Timer Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the New Timer Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Timer Rule" could not be found.')
            
            if newRuleName!=None:
                for i in range(10):
                    if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=RULE NAME",0):
                        time.sleep(self.delay)
                        break
                    else:
                        self.ExperitestClient.swipe2("Down",800)
            
                for i in range(10):
                    if(self.ExperitestClient.isFoundIn("NATIVE","accessibilityLabel=RULE NAME",0,"Down","NATIVE","class=UITextField",0,0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down", 500, 0)
                        self.ExperitestClient.click("NATIVE", "class=UITextField", 0)
                        self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, newRuleName)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    else:
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down",800)
                else:
                    self.exception_msg = "Failed to Identify/Click/Send Text with new Rule name as :%s to set the name for New Timer Rule."%newRuleName
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                    raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createANameOfRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _createANameOfRule_Auto_Off_Rule(self,newRuleName=None):
        """
        Create a name of the Rule for the Timer Rule.
        @param ruleName: The Name of the Rule to be given 
        @type ruleName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Create a name of the Rule:%s for the Timer Rule"%newRuleName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Auto-off Timer",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Aito-off Timer Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Auto-off Timer" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Auto-off Timer" could not be found.')
            
            self.ExperitestClient.swipe2("Down", 500)
            
            if newRuleName!=None:
                for i in range(10):
                    if(self.ExperitestClient.isFoundIn("NATIVE","accessibilityLabel=RULE NAME",0,"Down","NATIVE","class=UITextField",0,0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down", 500, 0)
                        self.ExperitestClient.click("NATIVE", "class=UITextField", 0)
                        self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, newRuleName)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.swipe2("Down", 500)							
                    time.sleep(self.delay)
                else:
                    self.exception_msg = "Failed to Identify/Click/Send Text on the Rule name placeholder on the WeMo App."
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                    raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createANameOfRule_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _createANameOfRule_MotionRule(self,newRuleName=None):
        """
        Create a name of the Rule for the Motion Rule.
        @param ruleName: The Name of the Rule to be given 
        @type ruleName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Create a name of the Rule:%s for the Motion Rule"%newRuleName)
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Motion Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the New Motion Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Motion Rule" could not be found.')
            
            self.ExperitestClient.swipe("Down", 500)
            
            if newRuleName!=None:
                for i in range(10):
                    if(self.ExperitestClient.isFoundIn("NATIVE","accessibilityLabel=RULE NAME",0,"Down","NATIVE","class=UITextField",0,0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down", 500, 0)
                        self.ExperitestClient.click("NATIVE", "class=UITextField", 0)
                        self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, newRuleName)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    else:
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down",800)
                else:
                    self.exception_msg = "Failed to Identify/Click/Send Text to assign the new name(%s) for the motion rule"%newRuleName
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                    raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createANameOfRule_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createANameOfRule_NotificationRule(self,newRuleName=None):
        """
        Create a name of the Rule for the Notification Rule.
        @param ruleName: The Name of the Notification to be given 
        @type ruleName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Create a name of the Rule:%s for the Notification Rule"%newRuleName)
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Notification Rule",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit Notification Rule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Idenitfy New Notification Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" or "accessibilityLabel=Notification Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Notification Rule" or "accessibilityLabel=Notification Rule" could not be found.')
            
            self.ExperitestClient.swipe2("Down", 500)
            
            if newRuleName!=None:
                for i in range(10):
                    if(self.ExperitestClient.isFoundIn("NATIVE","accessibilityLabel=RULE NAME",0,"Down","NATIVE","class=UITextField",0,0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down", 500, 0)
                        self.ExperitestClient.click("NATIVE", "class=UITextField", 0)
                        self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, newRuleName)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    self.exception_msg = "Failed to Identify the RULE NAME text and assign a new name for the Notification Rule: %s"%newRuleName
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                    raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createANameOfRule_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
       
    def _unselectTheDevicesAlreadySetforAwayMode(self):
        """
        Un select All the Devices Marked for Away Mode by Default
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Un select All the Devices which are already a part of Away Mode Rule")
            
            self._isAppLaunched()
            assert self.result == True
            
            trial_Attept = 0

            for i in range(15):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityIdentifier='ic_checkmark_green.png']/../..//*[@onScreen='true']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityIdentifier='ic_checkmark_green.png']/../..//*[@onScreen='true']",0,1)
                else:
                    trial_Attept = trial_Attept + 1
                    #self.ExperitestClient.swipe2("Down",1500,500)
                    if trial_Attept > 1:
                        break
            else:
                self.exception_msg = "Failed to Identify/Unselect the WeMo devices which needs to be removed from Away Mode Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("15 devices are moved out of list already")
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectTheDevicesAlreadySetforAwayMode() encountered and Error")
                self.WeMoAppLog.LogException()        
    
    def _createANameOfRule_AwayModeRule(self,newRuleName=None):
        """
        Create a name of the Rule for the Away Mode Rule.
        @param ruleName: The Name of the Rule to be given 
        @type ruleName: String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info(" Create a name of the Rule:%s Away Mode Rule"%newRuleName)
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Away Mode",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the Away Mode Rule Page Header."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Away Mode" could not be found.')
            
            if newRuleName!=None:
                for i in range(10):
                    if(self.ExperitestClient.isFoundIn("NATIVE","accessibilityLabel=RULE NAME",0,"Down","NATIVE","class=UITextField",0,0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.swipe2("Down", 500, 0)
                        self.ExperitestClient.click("NATIVE", "class=UITextField", 0)
                        self.ExperitestClient.elementSendText("NATIVE", "class=UITextField", 0, newRuleName)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    else:
                        self.ExperitestClient.swipe2("Down", self.MaxHeightOfDevice, 500)
                        time.sleep(self.delay)
                else:
                    self.exception_msg = "Failed to Identify/Click/Send Text and Assign a new name(%s) for the Timer Rule"%newRuleName
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextField" could not be found.')
                    raise Exception('Raising the Exception as the element:"class=UITextField" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createANameOfRule_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyRuleNameErrorPopup(self):
        """
        Verify the Rule Name Error Pop up.
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Rule Name Error Pop up.")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "class=UIAlertView")) and (re.search("Please enter a name 30 characters or less that uses only letters, numbers, spaces, dashes or underscores.",self.ExperitestClient.getTextIn2("NATIVE", "class=UIAlertView", 0, "NATIVE","Inside", 0, 0))!=None) or self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Please enter a name 30 characters or less']",0) :
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to verify the error message which says 'Please enter a name 30 caharacters or less that uses only leters,numbers,spaces, dashes or underscores'"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the "class=UIAlertView" could not be found.')
                raise Exception('Raising the Exception as the "class=UIAlertView" could not be found.')
            self._clickOnOKButtonForAlertBoxes()
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRuleNameErrorPopup() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOn_SimpleRule(self):
        """
        Set the Timer On on the When Page for the Simple Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On on the When Page for the Simple Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:    
                self.WeMoAppLog.Info("Set the Timer On on the When Page for the Simple Rule")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the When option on Simple Rule Page to set the time."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOn_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOn_SimpleRule(self):
        """
        Set the Sunrise Sunset Timer On on the When Page for the Simple Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On on the When Page for the Simple Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify When Tab of Simple Sunrise/Sunset Rule."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0) == True
                self.result = True
            else:
                self.exception_msg = "Failed to Identify When Tab of Simple Sunrise/Sunset Rule."
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunrise_SimpleRule(self):
        """
        Select Sunrise for the Simple Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Simple Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify the When Placeholder on Sunrise/Sunset Page of WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Cannot select Sunrise of the Sunrise/Sunset is not set to selected.')
                raise Exception('Cannot select Sunrise of the Sunrise/Sunset is not set to selected.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                self.exception_msg = "Failed to Identify the text Sunrise on the Sunrise/Sunset Rule."
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Sunrise is allready selected for Simple Rule")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunrise_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunset_SimpleRule(self):
        """
        Select Sunset for the Simple Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Simple Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Cannot select Sunrise of the Sunrise/Sunset is not set to selected.')
                raise Exception('Cannot select Sunrise of the Sunrise/Sunset is not set to selected.')  
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Simple Rule")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunset_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clickOnTimeTabOfWhenRulePage_SimpleRule(self):
        """
        Clicking on the Time Tab of the Simple Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Time Tab of the Simple Rule on the When Rule Page to select the time when the rule will be effective.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify 'When' Page Header"
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Time")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Time")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Click on Time button 'When' page."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnTimeTabOfWhenRulePage_SimpleRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOnForOnAction_TimerRule(self):
        """
        Set the Timer On for the On Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the Timer Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.exception_msg = "Failed to Identify/Launch When Page on WeMo App."
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Start Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to set On Timer on When Page of WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOnForOffAction_TimerRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for the Off Action on the When Page for the Timer Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the End Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to set Off Timer on When Page of WeMo App."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOnForOnAction_TimerRule(self):
        """
        Set the Sunrise Sunset Timer On for the On Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for On Action on the When Page for the Timer Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Start Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to set the On timer for Sunrise-Sunset on Sunrise/Sunset Timer Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOnForOffAction_TimerRule(self):
        """
        Set the Sunrise Sunset Timer On for the Off Action on the When Page for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Off Action on the When Page for the Timer Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the End Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to click on Off Time Tab on When Page of Sunrise-Sunset Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
                    
    def _selectSunriseForOnAction_TimerRule(self):
        """
        Select Sunrise for the On Action for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the On Action for the Timer Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=On", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsriseForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForOnAction_TimerRule(self):
        """
        Select Sunset for the On Action for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the On Action for the Timer Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForOnAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForOffAction_TimerRule(self):
        """
        Select Sunrise for the Off Action for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Off Action for the Timer Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForOffAction_TimerRule(self):
        """
        Select Sunset for the Off Action for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Off Action for the Timer Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')  
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                self.ExperitestClient.swipe2("Down", 500)
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
                self.ExperitestClient.swipe2("Up", 500, 500)
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForOffAction_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _setTheTimerOnForOnAction_AwayModeRule(self):
        """
        Set the Timer On for the On Action on the When Page for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for On Action on the When Page for the AwayMode Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Start Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to set the timer for On Action on When Page of Away Mode Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOnForOffAction_AwayModeRule(self):
        """
        Set the Timer On for the Off Action on the When Page for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for the Off Action on the When Page for the AwayMode Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the End Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to Set the Timer for Off Action in Away Mode Timer Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOnForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _setTheSunriseSunsetTimerOnForOnAction_AwayModeRule(self):
        """
        Set the Sunrise Sunset Timer On for the On Action on the When Page for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for On Action on the When Page for the AwayMode Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Start Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to set the sunrise/sunset timer to ON in Away Mode Timer Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOnForOffAction_AwayModeRule(self):
        """
        Set the Sunrise Sunset Timer On for the Off Action on the When Page for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Off Action on the When Page for the AwayMode Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the End Time for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to set the Timer to Off Action in Away Mode Timer Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOnForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                           
    def _selectSunriseForOnAction_AwayModeRule(self):
        """
        Select Sunrise for the On Action for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the On Action for the AwayMode Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=On", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForOnAction_AwayModeRule(self):
        """
        Select Sunset for the On Action for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the On Action for the AwayMode Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the On Action is not turned On.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForOnAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForOffAction_AwayModeRule(self):
        """
        Select Sunrise for the Off Action for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Off Action for the AwayMode Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForOffAction_AwayModeRule(self):
        """
        Select Sunset for the Off Action for the AwayMode Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Off Action for the AwayMode Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')
                raise Exception('Raising the Exception as Sunset/Sunrise button for the Off Action is not turned On.')  
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                self.ExperitestClient.swipe2("Down", 500)
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
                self.ExperitestClient.swipe2("Up", 500)
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=OFF", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=ON", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the On Action for the Timer Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForOffAction_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _clickOnStartTimeTabOfWhenRulePage_TimerRule(self):
        """
        Clicking on the Start Time Tab of the Timer Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Start Time Tab of the Timer Rule on the When Rule Page to select the time when the rule will be effective.")
            
            self._isAppLaunched()
            assert self.result == True            

            for i in range(3):
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='ON']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")):
                    self.ExperitestClient.clickIn2("NATIVE", "xpath=//*[@text='ON']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")
                    time.sleep(self.delay*3)
                    self.result = True
                    break
                # time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('When page is already opened')
                raise Exception('When page is already opened')

        except:
            self.exception_msg = "Failed to click on Start Time Tab on When Page of On Untill Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnEndTimeTabOfWhenRulePage_TimerRule(self):
        """
        Clicking on the End Time Tab of the Timer Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Start Time Tab of the Timer Rule on the When Rule Page to select the time when the rule will be effective.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(3):
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='OFF']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")):
                    self.ExperitestClient.clickIn2("NATIVE", "xpath=//*[@text='OFF']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")
                    time.sleep(self.delay*3)
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('When page is already opened')
                raise Exception('When page is already opened')

        except:
            self.exception_msg = "Failed to click on End Time Tab on When Page of On Untill Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_TimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnStartTimeTabOfWhenRulePage_MotionRule(self):
        """
        Clicking on the Start Time Tab of the Motion Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Start Time Tab of the Timer Rule on the When Rule Page to select the time when the rule will be effective.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(3):
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='START SENSING']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")):
                    self.ExperitestClient.clickIn2("NATIVE", "xpath=//*[@text='START SENSING']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")
                    time.sleep(self.delay*3)
                    self.result = True
                    break
                # time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self.exception_msg = "Failed to click on Start Time Tab of Motion Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnEndTimeTabOfWhenRulePage_MotionRule(self):
        """
        Clicking on the End Time Tab of the Motion Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Start Time Tab of the Timer Rule on the When Rule Page to select the time when the rule will be effective.")

            self._isAppLaunched()
            assert self.result == True

            for i in range(3):
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='STOP SENSING']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")):
                    self.ExperitestClient.clickIn2("NATIVE", "xpath=//*[@text='STOP SENSING']",0,"DOWN","NATIVE","xpath=//*[@text='Time']")
                    time.sleep(self.delay*3)
                    self.result = True
                    break
                # time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self.exception_msg = "Failed to Click on End Time Tab on When Page of Motion Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnStartTimeTabOfWhenRulePage_NotificationRule(self):
        """
        Clicking on the Start Time Tab of the Notification Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Start Time Tab of the Notification Rule on the When Rule Page to select the time when the rule will be effective.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Time",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Time",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self.exception_msg = "Failed to click on Start Time Tab on When Page of Notification Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnEndTimeTabOfWhenRulePage_NotificationRule(self):
        """
        Clicking on the End Time Tab of the Notification Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the End Time Tab of the Notification Rule on the When Rule Page to select the time when the rule will be effective.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Time",1)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Time",1,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self.exception_msg = "Failed to click on End Time Tab on When Page of Notification Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnStartTimeTabOfWhenRulePage_AwayModeRule(self):
        """
        Clicking on the Start Time Tab of the AwayMode Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Start Time Tab of the AwayMode Rule on the When Rule Page to select the time when the rule will be effective.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Time",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Time",0,1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self.exception_msg = "Failed to Click on Start Time Tab on When Page of Away Mode Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnStartTimeTabOfWhenRulePage_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnEndTimeTabOfWhenRulePage_AwayModeRule(self):
        """
        Clicking on the End Time Tab of the AwayMode Rule on the When Rule Page to select the time when the rule will be effective.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the End Time Tab of the AwayMode Rule on the When Rule Page to select the time when the rule will be effective.")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Time",1)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Time",1,1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Time" could not be found.')
        except:
            self.exception_msg = "Failed to click on End Time Tab on When Page of Away Mode Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEndTimeTabOfWhenRulePage_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOn_StartSensing_MotionRule(self):
        """
        Set the Timer On for the Start Sensing on the When Page for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for the Start Sensing on the When Page for the Motion Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Start Sensing for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to click on Timer On Start Sensing of Motion Rule."
            self._screenCapture()        
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOn_StartSensing_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOn_StopSensing_MotionRule(self):
        """
        Set the Timer On for the Stop Sensing on the When Page for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for the Stop Sensing on the When Page for the Motion Rule")
        try:
            self.result = None
            self.exception_msg = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Stop Sensing for the Rule to apply")
                self.result = True
        except:
            self.exception_msg = "Failed to Set Timer for Stop Sensing on Motion Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOn_StopSensing_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOn_StartSensing_MotionRule(self):
        """
        Set the Sunrise Sunset Timer On for the Start Sensing on the When Page for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Start Sensing on the When Page for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Start Sensing for the Motion Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_StartSensing_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _setTheSunriseSunsetTimerOn_StopSensing_MotionRule(self):
        """
        Set the Sunrise Sunset Timer On for the Stop Sensing on the When Page for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Stop Sensing on the When Page for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Stop Sensing for the Motion Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_StopSensing_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOn_StartSensing_NotificationRule(self):
        """
        Set the Timer On for the Start Sensing on the When Page for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for the Start Sensing on the When Page for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Start Sensing for the Notification Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOn_StartSensing_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimerOn_StopSensing_NotificationRule(self):
        """
        Set the Timer On for the Stop Sensing on the When Page for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Timer On for the Stop Sensing on the When Page for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallclock_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Timer is allready On for the Stop Sensing for the Notification Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimerOn_StopSensing_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOn_StartSensing_NotificationRule(self):
        """
        Set the Sunrise Sunset Timer On for the Start Sensing on the When Page for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Start Sensing on the When Page for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Start Sensing for the Notification Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_StartSensing_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheSunriseSunsetTimerOn_StopSensing_NotificationRule(self):
        """
        Set the Sunrise Sunset Timer On for the Stop Sensing on the When Page for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set the Sunrise Sunset Timer On for the Stop Sensing on the When Page for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0) == True
                time.sleep(self.delay)
                self.ExperitestClient.clickIn2("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_off.png", 0, 0)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Sunrise Sunset Timer is allready On for the Stop Sensing for the Notification Rule to apply")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheSunriseSunsetTimerOn_StopSensing_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForStartSensingAction_MotionRule(self):
        """
        Select Sunrise for the Start Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Start Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Surise cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Surise cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action for the Motion Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStartSensingAction_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForStartSensingAction_MotionRule(self):
        """
        Select Sunset for the Start Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Start Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Surise cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Surise cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Start Sensing for the Motion Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Start Sensing for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForStartSensingAction_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForStopSensingAction_MotionRule(self):
        """
        Select Sunrise for the Stop Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Stop Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunrise cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Surise cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Stop Sensing Action for the Motion Rule")
                    self.result = True
            
            if not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Stop Sensing Action for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStopSensingAction_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForStopSensingAction_MotionRule(self):
        """
        Select Sunset for the Stop Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Stop Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunset cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Sunset cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Stop Sensing for the Motion Rule")
                    self.result = True
            
            if not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Stop Sensing for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForStartSensingAction_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForStartSensingAndSunsetForStopSensing_MotionRule(self):
        """
        Select Sunrise for the Start Sensing Action and Sunset for Stop Sensing Action for the Timer Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Start Sensing Action and Sunset for Stop Sensing Action for the Timer Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not ((self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0))):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action and Sunset is allready selected for Stop Sensing Action for the Motion Rule")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStartSensingAndSunsetForStopSensing_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForStopSensingAndSunsetForStartSensing_MotionRule(self):
        """
        Select Sunrise for the Stop Sensing Action and Sunset for Start Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Stop Sensing Action and Sunset for Start Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not ((self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0))):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action and Sunset is allready selected for Stop Sensing Action for the Motion Rule")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStopSensingAndSunsetForStartSensing_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()        
    
    def _selectSunriseForStartSensingAction_NotificationRule(self):
        """
        Select Sunrise for the Start Sensing Action for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Start Sensing Action for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Surise cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Surise cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action for the Motion Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action for the Notification Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStartSensingAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForStartSensingAction_NotificationRule(self):
        """
        Select Sunset for the Start Sensing Action for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Start Sensing Action for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Surise cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Surise cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Start Sensing for the Motion Rule")
                    self.result = True
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Start Sensing for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForStartSensingAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForStopSensingAction_NotificationRule(self):
        """
        Select Sunrise for the Stop Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Stop Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunrise cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Surise cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Stop Sensing Action for the Motion Rule")
                    self.result = True
            
            if not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunrise is allready selected for the Stop Sensing Action for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStopSensingAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunsetForStopSensingAction_NotificationRule(self):
        """
        Select Sunset for the Stop Sensing Action for the Motion Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunset for the Stop Sensing Action for the Motion Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunset cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Sunset cannot be selected because Sunrise/Sunset is not selected.')
            
            if (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 1, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Stop Sensing for the Motion Rule")
                    self.result = True
            
            if not(self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)):
                if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                    time.sleep(self.delay)
                    assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    self.result = True
                else:
                    self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Sunset is allready selected for the Stop Sensing for the Motion Rule")
                    self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunsetForStopSensingAction_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _selectSunriseForStartSensingAndSunsetForStopSensing_NotificationRule(self):
        """
        Select Sunrise for the Start Sensing Action and Sunset for Stop Sensing Action for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Start Sensing Action and Sunset for Stop Sensing Action for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not ((self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0))):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunrise", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action and Sunset is allready selected for Stop Sensing Action for the Motion Rule")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStartSensingAndSunsetForStopSensing_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectSunriseForStopSensingAndSunsetForStartSensing_NotificationRule(self):
        """
        Select Sunrise for the Stop Sensing Action and Sunset for Start Sensing Action for the Notification Rule
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select Sunrise for the Stop Sensing Action and Sunset for Start Sensing Action for the Notification Rule")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')     
            
            if not ((self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=START SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0)) and (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=STOP SENSING", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_smallsun_on.png", 0, 0))):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
                raise Exception('Sunrise for Start Sensing and Sunset for Stop Sensing cannot be selected because Sunrise/Sunset is not selected.')
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Sunset", 0, 1)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunset", 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=Sunrise", 1, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Sunrise is allready selected for the Start Sensing Action and Sunset is allready selected for Stop Sensing Action for the Motion Rule")
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectSunriseForStopSensingAndSunsetForStartSensing_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _toggleSensingOn_Auto_Off_Timer(self):
        """
        Toggle the Sensing On Auto Off Timer
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Toggle the All Day sensing on when page of Auto Off Timer Rule")
        
            for i in range(3):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='All Day, Daily']//*[@knownSuperClass='UIImageView' and @parentHidden='true']")):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@text='All Day, Daily']//*[@knownSuperClass='UIImageView' and @parentHidden='true']")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('When page is already opened')
                raise Exception('When page is already opened')

            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == True):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All Day sensing is already enabled.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UISwitch", 0, "on", "true")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All day sensing is enabled..")
                    self.result = True
                    break                
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISwitch" could not be enabled.')
                raise Exception('Raising the Exception as the element:"class=UISwitch" could not be enabled.')                                     
        except:
            self.exception_msg = "Failed to Turn on the toggle Switch to Enable the Auto Off Timer options on When Page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _toggleSensingOn_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()            

    def _checktheRuleStatusOnRulesPage(self,RuleName,StatusMessage):
        """
        Check the Rule Status in Rules page
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check the status of Rule in Rules Main Page")
                
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='%s']/..//*[@text='%s']"%(RuleName,StatusMessage),0):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down", 500, 0)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the rule status in not matching')
                raise Exception('Raising the Exception as the rule status in not matching')                                     
        except:
            self.exception_msg = "Failed while checking the status of rule in Rule Main page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checktheRuleStatusOnRulesPage() encountered and Error")
                self.WeMoAppLog.LogException()              

    
    def _toggleSensingOff_Auto_Off_Timer(self):
        """
        Toggle the Sensing Off Auto Off Timer
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Toggle the All Day sensing on when page of Auto Off Timer Rule")

            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == False):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All Day sensing is already disabled.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UISwitch", 0, "on", "false")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All day sensing is enabled..")
                    self.result = True
                    break                
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISwitch" could not be enabled.')
                raise Exception('Raising the Exception as the element:"class=UISwitch" could not be enabled.')                                     
        except:
            self.exception_msg = "Failed to toggle the Switch Off to disable the Timer of Auto Off Timer Rule"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _toggleSensingOff_Auto_Off_Timer() encountered and Error")
                self.WeMoAppLog.LogException()              
    
    def _sensingAllDayOn_MotionRule(self):
        """
        Set All Day to On for the Motion Rule to take place.
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set All Day to On for the Motion Rule to take place")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
                      
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                
            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == True):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All Day sensing is already enabled.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UISwitch", 0, "on", "true")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All day sensing is enabled..")
                    self.result = True
                    break                
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISwitch" could not be enabled.')
                raise Exception('Raising the Exception as the element:"class=UISwitch" could not be enabled.')                                     

        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _sensingAllDayOn_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _sensingAllDayOff_MotionRule(self):
        """
        Set All Day to Off for the Motion Rule to take place.
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set All Day to Off for the Motion Rule to take place")
        try:
            self.result = None  

            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == False):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Daily Schedule Page is disabled already.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UISwitch", 0, "on", "false")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Daily Schedule Page is in enabled mode.")
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISwitch" could not be disabled.')
                raise Exception('Raising the Exception as the element:"class=UISwitc" could not be disabled.')                 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _sensingAllDayOff_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _sensingAllDayOn_NotificationRule(self):
        """
        Set All Day to On for the Notification Rule to take place.
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set All Day to On for the Notification Rule to take place.")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == True):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All Day sensing is already enabled.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UISwitch", 0, "on", "true")
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("All day sensing is enabled..")
                    self.result = True
                    break                
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISwitch" could not be enabled.')
                raise Exception('Raising the Exception as the element:"class=UISwitch" could not be enabled.')                                     
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _sensingAllDayOn_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _sensingAllDayOff_NotificationRule(self):
        """
        Set All Day to Off for the Notification Rule to take place.
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Set All Day to Off for the Notification Rule to take place")
        try:
            self.result = None  

            self._isAppLaunched()
            assert self.result == True
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            for i in range(5):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == False):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Daily Schedule Page is disabled already.")
                    self.result = True
                    break
                else:
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UISwitch", 0, "on", "false")
                    self.WeMoAppLog.Info("Daily Schedule Page is in enabled mode.")
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISwitch" could not be disabled.')
                raise Exception('Raising the Exception as the element:"class=UISwitc" could not be disabled.')                 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _sensingAllDayOff_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimeInWhenPage_SimpleAndTimerRule(self,hour,minutes):
        """
        Set the time in the Time textbox for the When Page for the Simple Rule and Timer Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        """
        try:
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            timeToBeSet = "%s.%s"%(Hour,Minutes)
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the time-%s in the Time textbox for the When Page for the Simple Rule and Timer Rule."%(timeToBeSet))
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIDatePicker")):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UIDatePicker", 0, "time", timeToBeSet)                       
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_SimpleAndTimerRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimeInWhenPage_MotionRule(self,hour,minutes):
        """
        Set the time in the Time textbox for the When Page for the Motion Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        """
        try:
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            timeToBeSet = "%s.%s"%(Hour,Minutes)
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the time-%s in the Time textbox for the When Page for the Sensor Rule."%(timeToBeSet))
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIDatePicker")):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UIDatePicker", 0, "time", timeToBeSet)                       
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_MotionRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimeInWhenPage_NotificationRule(self,hour,minutes):
        """
        Set the time in the Time textbox for the When Page for the Notification Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        """
        try:
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            timeToBeSet = "%s.%s"%(Hour,Minutes)
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the time-%s in the Time textbox for the When Page for the Notification Rule."%(timeToBeSet))
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Set time")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Set time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Set time" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIDatePicker")):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UIDatePicker", 0, "time", timeToBeSet)                       
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimeInWhenPage_AwayModeRule(self,hour,minutes):
        """
        Set the time in the Time textbox for the When Page for the Away Mode Rule.
        @param hour: The hour when the rule will be applied 
        @type hour: String
        @param minutes: The minute 
        @type minutes: String
        """
        try:
            self.result = None
            Hour = str(hour)
            Minutes = str(minutes)
            timeToBeSet = "%s.%s"%(Hour,Minutes)
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the time-%s in the Time textbox for the When Page for the Away Mode Rule."%(timeToBeSet))
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Set time")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Set time" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Set time" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIDatePicker")):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSetProperty("NATIVE", "class=UIDatePicker", 0, "time", timeToBeSet)                       
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIDatePicker" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimeInWhenPage_AwayModeRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheMessageInMessagePage_NotificationRule(self,message="Something happened"):
        """
        Set the message in the textbox for the Message Page for the Notification Rule.
        @param message: The message which will be used for notification 
        @type message: String
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("The message-%s in the textbox for the Message Page for the Notification Rule."%(message))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Message",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Message" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Message" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UITextView",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("NATIVE", "class=UITextView", 0,message)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UITextView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UITextView" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheMessageInMessagePage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheTimeIntervalForMotionInHowOftenPage_NotificationRule(self,timeInterval):
        """
        Select the Time Interval for the Motion on which the Rule is to be applied in the How Often Page
        @param timeInterval: The time interval after which the motion action will take place.
        @type actionName: String
        """
        TimeIntervalList = ["notify every time","5 min","10 min","15 min","30 min","1 hr","2 hrs","3 hrs","6 hrs","12 hrs","Day"]
        print timeInterval
        try:
            if timeInterval.strip() not in TimeIntervalList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('Please give the right time interval for the Motion. The time interval can  be "notify every time","5 min","10 min","15 min","30 min","1 hr","2 hrs","3 hrs","6 hrs","12 hrs","Once per day / time interval"')
                raise Exception('Please give the right time interval for the Motion. The time interval can  be "notify every time", "5 min","10 min","15 min","30 min","1 hr","2 hrs","3 hrs","6 hrs","12 hrs","Once per day / time interval"')
            self.result = None
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=How Often",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=How Often" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=How Often" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=NOTIFY ME NO MORE THAN EVERY",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=NOTIFY ME NO MORE THAN EVERY" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=NOTIFY ME NO MORE THAN EVERY" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%timeInterval)):
                    self.result = True
                    break
                self.ExperitestClient.swipe("Down", 500)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%timeInterval)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%timeInterval)         
            
            if not (self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=%s"%timeInterval, 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0)):
                time.sleep(self.delay)
                self.ExperitestClient.elementListSelect("", "accessibilityLabel=%s"%timeInterval, 0, True)
                time.sleep(self.delay)
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=%s"%timeInterval, 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                self.result = True
            else:
                assert self.ExperitestClient.isFoundIn("NATIVE", "accessibilityLabel=%s"%timeInterval, 0, "Right", "NATIVE", "accessibilityIdentifier=ic_checkmark_green.png", 0, 0) == True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The time:%s is allready selected for the Notification Rule to apply"%timeInterval)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheTimeIntervalForMotionInHowOftenPage_NotificationRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectTheOffsetForSunriseSunset(self,timeInterval):
        """
        Select the Offset for the Sunrise Sunset in the When Page
        @param timeInterval: The offset for the Sunrise Sunset.
        @type actionName: String
        """
        TimeIntervalList = ["exactly","15 m before","30 m before","45 m before","15 m after","30 m after","45 m after","custom"]
        print timeInterval
        if timeInterval.strip() not in TimeIntervalList:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Warning('Please give the right time interval for the Offset. The time interval can  be "exactly","15 m before","30 m before","45 m before","15 m after","30 m after","45 m after","custom"')
            raise Exception('Please give the right time interval for the Offset. The time interval can  be "exactly","15 m before","30 m before","45 m before","15 m after","30 m after","45 m after","custom"')
        try:
            self.result = None
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
            
            if timeInterval == "15 m after":
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=15 m\nafter") == True
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=15 m\nafter")
                self.result = True
            elif timeInterval == "30 m after":
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=30 m\nafter") == True
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=30 m\nafter")
                self.result = True
            elif timeInterval == "45 m after":
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=45 m\nafter") == True
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=45 m\nafter")
                self.result = True
            else:
                assert self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%timeInterval) == True
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%timeInterval)
                self.result = True       
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectTheOffsetForSunriseSunset() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _clickOnDoneButtonToSetTheTime(self):
        """
        Click on the Done Button to Set the Time.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Done Button to Set the Time")
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Done" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnDoneButtonToSetTheTime() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _confirmChangesToCreateRule(self):
        """
        Click on the Save button to confirm the changes to create a Simple Rule,Timer Rule or Sensor Rule, Notification Rule or Away Mode Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes to create a Simple Rule,Timer Rule or Sensor Rule, Notification Rule or Away Mode Rule")
            
            self._isAppLaunched()
            assert self.result == True 

            self._closeDeviceKeyboard()
            assert self.result == True 
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Save")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Save")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
                
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CONTROL A DEVICE",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Created now.")
                    self.result = True
                    time.sleep(self.delay)
                    break                         
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'ENABLED RULES')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Created now and we see Enabled Rules")
                    self.result = True
                    time.sleep(self.delay)
                    break                         
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'DISABLED RULES')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Created now and we see Disabled Rules")
                    self.result = True
                    time.sleep(self.delay)
                    break                                                 
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'Info')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is saved now and we see Info")
                    self.result = True
                    time.sleep(self.delay)
                    break  
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Existing Auto Off Timer rules will be suspended and disabled.",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Finds a pop up. So Lets give control to the Countdown conflict.")
                    self.result = True
                    time.sleep(self.delay)
                    break  
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Conflict",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Finds a pop up. So Lets give control to the  Rule conflict popup.")
                    self.result = True
                    time.sleep(self.delay)
                    self.RuleConflict = True
                    break
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Duplication",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Finds a pop up-Rule Duplication ")
                    self.result = True
                    time.sleep(self.delay)
                    self.RuleConflict = True
                    break
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Please enter a name 30 characters or less",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Finds a pop up-Please enter a name 30 characters or less ")
                    self.result = True
                    time.sleep(self.delay)
                    self.RuleConflict = True
                    break
                    
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Existing rules will be suspended during Away Mode.",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Finds a pop up-Away Mode and Rules ")
                    self.result = True
                    time.sleep(self.delay)
                    self.RuleConflict = True
                    break
                    
    
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule creation is in progress.")
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The rule creation took more than a minute to save. This is not ideal")
                    self.WeMoAppLog.Error('The rule creation took more than a minute to save. This is not ideal')
                raise Exception('The rule creation took more than a minute to save. This is not ideal')                
        except:
            self.exception_msg = "Failed to Save the Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesToCreateRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelChangesToCreateRule(self):
        """
        Click on the Cancel button to cancel the changes to create a Simple Rule,Timer Rule or Sensor Rule or Notification Rule or Away Mode Rule
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Cancel button to cancel the changes to create a Simple Rule,Timer Rule or Sensor Rule or Notification Rule or Away Mode Rule")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self.exception_msg = "Failed to cancel the changes to create the Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _cancelChangesToCreateRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyAwayModeAndRulesPopUp(self):
        """
        Verify the Away Mode and Rules Pop Up
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Away Mode and Rules Pop Up")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","text=Existing rules will be suspended during Away Mode.",0):
                    self.result = True
                    break              
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=_UIModalItemAlertContentView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=_UIModalItemAlertContentView" could not be found.')
        except:
            self.exception_msg = "Failed to Verify the Away Mode Rule Pop up saying 'Exising Rules will be suspended dueing Away Mode.'"
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=OK")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=OK")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyAwayModeAndRulesPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnOKOnAwayModeAndRulesPopUp(self):
        """
        Verify the Away Mode and Rules Pop Up
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Away Mode and Rules Pop Up")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","text=Existing rules will be suspended during Away Mode.",0):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=OK")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=_UIModalItemAlertContentView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=_UIModalItemAlertContentView" could not be found.')
        except:
            self.exception_msg = "Failed to Identify/Click on OK of Away Mode Pop up which says Existing Rule will be suspended."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=OK")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=OK")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._isAppLaunched()
            if self.result == True:
                self._closeApplication()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnOKOnAwayModeAndRulesPopUp() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnAddIconToCreateANewRule(self):
        """
        Clicking on the Add icon to create a new rule.
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Add icon to create a new rule.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Add a new rule")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Add a new rule")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Add a new rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Add a new rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnAddIconToCreateANewRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyAndClickOnAddIconOnRulesPage(self):
        """
        Verify whether the  Add icon exist on the Rules Pages.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the  Add icon exist on the Rules Pages.")
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(3):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Add a new rule")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Add a new rule")
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=CONTROL A DEVICE")):
                    break
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The element:"accessibilityLabel=Add a new rule" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnAddIconToCreateANewRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyRuleCreated(self,ruleName):
        """
        Verify that the rule has been created
        @param ruleName: The name of the Rule created
        @type ruleName: String  
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify that the rule:%s has been created."%ruleName)
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Add a new rule")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The element:"accessibilityLabel=Add a new rule" could not be found.')
            for i in range(10):
                self.ExperitestClient.swipe2("Down", 500, 0)
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
        except:
            self.exception_msg = "Failed to Identify if the Rule is created."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyRuleCreated() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _goToTheRulesDetailPageOfARule(self,ruleName):
        """
        Clicking on the Rule Name to launch the Rule Name's Page
        @param ruleName: The name of the Rule created
        @type ruleName: String  
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Launching Rule Name:%s to see the details of the Rule."%ruleName)
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(2):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=%s"%ruleName)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
                
            for i in range(2):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Info",0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Summary",0):
                    if self.WeMoAppLog is not None:    
                        self.WeMoAppLog.Info("The Rule Info page is loaded")
                    time.sleep(self.delay)
                    self.result = True
                    break                                                                        
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is not Deleted. Deletion in Progress.")
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Deletion/Saving process took a while. More than 1 minute which is not ideal")
                    self.WeMoAppLog.Error('The Deletion/Saving process took a while. More than 1 minute which is not ideal')
                raise Exception('The Deletion/Saving process took a while. More than 1 minute which is not ideal')                 
        except:
            self.exception_msg = "Failed to go to the Rule Detail Page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            # self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:    
                self.WeMoAppLog.Error("The method _clickOnRuleNameToLaunchTheRuleNamePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _enableTheRule(self,ruleName):
        """
        Clicking on the Enable Rule to enable the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Enable Rule to enable the rule:%s"%(ruleName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
            
            ##for i in range(10):
            ##    if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)):
            ##        self.result = True
            ##        break
            ##    time.sleep(self.delay)
            ##else:
            ##    if self.WeMoAppLog is not None:
            ##        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
            ##    raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Enable")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Enable")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Enable" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Enable" could not be found.')
                
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Disable",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Enabled now.")
                    time.sleep(self.delay)
                    break
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Existing Countdown Timer rules will be suspended and disabled.",0):
                    self.WeMoAppLog.Info("Existing Countdown Timer rules will be suspended pop up displayed., click on OK")
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Existing Auto Off Timer rules will be suspended and disabled.",0):
                    self.WeMoAppLog.Info("Existing Countdown Timer rules will be suspended pop up displayed., click on OK")
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break    
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Conflict",0):
                    self.WeMoAppLog.Info("The 'Rule Conflict' pop up displayed., click on OK")
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
                elif self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Rule Duplication",0):
                    self.WeMoAppLog.Info("The Rule Duplication pop up displayed., click on OK")
                    self.ExperitestClient.click("NATIVE","accessibilityLabel=OK",0,1)
                    self.result = True
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is in the process. Getting Enabled")
                    self.result = True
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The rule enable process takes more than a minute. This is not ideal.")
                    self.WeMoAppLog.Error('The rule enable process takes more than a minute. This is not ideal.')
                raise Exception('The rule enable process takes more than a minute. This is not ideal.')   
        except:
            self.exception_msg = "Failed to Enable the Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enableTheRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _disableTheRule(self,ruleName):
        """
        Clicking on the Disable Rule to disable the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Disable Rule to disable the rule:%s"%(ruleName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
            
            ##for i in range(10):
            ##    if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)):
            ##        self.result = True
            ##        break
            ##    time.sleep(self.delay)
            ##else:
            ##    if self.WeMoAppLog is not None:
            ##        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
            ##    raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
            ##
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Disable")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Disable")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Disable" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Disable" could not be found.')
                
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Enable",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule Disabled now.")
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is not disabled yet..")
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The saving process took a while. More than 1 minute which is not ideal")
                    self.WeMoAppLog.Error('The loading process took a while. More than 1 minute which is not ideal')
                raise Exception('The loading process took a while. More than 1 minute which is not ideal')
        except:
            self.exception_msg = "Failed to disable the Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _disableTheRule() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyTheRuleIsDeleted(self,ruleName):
        """
        Verify the Rule is Deleted
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.result = None
            self.exception_msg = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Rule:%s is Deleted"%(ruleName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if ((self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Add a new rule") == True) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)) == False):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule:%s is deleted from the Rule Page"%ruleName)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Schedule") == True) and (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Motion Detector",0) == True):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule:%s is deleted from the Rule Page"%ruleName)
                    self.result = True
                    break
                else:
                    if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName,0):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info('Seems like deletion in progress, lets wait for few more seconds.')
                        time.sleep(self.delay*4)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Deletion process took a while. More than 1 minute which is not ideal")
                    self.WeMoAppLog.Error('The Deletion/loading process took a while. More than 1 minute which is not ideal')
                raise Exception('The loading/Deletion process took a while. More than 1 minute which is not ideal')                 
        except:
            self.exception_msg = "Failed to confirm that the Rule is delete."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheRuleIsDeleted() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _deleteTheRuleInRulesDetailPage(self,ruleName):
        """
        Clicking on the Delete Rule to delete the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Delete Rule to delete the rule:%s"%(ruleName))
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
            
            self.ExperitestClient.swipe2("Down", 500, 500)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Delete Rule")):
                    self.ExperitestClient.swipe2("Down", 500, 500)					
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Delete Rule")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Delete Rule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Delete Rule" could not be found.')
                
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=CONTROL A DEVICE",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now.")
                    self.result = True
                    break                         
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'ENABLED RULES')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                    self.result = True
                    break                         
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'DISABLED RULES')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                    self.result = True
                    break                                                 
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'Info')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is Deleted now and we see Enabled Rules")
                        time.sleep(self.delay)
                    self.result = True
                    break                                                                     
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Rule is not Deleted. Deletion in Progress.")
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Deletion/Saving process took a while. More than 1 minute which is not ideal")
                    self.WeMoAppLog.Error('The Deletion/Saving process took a while. More than 1 minute which is not ideal')
                raise Exception('The Deletion/Saving process took a while. More than 1 minute which is not ideal') 
                
        except:
            self.exception_msg = "Failed to delete the rule in Rule Detail Page."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _deleteTheRuleInRulesDetailPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _editTheRule(self,ruleName):
        """
        Clicking on the Edit Rule to edit the rule
        @param ruleName:The name of the Rule created
        @type ruleName:String
        """
        try:
            self.result = None
            self.exception_msg = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Edit Rule to edit the rule:%s"%(ruleName))
            
            self._isAppLaunched()
            assert self.result == True
           
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Info")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Info" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%ruleName)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%ruleName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Edit")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Edit")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Edit" could not be found.')
                
            for i in range(10):
                #if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'Edit')]",0):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[cmd:matches(@accessibilityLabel,'Edit.*Rule')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Edit Rule page is visible now")
                    self.result = True
                    break
                elif self.ExperitestClient.isElementFound("NATIVE","xpath=//*[cmd:matches(@accessibilityLabel,'Save.*')]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Edit Rule page is visible now")
                    self.result = True
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Edit Rule page is not visible now.")
                        #break
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The loading process took a while. More than 1 minute which is not ideal")
                    self.WeMoAppLog.Error('The loading process took a while. More than 1 minute which is not ideal')
                raise Exception('The loading process took a while. More than 1 minute which is not ideal')  
                
        except:
            self.exception_msg = "Failed to Edit the Rule."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _editTheRule() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectIndividualDay(self,day):
        """
        Select the individual day in the When page of the Timer or Motion Rule.
        """
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True
            
            DayList = {"Monday":"M","Tuesday":"T","Wednesday":"W","Thursday":"Th","Friday":"F","Saturday":"Sa","Sunday":"Su"}
            if day.strip() not in DayList:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Please give the right day. The day can  be "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"')
                raise Exception('Please give the right time. The time can  be "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"')
            
            self.result = None  
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Select the individual day:%s in the When page of the Timer or Motion Rule."%day)
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=When")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=When" could not be found.')
                
            YOffset_Of_Days = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@class='BELMultiSegmentControl']", 0, "y"))
            
            for day_to_be_unchecked,day_accessibilityLabel in DayList.items():
                if day != day_to_be_unchecked:
                    self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='%s']"%day_accessibilityLabel,0,1)
                    
            self.result = True    
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectIndividualDay() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _selectMultipleDays(self,*days):
        """
        Select the individual day in the When page of the Timer or Motion Rule.
        """
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True
            
            DayList = {"Monday":"M","Tuesday":"T","Wednesday":"W","Thursday":"Th","Friday":"F","Saturday":"Sa","Sunday":"Su"}
    
            if type(days[0]) is list:
                for day in days[0]:
                    if day in DayList:
                        DayList.pop(day,None)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The %s should be a part of selected day"%day)
            else:
                for day in days:
                    if day in DayList:
                        DayList.pop(day,None)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The %s should be a part of selected day"%day)
    
            YOffset_Of_Days = int(self.ExperitestClient.elementGetProperty("NATIVE", "xpath=//*[@class='BELMultiSegmentControl']", 0, "y"))
                    
            for day_to_be_unchecked,day_accessibilityLabel in DayList.items():
                self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='%s']"%day_accessibilityLabel,0,1)
                        
            self.result = True    
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "text=Done",1)):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "text=Done",1,1)
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectIndividualDay() encountered and Error")
                self.WeMoAppLog.LogException()

    ########################################################
    
    def _verifyoptionsGreyedWhenDailyScheduleisOff(self):
        """
        Verify the Schedule page is greyed out
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify the Schedule page is greyed out.")
            
            ColorofDays = self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=Save", "textColor")

            if "0x777777" in ColorofDays:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Schedule page is inactive")
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The Schedule page is active")            
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyoptionsGreyedWhenDailyScheduleisOff() encountered and Error")
                self.WeMoAppLog.LogException()    
    
    #####################
    #IFTTT Tab Functions#
    #####################
    def _clickOnConnectToIFTTT(self):
        """
        Clicking on the IFTTT Tab
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the IFTTT Tab")
            time.sleep(self.delay)
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Connect to IFTTT")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Connect to IFTTT")
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Generate IFTTT PIN")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Generate IFTTT PIN")
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Generate IFTTT Pin")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Generate IFTTT Pin")
                    time.sleep(self.delay)
                    self.result = True
                    break                    
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Connect to IFTTT" or "accessibilityLabel=Generate IFTTT PIN" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Connect to IFTTT" or "accessibilityLabel=Generate IFTTT PIN" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=IFTTT")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnConnectToIFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _getTheWemoActivationPin_IFTTT(self):
        """
        Getting the Wemo Activation Pin for the Wemo to create the Recipe in the IFTTT Page
        """
        try:
            self.result = None
            self.WemoActivationPin = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Getting the Wemo Activation Pin for the Wemo to create the Recipe in the IFTTT Tab")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=IFTTT")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
            
            IFTTT_TEXT = self._getText("NATIVE").split("\n")
            for i in range(len(IFTTT_TEXT)):
                if IFTTT_TEXT[i].find("PIN:")!=-1:
                    self.WemoActivationPin = IFTTT_TEXT[i+1].strip()
                    break
            assert self.WemoActivationPin != None
        except:
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClients.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            self.WemoActivationPin = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getTheWemoActivationPin_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnManageMyWemoChannels_IFTTT(self):
        """
        Clicking on the Manage My WeMo Channels button on the IFTTT page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Manage My WeMo Channels button on the IFTTT page")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=IFTTT")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "text=Manage my WeMo Channels")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:text=Manage my WeMo Channels")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Manage my WeMo Channels" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Manage my WeMo Channels" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnManageMyWemoChannels_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnMoreInformationOnIFTTTLink_IFTTT(self):
        """
        Clicking on the link-More Information About IFTTT on the IFTTT Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the link-More Information About IFTTT on the IFTTT Page")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=IFTTT")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "text=More information on IFTTT")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "text=More information on IFTTT")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=More information on IFTTT" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=More information on IFTTT" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnMoreInformationOnIFTTTLink_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnGenerateANewPin_IFTTT(self):
        """
        Clicking on Generate a New Pin on the IFTTT Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on Generate a New Pin on the IFTTT Page")
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=IFTTT")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=IFTTT" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=GENERATE NEW PIN")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=GENERATE NEW PIN")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=GENERATE NEW PIN" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=GENERATE NEW PIN" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnGenerateANewPin_IFTTT() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _launchInstrumentedBrowser(self):
        """
        Launching the Browser which is instrumented
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Launching the Browser which is instrumented")
            self.result = None
            self.ExperitestClient.launch("search:Browser",True,False)
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchInstrumentedBrowser() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _closeInstrumentedBrowser(self):
        """
        Close the Browser which is instrumented
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Close the Browser which is instrumented")
            self.result = None
            self.ExperitestClient.applicationClearData("com.experitest.Browser")
            time.sleep(self.delay)
            self.ExperitestClient.applicationClose("com.experitest.Browser")
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _closeInstrumentedBrowser() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _launchIFTTTLoginPage(self):
        """
        Launching the IFTTT Login Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Launching the IFTTT Login Page")
                self.WeMoAppLog.Info("Launching the IFTTT Login Page:http://ifttt.com/login.")
                # self._launchInstrumentedBrowser()
                # assert self.result == True
            for i in range(2):
                if(self.ExperitestClient.launch("https://ifttt.com/login", True, False)):
                    time.sleep(self.delay)
                    break;
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchIFTTTLoginPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _signOutIFTTTWebPage(self):
        """
        Sign Out of the IFTTT Login Page
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Signing out of the IFTTT Page")
            self.result = None
            self.ExperitestClient.launch("https://ifttt.com/logout", True, True)
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method signOutIFTTTWebPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _loginToIFTTTPage(self,username,password):
        """
        Logging in the IFTTT Page
        @param username:The username of the User
        @type username:String
        @param password:The password associated with the Username
        @type password:String
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Logging into the IFTTT with username:%s and password:%s."%(username,password))
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=login",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("WEB", "id=login", 0, username)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=login" could not be found.')
                raise Exception('Raising the Exception as the element:"id=login" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=password",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("WEB", "id=password", 0, password)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=password" could not be found.')
                raise Exception('Raising the Exception as the element:"id=password" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=password",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "id=password", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=password" could not be found.')
                raise Exception('Raising the Exception as the element:"id=password" could not be found.')
            self._clickOnKeypadGoButton()
            time.sleep(self.delay)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _loginToIFTTTPage() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _launchManageWemoChannelActivationPage(self):
        """
        Launch the Manage My Wemo Cahnnel Page
        """
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Launch the Manage My Wemo Cahnnel Page:https://ifttt.com/channels/activation_list?channel_set=wemo&is_web_view=1.")
            self.result = None
            self.ExperitestClient.launch("https://ifttt.com/channels/activation_list?channel_set=wemo&is_web_view=1", True, False)
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchManageWemoChannelActivationPage() encountered and Error")
                self.WeMoAppLog.LogException()
               
    def _deactivateWeMoChannels(self,device_type="Switch"):
        """
            Deactivate the WeMo Channel
        """
        try:
            IFTTT_Channels = {
                'Motion':'https://ifttt.com/wemo_motion',
                'Insight':'https://ifttt.com/wemo_insight_switch',
                'Switch':'https://ifttt.com/wemo_switch',
                'Light':'https://ifttt.com/wemo_light_switch',
                'Maker':'https://ifttt.com/wemo_maker',
                'DateTime':'https://ifttt.com/date_and_time',
                'Email':'https://ifttt.com/email'
            }
            self.ExperitestClient.launch("%s"%IFTTT_Channels[device_type],True,False)
            time.sleep(self.delay)
            
            trials = 0
            
            for i in range(5):
                self.ExperitestClient.swipe2("Down",500,500)
                time.sleep(self.delay)
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='https://ifttt.com']/../../..//*[@text='OK']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='https://ifttt.com']/../../..//*[@text='OK']",0,1)
                    time.sleep(self.delay)
                elif self.ExperitestClient.isElementFound("WEB","text=Deactivate",0):
                    self.ExperitestClient.click("WEB","text=Deactivate",0,1)
                    time.sleep(self.delay)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='https://ifttt.com']/../../..//*[@text='OK']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='https://ifttt.com']/../../..//*[@text='OK']",0,1)
                        time.sleep(self.delay)
                elif self.ExperitestClient.isElementFound("WEB","text=Disconnect",0):
                    self.ExperitestClient.click("WEB","text=Disconnect",0,1)
                    time.sleep(self.delay)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='https://ifttt.com']/../../..//*[@text='OK']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='https://ifttt.com']/../../..//*[@text='OK']",0,1)
                        time.sleep(self.delay)
                elif self.ExperitestClient.isElementFound("WEB","text=Activate",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The WeMo devices: %s is not activated."%device_type)
                    self.result = True                        
                    break
                elif self.ExperitestClient.isElementFound("WEB","text=Connect",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The WeMo devices: %s is not activated."%device_type)
                    self.result = True                        
                    break

                else:
                    if trials > 3:
                        self.ExperitestClient.launch("%s"%IFTTT_Channels[device_type],True,False)
                        time.sleep(self.delay)
                        trials = 0
                    else:
                        trials = trials +1
                    
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Deactivate" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Deactivate" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchManageWemoChannelActivationPage() encountered and Error")
                self.WeMoAppLog.LogException()
        finally:
            time.sleep(self.delay)

    def _verifyTheChannelisDeactivatedInWeMoApp(self,device_type):
        """
        Verify the WeMo Channel is not active
        """
        try:
            Device_Type = {
                'Motion':'WeMo Motion',
                'Switch':'WeMo Switch',
                'Insight':'WeMo Insight Switch',
                'Light':'WeMo Insight Switch'
            }
            
            if device_type in Device_Type:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("The device tyoe:%s is a part of the Expected Device type"%device_type)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Unexpected device type')
                raise Exception('Unexpected device type.')                
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("WEB","text=Choose a channel",0):
                    if self.ExperitestClient.isElementFound("WEB","xpath=//*[@alt='%s']/../..//*[contains(@css,'gray')]"%Device_Type[device_type],0):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The device tyoe:%s is a part of the Expected Device type"%device_type)
                        Device_Active_Status = 'Inactive'
                        self.result = True
                        break
                    elif self.ExperitestClient.isElementFound("WEB","xpath=//*[@text='%s']/../..//*[@text='Edit']"%Device_Type[device_type],0):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The device tyoe:%s is a part of the Expected Device type"%device_type)
                        Device_Active_Status = 'Active'                        
                        self.result = True                        
                        break
                    else:
                        self.ExperitestClient.swipe2("Down",500,500)
                        time.sleep(self.delay)
                else:
                    self.ExperitestClient.swipe2("Up",500,500)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Device is still active.')
                raise Exception('Device is still active.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._clickOnCancelButtonToCancelChangesInWeMoApp()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._goToTheDevicesPage()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchManageWemoChannelActivationPage() encountered and Error")
                self.WeMoAppLog.LogException() 

    def _chooseAndActivateTheChannel(self,WemoActivationPin,type_of_channel="Switch"):
        """
        Activate the Channel
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Paste the pin %s to activate the %s channel "%(WemoActivationPin,type_of_channel))
                
            Type = {
                'Mail':'channel_6',
                'Time':'channel_3',
                'Switch':'channel_45',
                'Motion':'channel_46',
                'Insight':'channel_748975256',
                'Light':'channel_85',
                'Maker':'channel_267597877'
            }
            
            if type_of_channel in Type:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Proceed activating the channel %s"%(type_of_channel))
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Un-expected channel.')
                raise Exception('Un-expected channel.')
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=%s"%Type[type_of_channel])):
                    time.sleep(self.delay)
                    print self.ExperitestClient.elementGetText("WEB", "id=%s"%Type[type_of_channel],0).split("\n")
                    if "WeMo Switch" not in self.ExperitestClient.elementGetText("WEB", "id=%s"%Type[type_of_channel],0).split("\n") == True:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error("The text:%s could not be found"%type_of_channel)
                        self._closeInstrumentedBrowser()
                        self.result = False
                        return
                    self.ExperitestClient.click("WEB", "nclick:id=%s"%Type[type_of_channel])
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Type[type_of_channel])
                raise Exception('Raising the Exception as the element:"id=%s" could not be found.'%Type[type_of_channel])
                
            Field_Attributes = {
                'Switch':'live_channel_live_channel_fields_attributes_4_value',
                'Insight':'live_channel_live_channel_fields_attributes_0_value',
                'Motion':'live_channel_live_channel_fields_attributes_3_value',
                'Light':'live_channel_live_channel_fields_attributes_4_value',
                'Email':'live_channel_live_channel_fields_attributes_0_value'
            }

            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=%s"%Field_Attributes[type_of_channel],0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("WEB", "id=%s"%Field_Attributes[type_of_channel],0,WemoActivationPin.strip())
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Field_Attributes[type_of_channel])
                raise Exception('Raising the Exception as the element:"id=%s" could not be found.')
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "name=commit",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:name=commit",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"name=commit" could not be found.')
                raise Exception('Raising the Exception as the element:"name=commit" could not be found.')
            
            Activation_Message = {
                'Switch':'WeMo Switch connected!',
                'Insight':'WeMo Insight Switch connected!',
                'Light':'WeMo Light Switch connected!',
                'Motion':'WeMo Motion connected!'
            }
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%Activation_Message[type_of_channel],0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%Activation_Message[type_of_channel])
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%Activation_Message[type_of_channel])
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Done",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:text=Done",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Done" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Done" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False  
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseAndActivateTheChannel() encountered and Error")
                self.WeMoAppLog.LogException()
                
        finally:
            time.sleep(self.delay)
            
    def _chooseAndActivateTheChannel_withInactivePin(self,WemoActivationPin,type_of_channel="Switch"):
        """
        Activate the Channel
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Paste the pin %s to activate the %s channel "%(WemoActivationPin,type_of_channel))
                
            Type = {
                'Mail':'channel_6',
                'Time':'channel_3',
                'Switch':'channel_45',
                'Motion':'channel_46',
                'Insight':'channel_748975256',
                'Light':'channel_85',
                'Maker':'channel_267597877'
            }
            
            if type_of_channel in Type:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Proceed activating the channel %s"%(type_of_channel))
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Un-expected channel.')
                raise Exception('Un-expected channel.')
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=%s"%Type[type_of_channel])):
                    time.sleep(self.delay)
                    print self.ExperitestClient.elementGetText("WEB", "id=%s"%Type[type_of_channel],0).split("\n")
                    if "WeMo Switch" not in self.ExperitestClient.elementGetText("WEB", "id=%s"%Type[type_of_channel],0).split("\n") == True:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error("The text:%s could not be found"%type_of_channel)
                        self._closeInstrumentedBrowser()
                        self.result = False
                        return
                    self.ExperitestClient.click("WEB", "nclick:id=%s"%Type[type_of_channel])
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Type[type_of_channel])
                raise Exception('Raising the Exception as the element:"id=%s" could not be found.'%Type[type_of_channel])
                
            Field_Attributes = {
                'Switch':'live_channel_live_channel_fields_attributes_4_value',
                'Insight':'live_channel_live_channel_fields_attributes_0_value',
                'Motion':'live_channel_live_channel_fields_attributes_3_value',
                'Light':'live_channel_live_channel_fields_attributes_4_value',
                'Email':'live_channel_live_channel_fields_attributes_0_value'
            }

            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=%s"%Field_Attributes[type_of_channel],0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.elementSendText("WEB", "id=%s"%Field_Attributes[type_of_channel],0,WemoActivationPin.strip())
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=%s" could not be found.'%Field_Attributes[type_of_channel])
                raise Exception('Raising the Exception as the element:"id=%s" could not be found.')
    
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "name=commit",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:name=commit",0,1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"name=commit" could not be found.')
                raise Exception('Raising the Exception as the element:"name=commit" could not be found.')
            
            Activation_Message = {
                'Switch':'Not a valid Wemo pin, try again or get another pin.',
                'Insight':'Not a valid Wemo pin, try again or get another pin.',
                'Light':'Not a valid Wemo pin, try again or get another pin.',
                'Motion':'Not a valid Wemo pin, try again or get another pin.',
                'Maker':'Not a valid Wemo pin, try again or get another pin.'
            }
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=%s"%Activation_Message[type_of_channel],0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" could not be found.'%Activation_Message[type_of_channel])
                raise Exception('Raising the Exception as the element:"text=%s" could not be found.'%Activation_Message[type_of_channel])           
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False  
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseAndActivateTheChannel_withInactivePin() encountered and Error")
                self.WeMoAppLog.LogException()
                
        finally:
            time.sleep(self.delay)
                    
    def _clickingOnTheManageRecipeButton(self):
        """
        Clicking on the Manage Recipe button on Manage My Wemo Channel Page for IFTTT
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on the Manage Recipe button on Manage My Wemo Channel Page for IFTTT")
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Manage Recipes")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:text=Manage Recipes")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Manage Recipes" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Manage Recipes" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickingOnTheManageRecipeButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createARecipe(self):
        """
        Create A Recipe by launching the Create A Recipe Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Create A Recipe by launching the Create A Recipe Page.")
                self.WeMoAppLog.Info("Launch the Create A Recipe Page:https://ifttt.com/create.")
            self.result = None
            for i in range(5):
                if(self.ExperitestClient.launch("https://ifttt.com/create", True, False)):
                    time.sleep(self.delay)
                    self.result = True
                if self.ExperitestClient.isElementFound("WEB","text=Create a Recipe",0):
                    break;
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnCreateARecipeButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createIFTTTRecipeByClickingOnThis(self):
        """
        Create A Recipe by clicking on the "this" link
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info('Create A Recipe by clicking on the "this" link')
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Create a Recipe",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Create a Recipe" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Create a Recipe" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=this",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "text=this", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=ifthenthat" could not be found.')
                raise Exception('Raising the Exception as the element:"text=ifthenthat" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createIFTTTRecipeByClickingOnThis() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createIFTTTRecipeByClickingOnThat(self):
        """
        Create A Recipe by clicking on the "that" link
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info('Create A Recipe by clicking on the "this" link')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=that",1)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "text=that", 1, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=that" could not be found.')
                raise Exception('Raising the Exception as the element:"text=that" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createIFTTTRecipeByClickingOnThis() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _chooseATriggerChannel(self, WeMoDeviceType="Switch"):
        """
        Choose a Trigger Channel
        @param WeMoDeviceType: The WeMo Device<Switch|Sensor>
        @type WeMoDeviceType: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Choose a Trigger Channel for a WeMo Device:%s for creating the IFTTT Recipe."%WeMoDeviceType)

            Device_Channel = {
                    'Switch':'channel_45',
                    'Insight':'channel_748975256',
                    'Light':'channel_85',
                    'Motion':'channel_46',
                    'Mail':'channel_6',
                    'Time':'channel_3'
            }
        
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=ind_t_%s"%Device_Channel[WeMoDeviceType],0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:id=ind_t_%s"%Device_Channel[WeMoDeviceType], 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_t_%s" could not be found.'%Device_Channel[WeMoDeviceType])
                raise Exception('Raising the Exception as the element:"id=ind_t_%s" could not be found.'%Device_Channel[WeMoDeviceType])
                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseATriggerChannel() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _chooseATrigger(self, triggerName="on",WeMoDeviceType="Switch"):
        """
        Choose a trigger for the trigger channel selected
        @param triggerName: The trigger name for the trigger channel selected. For Switch-"on","off". For Sensor-"motion"
        @type triggerName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Choosing a Trigger:%s for WeMo Device:%s for creating the  IFTTT Recipe."%(triggerName,WeMoDeviceType))
            if WeMoDeviceType == "Switch":
                if not ((triggerName=="on") or (triggerName=="off")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_126",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_126", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_126" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_126" could not be found.')
                if triggerName == "off":
                    for i in range(10):
                        self.ExperitestClient.swipe2("Down",500,500)
                        if(self.ExperitestClient.isElementFound("WEB", "text=Switched off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Switched off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_127" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_127" could not be found.')
            
            if WeMoDeviceType == "Sensor":
                if not (triggerName=="motion"):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "motion":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_125",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_125", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_125" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_125" could not be found.')
            
            if WeMoDeviceType == "Insight":
                if not ((triggerName=="on") or (triggerName=="off") or (triggerName=="standby")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_414736604",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_414736604", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_414736604" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_414736604" could not be found.')
                if triggerName == "off":
                    self.ExperitestClient.swipe2("Down",500,500)
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Switched off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Switched off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_379194748" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_379194748" could not be found.')
                if triggerName == "standby":
                    self.ExperitestClient.swipe2("Down",0,500)
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_1571456926",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_1571456926", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_1571456926" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_1571456926" could not be found.')
            if WeMoDeviceType == "Light Switch":
                if not ((triggerName=="on") or (triggerName=="off")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(triggerName,WeMoDeviceType))
                if triggerName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_363",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_363", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_363" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_363" could not be found.')
                if triggerName == "off":
                    self.ExperitestClient.swipe2("Down",500,500)
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Switched off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Switched off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_364" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_364" could not be found.')    
            if WeMoDeviceType == "Mail":
                if not ((triggerName=="taggedEmail") or (triggerName=="anyEmail")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Unexpected Trigger')
                    raise Exception('Unexpected Trigger')
                if triggerName == "taggedEmail":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_50",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_50", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_50" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_50" could not be found.')
                if triggerName == "anyEmail":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=trigger_25",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=trigger_25", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_25" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_25" could not be found.')    

            if WeMoDeviceType == "Time":
                if not ((triggerName=="Every day at") or (triggerName=="Every hour at")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Unexpected Trigger')
                    raise Exception('Unexpected Trigger')
                if triggerName == "Every day at":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Every day at",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Every day at", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=trigger_3" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=trigger_3" could not be found.')
                if triggerName == "Every hour at":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Every hour at",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Every hour at", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"text=Every hour at" could not be found.')
                        raise Exception('Raising the Exception as the element:"text=Every hour at" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseATrigger() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _launchTheEmailApp(self):
        """
        Launch the Email App
        """
        try:
            self.result = None
            
            trial = 0
            self.ExperitestClient.launch("search:Mail", True, False)
            time.sleep(self.delay)
            
            for i in range(10):                
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Inbox']",0) and self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='VIP']",0) and self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Drafts']",0)):
                    break
                    self.result = True
                else:
                    if trial > 3:
                        self.ExperitestClient.launch("search:Mail", True, False)
                        time.sleep(self.delay)
                        trial = 0
                    else:
                        trial = trial + 1
                    self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Back']",0)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Mail" could not be found.')
                raise Exception('Raising the Exception as the element:"Mail" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _launchTheEmailApp() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _clickOnInboxandReadEmails(self):
        """
        Go To Inbox to Read Emails
        """
        try:
            self.result = None
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIANavigationBar']/..//*[@text='Inbox']",0):
                    self.result = True
                    break
            
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIAStaticText']/..//*[@text='Mailboxes']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Inbox']",0,1)
                    time.sleep(self.delay)
                else:
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Mail" could not be found.')
                raise Exception('Raising the Exception as the element:"Mail" could not be found.')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnInboxandReadEmails() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _deleteAllEmails(self):
        try:
            self.result = None
            print self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='No Mail']",0)
                
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='No Mail']",0)==False or self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Archive']",0)):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@class='UIATableCell']",0,1)
                    
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Archive']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Archive']",0,1)
                else:
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Mail" could not be found.')
                raise Exception('Raising the Exception as the element:"Mail" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _deleteAllEmails() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _verifyTheEmailContent(self,Message,WeMoFriendlyName):
        """
        Choose a Wemo to complete the Trigger Field
        @param Message: The Text Message 
        @type Message: String 
        """
        try:
            self.result = None
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@accessibilityLabel,'%s') and contains(@text,'%s')] "%(Message,WeMoFriendlyName),0):
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,500)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"Mail" could not be found.')
                raise Exception('Raising the Exception as the element:"Mail" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheEmailContent() encountered and Error")
                self.WeMoAppLog.LogException()
        
    
    def _chooseAWemoToCompleteTriggerField(self, WemoFriendlyName):
        """
        Choose a Wemo to complete the Trigger Field
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Choosing a Wemo:%s to complete the Trigger Field."%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_live_action_attributes_live_action_fields_attributes_0_value",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_action_attributes_live_action_fields_attributes_0_value", WemoFriendlyName)
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif (self.ExperitestClient.isElementFound("WEB", "id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value", WemoFriendlyName)
                    time.sleep(self.delay)
                    self.result = True
                    break
                
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_string_value" could not be found.')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseAWemoToCompleteTriggerField() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _setTheTimeForTriggering(self,hours,minutes,Offset_from_currenttime=900):
        """
            Set the IFTTT time
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the trigger to turn on the devices.")
    
            Time_Parsed_In_Seconds = int(hours) * 3600 + int(minutes) *60
            Time_Parsed_In_Seconds_Nearest_Offset = int(Time_Parsed_In_Seconds)%900
            
            print Time_Parsed_In_Seconds,Time_Parsed_In_Seconds_Nearest_Offset,Offset_from_currenttime
            
            if int(Time_Parsed_In_Seconds_Nearest_Offset) < 600:
                Time_to_be_added =  int(Offset_from_currenttime) + int(Time_Parsed_In_Seconds) - int(Time_Parsed_In_Seconds_Nearest_Offset)
            elif int(Time_Parsed_In_Seconds_Nearest_Offset) >= 600:
                Time_to_be_added = int(Offset_from_currenttime) + int(Time_Parsed_In_Seconds) - int(Time_Parsed_In_Seconds_Nearest_Offset) + 900
            else:
                Time_to_be_added = int(Time_Parsed_In_Seconds_Nearest_Offset) + int(Time_Parsed_In_Seconds)
            
            print Time_to_be_added
            
            hrs = int(Time_to_be_added)/3600
            left_over_seconds = int(Time_to_be_added) - hrs*3600
            min = int(left_over_seconds)/60
        
            if hrs > 12 and hrs < 24:
                hrs = hrs - 12
                AM_PM = "PM"
            elif hrs == 24:
                hrs = hrs - 12
                AM_PM = "AM"
            else:
                AM_PM = "AM"
            
            hrs = "%02d"%hrs
        
            if self.ExperitestClient.isElementFound("WEB","id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_4i",0):
                self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_4i", "%s %s"%(hrs,AM_PM))
                
            if self.ExperitestClient.isElementFound("WEB","id=statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_4i",0):
                self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_trigger_attributes_live_trigger_fields_attributes_0_datetime_value_5i", "%s"%min)
                
            
            self.Time_Set_On_Clock = "%s:%s %s"%(hrs,min,AM_PM)
            
            if int(hrs) == 12:
                hours_24 = 12
            elif AM_PM == "PM":
                hours_24 = int(hrs) + 12
            else:
                hours_24 = hrs
             
                
            self.Time_Set_On_24_Clock = "%s:%s"%(hours_24,min)
            print self.Time_Set_On_24_Clock,self.Time_Set_On_Clock
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheTimeForTriggering() encountered and Error")
                self.WeMoAppLog.LogException()    
                

    def _createTriggerByClickingTheCreateTriggerButton(self):
        """
        Click on the Create Trigger Button.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Create Trigger Button.")
                
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=validate_trigger_btn",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:id=validate_trigger_btn", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=validate_trigger_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=validate_trigger_btn" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createTriggerByClickingTheCreateTriggerButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _chooseActionChannel(self, WeMoDeviceType="Switch"):
        """
        Choose a Action Channel
        @param WeMoDeviceType: The WeMo Device<Switch>
        @type WeMoDeviceType: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Choose a Action Channel for a WeMo Device:%s for creating the IFTTT Recipe."%WeMoDeviceType)   
            
            if WeMoDeviceType == "Switch":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_45",0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_45", 0, 1)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_45" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_45" could not be found.')
                    
            if WeMoDeviceType == "Email":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "xpath=//*[@id='ind_a_channel_6']",0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("WEB", "xpath=//*[@id='ind_a_channel_6']", 0, 1)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=channel_6" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=channel_6" could not be found.')
                    
            if WeMoDeviceType == "Insight":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_748975256",0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_748975256", 0, 1)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_748975256" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_748975256" could not be found.')
            if WeMoDeviceType == "Light Switch":
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=ind_a_channel_85",0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("WEB", "nclick:id=ind_a_channel_85", 0, 1)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=ind_a_channel_85" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=ind_a_channel_85" could not be found.')        
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseActionChannel() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _chooseAction(self, actionName="on",WeMoDeviceType="Switch"):
        """
        Choose a Action for the Action channel selected
        @param actionName: The action name for the Action channel selected. For Switch-"on","off,onthenoff,offthenon,toggle"
        @type actionName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Choosing a Action:%s for WeMo Device:%s for creating the  IFTTT Recipe."%(actionName,WeMoDeviceType))
            if WeMoDeviceType == "Switch":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn on",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn on", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_54" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_54" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_55" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_55" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn on then off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn on then off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_85" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_85" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn off then on",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn off then on", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_86" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_86" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Toggle on/off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Toggle on/off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_53" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_53" could not be found.')
            if WeMoDeviceType == "Insight":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn on",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn on", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1155093958" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1155093958" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1652666381" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1652666381" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn on then off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn on then off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1454853676" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1454853676" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn off then on",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn off then on", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1287361961" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1287361961" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Toggle on/off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Toggle on/off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_1182131724" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_1182131724" could not be found.')
            if WeMoDeviceType == "Light Switch":
                if not ((actionName=="on") or (actionName=="off") or (actionName=="onthenoff") or (actionName=="offthenon") or (actionName=="toggle")):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "on":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn on",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn on", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_138" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_138" could not be found.')
                if actionName == "off":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "text=Turn off",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "text=Turn off", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_139" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_139" could not be found.')
                if actionName == "onthenoff":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_140",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=action_140", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_140" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_140" could not be found.')
                if actionName == "offthenon":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_141",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=action_141", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_141" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_141" could not be found.')
                if actionName == "toggle":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_137",0)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=action_137", 0, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=action_137" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=action_137" could not be found.')  
            if WeMoDeviceType == "Email":
                if not (actionName=="SendEmail"):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                    raise Exception('Raising the Exception as the trigger:%s selected for the WeMo Device:%s is not the correct Trigger.'%(actionName,WeMoDeviceType))
                if actionName == "SendEmail":
                    for i in range(10):
                        if(self.ExperitestClient.isElementFound("WEB", "id=action_4",1)):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("WEB", "id=action_4", 1, 1)
                            time.sleep(self.delay)
                            self.result = True
                            break
                        self.ExperitestClient.swipe2("NATIVE",500,500)
                        time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Raising the Exception as the element:"id=id=action_4" could not be found.')
                        raise Exception('Raising the Exception as the element:"id=id=action_4" could not be found.')    
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseAction() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _chooseAWemoToCompleteActionField(self, WemoFriendlyName):
        """
        Choose a Wemo to complete the Action Field
        @param WemoFriendlyName: The Wemo Firendly Name of the WeMo 
        @type WemoFriendlyName: String 
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Choosing a Wemo:%s to complete the Action Field."%WemoFriendlyName)
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_live_action_attributes_live_action_fields_attributes_0_value",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.hybridSelect("", 0, "id", "statement_live_action_attributes_live_action_fields_attributes_0_value", WemoFriendlyName)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_live_action_attributes_live_action_fields_attributes_0_value" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_live_action_attributes_live_action_fields_attributes_0_value" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _chooseAWemoToCompleteActionField() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createActionByClickingTheCreateActionButton(self):
        """
        Click on the Create Action Button.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Create Action Button.")
                
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=validate_action_btn",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:id=validate_action_btn", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,500)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=validate_action_btn" could not be found.')
                raise Exception('Raising the Exception as the element:"id=validate_action_btn" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createActionByClickingTheCreateActionButton() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _createAndActivateIFTTTRecipe(self,description=None):
        """
        Create A Recipe by clicking on the Create a Recipe button
        """
        try:
            self.result = None
            if description!=None:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Create and Activate IFTTT Recipe with description:%s."%description)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Create and Activate IFTTT Recipe.")
            if description!=None:
                for i in range(10):
                    if(self.ExperitestClient.isElementFound("WEB", "id=statement_description",0)):
                        time.sleep(self.delay)
                        self.ExperitestClient.elementSendText("WEB", "id=statement_description", 0, description)
                        time.sleep(self.delay)
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_description" could not be found.')
                    raise Exception('Raising the Exception as the element:"id=statement_description" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "id=statement_create_task_submit",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "nclick:id=statement_create_task_submit", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"id=statement_create_task_submit" could not be found.')
                raise Exception('Raising the Exception as the element:"id=statement_create_task_submit" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _createAndActivateIFTTTRecipe() encountered and Error")
                self.WeMoAppLog.LogException()    
    
    def _getRecipeId(self):
        """
        Getting the Recipe Id from the IFTTT Page
        """
        try:
            self.result = None
            self.RecipeId = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Get the Recipe Id of the Recipes Created.")
                self.WeMoAppLog.Info("Launching the IFTTT Page:https://ifttt.com/myrecipes/personal.")
            self.ExperitestClient.launch("https://ifttt.com/myrecipes/personal", True, True)
            time.sleep(self.delay)
            self.result = True
            
            activityLogs = self.ExperitestClient.getText("WEB")
            activityLogsList = activityLogs.split("\n")
            Recipie_ID=[]
            print activityLogsList
            
            for line in activityLogsList:
                if line.find("view Recipe")!=-1:
                    #self.RecipeId=line.split()[-1].strip()
                    Recipie_ID=line.split()[3].strip().split("\n")
                    print Recipie_ID 
            #        assert self.RecipeId != None  
            #        print self.RecipeId
            #        self.result = True
            #        break
            #else:
            #    if self.WeMoAppLog is not None:
            #        self.WeMoAppLog.Error("Could not get the Recipe Id of the Recipe Created")
            #    raise Exception("Could not get the Recipe Id of the Recipe Created")
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            self.RecipeId = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getRecipeId() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _checkTheDeviceIfActive(self,device_type="Switch"):
        """
            Check if the device is active
        """
        try:
            self.result = None
            self.Device_Status = None
            
            Devices = {
                'Motion':'https://ifttt.com/wemo_motion',
                'Switch':'https://ifttt.com/wemo_switch',
                'Insight':'https://ifttt.com/wemo_insight_switch',
                'Light':'https://ifttt.com/wemo_light_switch',
                'Maker':'https://ifttt.com/wemo_maker',
                'Email':'https://ifttt.com/email',
            }
            
            trial = 0
            self.ExperitestClient.launch("%s"%Devices[device_type],True,False)
            for i in range(15):
                self.ExperitestClient.swipe2("Down", 500, 500)           
                if self.ExperitestClient.isElementFound("WEB","text=Activate",0) or self.ExperitestClient.isElementFound("WEB","text=Connect",0):
                    self.Device_Status = "InActive"
                    break
                elif self.ExperitestClient.isElementFound("WEB","text=Deactivate",0):
                    self.Device_Status = "Active"
                    break
                else:
                    if trial > 3:
                        if device_type in Devices:
                            self.ExperitestClient.launch("%s"%Devices[device_type],True,False)
                        time.sleep(self.delay)
                        trial = 0
                    else:
                        trial = trial + 1

            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkTheDeviceIfActive() encountered and Error")
                self.WeMoAppLog.LogException()            
    
    def _generateIFTTTNewPin(self):
        """
        Click on Generate new IFTTT Pin.
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Generate the new IFTTT Pin.")
    
            if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=GENERATE NEW PIN",0):
                self.ExperitestClient.click("NATIVE","accessibilityLabel=GENERATE NEW PIN",0,1)
                
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._clickOnBackButtonToGoBackInWeMoApp()
            self._goToTheDevicesPage()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _generateIFTTTNewPin() encountered and Error")
                self.WeMoAppLog.LogException()            
            
    def _deleteRecipe(self):
        """
        Delete the Recipe from the IFTTT Web Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Deleting the Recipe whose Recipe Id.")
            #self.ExperitestClient.launch("http://ifttt.com/myrecipes/personal/%s"%recipeId, True, True)
            time.sleep(self.delay)
            self.result = True
            #self.ExperitestClient.swipe2("Down", 500, 10000)
            self.ExperitestClient.click("WEB","xpath=//*[@text='if']/..//*[@text='then']",0,1)
            time.sleep(self.delay)
            for i in range(10):
                if(self.ExperitestClient.isElementFound("WEB", "text=Delete",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("WEB", "text=Delete", 0, 1)
                    time.sleep(self.delay)
                    
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='https://ifttt.com']/../..//*[@text='OK']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='https://ifttt.com']/../..//*[@text='OK']",0,1)
                        time.sleep(self.delay)
                    else:
                        time.sleep(self.delay)
                    
                    self.result = True
                    break
                else:
                    self.ExperitestClient.swipe2("Down", 500, 10000)
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Delete" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Delete" could not be found.') 
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=OK",0)):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "text=OK", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=OK" could not be found.')
                raise Exception('Raising the Exception as the element:"text=OK" could not be found.') 
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _deleteRecipe() encountered and Error")
                self.WeMoAppLog.LogException()
    #################################################################################################
    
    ###################
    #Generic Functions#
    ###################
    def _verifyElementFound(self,zone,element,index=0):
        """
        Verify whether the element is found
        """
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Verify whether the element:%s is found in zone:%s at index:%d"%(element,zone,index))
        try:
            for i in range(10):
                if(self.ExperitestClient.isElementFound(zone, element,index)):
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element:%s is found."%element)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s could not be found."%element)
                raise Exception("Raising the Exception as the element:%s could not be found."%element)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyElementFound() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyElementFoundbyClickingRefresh(self,zone,element,index=0):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Verify whether the element:%s is found in zone:%s at index:%d after clicking the Refresh Button"%(element,zone,index))
        try:
            for i in range(10):
                if(self.ExperitestClient.isElementFound(zone, element, index)):
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element:%s is found."%element)
                    self.result = True
                    break
                time.sleep(self.delay)
                self._clickOnRefreshButton()
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s could not be found."%element)
                raise Exception("Raising the Exception as the element:%s could not be found."%element)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyElementFoundbyClickingRefresh() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyElementNotFound(self,zone,element,index=0):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Verify whether the element:%s is not found in zone:%s at index:%d"%(element,zone,index))
        try:
            for i in range(10):
                if not (self.ExperitestClient.isElementFound(zone, element,index)):
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element:%s is not found."%element)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s is found."%element)
                raise Exception("Raising the Exception as the element:%s is found."%element)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyElementNotFound() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnAnElement(self,zone,element,index=0,clickCount=1):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the element:%s"%element)
        try:
            for i in range(10):
                if (self.ExperitestClient.isElementFound(zone, element,index)):
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element:%s is not found."%element)
                    self.ExperitestClient.click(zone, "nclick:%s"%element, index, clickCount)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s is found."%element)
                raise Exception("Raising the Exception as the element:%s is found."%element)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnAnElement() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _swipeToCheckForElement(self,zone,element,direction="Down"):
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Swipe to check for the element:%s"%element)
        try:
            time.sleep(self.delay)
            if(self.ExperitestClient.swipeWhileNotFound2(direction, 0, 2000, zone, element, 1000, 50, False)):
                time.sleep(self.delay)
                self.result = True
            self.result = False
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _swipeToCheckForElement() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _elementSwipe(self,element,direction,offset):
        try:
            self.result = None
            self.ExperitestClient.elementSwipe("NATIVE", "%s"%element, 0, "%s"%direction, offset, 2000)
            self.result = True
        except:
                self._screenCapture()
                self._getTheIOSDeviceLogs()
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                    time.sleep(self.delay)
                self._homeScreen()
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("The method _elementSwipe() encountered and Error")
                    self.WeMoAppLog.LogException()
        
        
    def _swipeDownAndClickOnElement(self,zone,element,index=0,clickCount=1,offset=500):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Swipe Down and click on the element:%s"%element)
        try:
            for i in range(10):
                if not (self.ExperitestClient.isElementFound(zone, element,index)):
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element:%s is not found."%element)
                    self.ExperitestClient.click(zone, "nclick:%s"%element, index, clickCount)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
                self.ExperitestClient.swipe2("Down", offset, 500)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:%s is found."%element)
                raise Exception("Raising the Exception as the element:%s is found."%element)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _swipeDownAndClickOnElement() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _pickElementFromVisibleList(self, element, index):
        try:
            self.result = None
            for i in range(5):
                if self.ExperitestClient.elementListVisible("", "%s"%element, index):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The element %s is found."%element)
                    break
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _pickElementFromVisibleList() encountered and Error")
                self.WeMoAppLog.LogException()

    def _sendText(self,text):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Sending the text:%s"%text)
        try:
            time.sleep(self.delay)
            self.ExperitestClient.sendText(text)
            time.sleep(self.delay)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _sendText() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clearText(self, element=None):
        '''
        clearing the text from text field
        :return:
        '''
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Clearing the text from %s:"%element)
        try:
            # time.sleep(self.delay)
            if element!=None:
                self.ExperitestClient.click("NATIVE",element)
                time.sleep(self.delay)
                self.result = True

            # time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@class='UIButton' and ./*[@class='UIImageView']]"):
                self.ExperitestClient.click("NATIVE","xpath=//*[@class='UIButton' and ./*[@class='UIImageView']]")
                time.sleep(self.delay)
                self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clearText() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _swipeTheScreen(self,direction):
        """
            Swipe the Screen
        """
        try:
            self.result = None
            self.ExperitestClient.swipe2("Right",0,500)
            self.result = True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _swipeTheScreen() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _getText(self,zone):
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Getting the Text on the Page for zone:%s"%zone)
        try:
            time.sleep(self.delay)
            text = self.ExperitestClient.getText(zone)
            time.sleep(self.delay)
            self.result = True
            return text
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Done")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Done")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _getText() encountered and Error")
                self.WeMoAppLog.LogException()
    ##################################################################################################
    
    ###############################
    #Firmware Update Tab Functions#
    ###############################
    def _checkForTheFirmwareUpdatePageAndReleaseNotes(self):
        """
        Check for the Firmware Update Page and the Release Notes
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Firmware Update Page and the Release Notes")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True              
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Upgrade")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Upgrade" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=Release Notes:")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Release Notes:" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Release Notes:" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForTheFirmwareUpdatePageAndReleaseNotes() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _verifyTheTextOnTheFirwareUpdateReleaseNotes(self,releaseNoteText):
        """
        Check for the Firmware Update Page and the Release Notes and verify the text
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Firmware Update Page and the Release Notes and verify the text")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Upgrade")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Upgrade" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=Release Notes:")):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Release Notes:" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Release Notes:" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.getText("NATIVE")).find(releaseNoteText)!=-1:
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the text:%s could not be found.'%releaseNoteText)
                raise Exception('Raising the Exception as the text:%s could not be found.'%releaseNoteText)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyTheTextOnTheFirwareUpdateReleaseNotes() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _checkForFirmwareUpgradePopUpInTheDeviceListScreen(self,refresh=True):
        """
        Check for the Firmware Upgrade Pop up in the Device List Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Firmware Upgrade Pop up in the Device List Page")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIAlertView") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
                if refresh==True:
                    self._clickOnRefreshButton()
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIAlertView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIAlertView" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Firmware Available",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Firmware Available",1)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Firmware Available" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Firmware Available" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradePopUpInTheDeviceListScreen() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForFirmwareUpgradePopUpAndDoNotUpdateTheFirmware(self,refresh=False):
        """
        Check for the Firmware Upgrade Pop up in the Device List Page and do not update the Firmware
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Firmware Upgrade Pop up in the Device List Page and do not update the Firmware")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            popUpFound = False
            for i in range(1):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Firmware Available",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Firmware Available",1)):
                    popUpFound = True
                    self.result = True
                    break
                time.sleep(self.delay)
                if refresh == True:
                    self._clickOnRefreshButton()
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning("Firmware Update Pop up did not appear.Looks Like the Firmware is up to date.")
            
            if popUpFound == True: 
                for i in range(5):
                    if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Not Now")):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Not Now")
                        self.result = True
                        break
                    time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Not Now" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Not Now" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradePopUpAndDoNotUpdateTheFirmware() encountered and Error")
                self.WeMoAppLog.LogException()
        
    def _checkForFirmwareUpgradePopUpAndUpdateTheFirmware(self,refresh=True):
        """
        Check for the Firmware Upgrade Pop up in the Device List Page and update the Firmware
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Firmware Upgrade Pop up in the Device List Page and update the Firmware")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIAlertView") == True:
                    self.result = True
                    break
                time.sleep(self.delay)
                if refresh==True:
                    self._clickOnRefreshButton()
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIAlertView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIAlertView" could not be found.')
            
            for i in range(10):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Firmware Available",0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=New Firmware Available",1)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=New Firmware Available" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=New Firmware Available" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Yes")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Yes")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Yes" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForFirmwareUpgradePopUpAndUpdateTheFirmware() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnNewFirmwareAvailableTab(self):
        """
        Click on the New Firmware Available Tab in teh More Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the New Firmware Available Tab in teh More Page")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Update Available")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Firmware Update Available")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Update Available" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Update Available" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnNewFirmwareAvailableTab() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOnUpdateNowButtonInFirmwareUpgradePage(self):
        """
        Click on the Update Now Button on the Firmware Upgrade Page
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Click on the Update Now Button on the Firmware Upgrade Page")
        try:
            self.result = None
            
            self._isAppLaunched()
            assert self.result == True            
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Firmware Upgrade")):
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Firmware Upgrade" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Firmware Upgrade" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Update Now")):
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Update Now")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Update Now" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Update Now" could not be found.')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnNewFirmwareAvailableTab() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _checkForUpdateCompletePopUp(self):
        """
        Check for the Update Complete pop up
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Update Complete pop up")
        try:
            self.result = None          
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Update Complete") == True:
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The Update Complete Pop up did not appear.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForUpdateCompletePopUp() encountered and Error")
                self.WeMoAppLog.LogException()
   
    def _clickOkonRuleNameError(self):
        """
        Check for the 'Please enter a name 30 characters or less' pop up
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Please enter a name 30 characters or less pop up")
        try:
            self.result = None          
            
            for i in range(15):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Please enter a name 30 characters or less") == True:
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=OK")
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                self.result = True
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Warning('The Rule name error Pop up did not appear.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOkonRuleNameError() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickOnHoorayButtonOnUpdateCompletePopUp(self):
        """
        Check for the Update Complete pop up and click on the Hooray Button
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for the Update Complete pop up and click on the Hooray Button")
        try:
            self.result = None
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Update Complete']/../../..//*[@text='Hooray!' and @top='true']",0):
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Update Complete']/../../..//*[@text='Hooray!' and @top='true']",0,1)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=Hooray" could not be found.')
                raise Exception('Raising the Exception as the element:"text=Hooray" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            self.WeMoAppLog.Error("The method _clickOnHoorayButtonOnUpdateCompletePopUp() encountered and Error")
            self.WeMoAppLog.LogException()
            
    def _checkForFWUpgradesuccessful(self,WemoFriendlyName):
        """
        Check for Firmware Upgrade Successful Message for the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name to be turned On 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for Firmware Upgrade Successful Message for the WeMo:%s"%WemoFriendlyName)
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not"%WemoFriendlyName)            

            self._verifyWemoDeviceInDeviceListContainer(WemoFriendlyName) 
            assert self.result == True
                
            for i in range(10):
                if (self.ExperitestClient.isFoundIn("NATIVE", "text=%s"%WemoFriendlyName, 0, "Down", "NATIVE", "text=FW upgrade successful!", 0, 0)):
                    time.sleep(self.delay)
                    break
                else:
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "text=FW upgrade successful!" could not be found.'%WemoFriendlyName)
                raise Exception('Raising the Exception as the element:"text=%s" and "text=FW upgrade successful!" could not be found.'%WemoFriendlyName)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkForFWUpgradesuccessful() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _checkForDownloadingNewFirmwareMessage(self,*WemoFriendlyName):
        """
        Check for Downloading New Firmware Message for the Wemo.
        @param WemoFriendlyName: The Wemo Firendly Name 
        @type WemoFriendlyName: String
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Check for Downloading New Firmware Message for the Wemo Devices",WemoFriendlyName)
        #try: 
        self.result = None
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Verify whether the Wemo Device:%s is present in the Device List Container or not",WemoFriendlyName)
        
        self._isAppLaunched()
        assert self.result == True            
        
        WeMoInDeviceListContainer = WemoFriendlyName[0][:]
        
        FWMessageinDeviceListContainer = WemoFriendlyName[0][:]
        print FWMessageinDeviceListContainer
        for i in range(50):
            for WeMoDevice in FWMessageinDeviceListContainer:
                print "--------->",WeMoDevice
                self._verifyWemoDeviceInDeviceListContainer(WeMoDevice)
                assert self.result == True                    
            
                if (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='%s']/.."%WeMoDevice, 0, "Inside", "NATIVE", "text="+u"downloading new firmware…", 0, 0)):
                    time.sleep(self.delay)
                    FWMessageinDeviceListContainer.remove(WeMoDevice)
                elif (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='%s']/.."%WeMoDevice, 0, "Inside", "NATIVE", "xpath=//*[contains(@accessibilityLabel,'begin download in')]", 0, 0)):
                    time.sleep(self.delay)
                    FWMessageinDeviceListContainer.remove(WeMoDevice)
                elif (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='%s']/.."%WeMoDevice, 0, "Inside", "NATIVE", "text="+u"installing new firmware…", 0, 0)):
                    time.sleep(self.delay)
                    FWMessageinDeviceListContainer.remove(WeMoDevice)
                else:
                    time.sleep(self.delay)
                
                if len(FWMessageinDeviceListContainer) == 0:
                    break
            if len(FWMessageinDeviceListContainer) == 0:
                break
        else:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error('Raising the Exception as the element:"text=%s" and "text=downloading new firmware…" could not be found.'%WemoFriendlyName)
            raise Exception('Raising the Exception as the element:"text=%s" and "text=downloading new firmware…" could not be found.'%WemoFriendlyName)
            
        self.result = True
        
        #except:
        #    self._screenCapture()
        #    if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
        #        time.sleep(self.delay)
        #        self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
        #        time.sleep(self.delay)
        #    self._getTheIOSDeviceLogs()
        #    self._homeScreen()
        #    self.result = False
        #    if self.WeMoAppLog is not None:
        #        self.WeMoAppLog.Error("The method _checkForDownloadingNewFirmwareMessage() encountered and Error")
        #        self.WeMoAppLog.LogException()
    ######################################################################################
    
    ############################################
    #IOS Device FUNCTIONS-Wireless Connectivity#
    ############################################
    def _searchForAppAndClick(self,appName):
        """
        Search for the App and click on that
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Search for the App:%s and click on that"%appName)
            self.ExperitestClient.launch("search:%s"%appName, True, False)
            time.sleep(self.delay)
            self.result = True
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Dismiss']",0):
                self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Dismiss')]",0)
        except:
            self._screenCapture()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _searchForAppAndClick() encountered and Error")
                self.WeMoAppLog.LogException()

    def _openWifiPage(self):
        """
        Open the Wi-Fi Networks Page in the Settings App
        """
        try:
            self.result = None
            WiFiPageOcuurenceCount = 0
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Opening the Wi-Fi page.")
            for i in range(5):
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Wi-Fi' and ./parent::*[@text='Wi-Fi']]", 0)
                time.sleep(self.delay*4)
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Settings' and @class='UIAButton']",0):
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'CHOOSE A NETWORK')]",0):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("The app is now on Wi-Fi selection Page.")
                        self.result = True
                        break
                else:
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Dismiss']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'Dismiss')]",0)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as launch of the Wifi Page did not open.')
                raise Exception('Raising the Exception as launch of the Wifi Page did not open.')
        except:
            self._screenCapture()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _openWifiPage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _clickOtherTabOnWifiPage(self):
        """
        Click on the Other... tab in the Wi-Fi Network page to connect to the Network
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Searching for the OtherWifiNetwork element and swiping Down until not found.")
            # time.sleep(self.delay)
            for i in range(2):
                for i in range(5):
                    self.ExperitestClient.swipe2("Down", 10, 500)
                    try:
                        if self.ExperitestClient.isElementFound("TEXT","Other",0):
                            self.ExperitestClient.click("TEXT","Other",0,1)
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("Try Again to find other Wifitab")
                    except:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("Try Again to find other tab")
                else:
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']"):
                        if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']") == True:
                            time.sleep(self.delay)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']", 0, 1)
                            time.sleep(self.delay)
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Dismiss']"):
                        if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Dismiss']") == True:
                            time.sleep(self.delay)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Dismiss']", 0, 1)
                            time.sleep(self.delay)

                break #breaking the outer for loop
            else:
                self.ExperitestClient.closeDevice()
                time.sleep(self.delay)
                self.ExperitestClient.openDevice()
                time.sleep(self.delay)
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOtherTabOnWifiPage() encountered and Error")
                self.WeMoAppLog.LogException()
               
    def _enterTheNetworkName(self,ssid):
        """
        Enter the Network Name in the Name textbox in the Other Network Page
        @param ssid: The Network Name to connect to 
        @type ssid: String
        """
        try:
            self.result = None
            OtherNetworkScreenTries = 0
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Entering the Wireless SSID in the textbox.")
            for i in range(10):
                if self.ExperitestClient.isElementFound("TEXT", "Name") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("TEXT", "nclick:Name", 0, 1)
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Entering the Wireless SSID:%s in the textbox."%ssid)
                    self.ExperitestClient.sendText(ssid)               
                    self.result = True
                    break
                elif OtherNetworkScreenTries == 10:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error("The Network Name field could not be found after trying 10 times.Aborting the Test!!")
                    raise Exception("The Network Name field could not be found after trying 10 times.Aborting the Test!!")
                
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']",0) == True:
                    time.sleep(self.delay)
                    OtherNetworkScreenTries = OtherNetworkScreenTries + 1
                    self._clickOtherTabOnWifiPage()
                    assert self.result == True
                    time.sleep(self.delay)
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']",0) == True:
                    time.sleep(self.delay)
                    OtherNetworkScreenTries = OtherNetworkScreenTries + 1
                    self._clickOtherTabOnWifiPage()
                    assert self.result == True
                    time.sleep(self.delay)
                
                elif self.ExperitestClient.isElementFound("TEXT", "Password") == True:
                    time.sleep(self.delay)
                    OtherNetworkScreenTries = OtherNetworkScreenTries + 1
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                        time.sleep(self.delay)
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                        time.sleep(self.delay)
                    self._clickOtherTabOnWifiPage()
                    assert self.result == True
                    time.sleep(self.delay)
            else: 
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:Name could not be found.")
                raise Exception("Raising the Exception as the element:Name could not be found.")
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterTheNetworkName() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _enterTheNetworkPassword(self, password):
        """
        Enter the Network Password in the Password textbox in the Other Network Page
        @param password: The Network Password for the Wireless Network 
        @type password: String
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Entering the Wireless Password in the textbox.")
            for i in range(10):
                if self.ExperitestClient.isElementFound("TEXT", "Password") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("TEXT", "Password", 0, 1)
                    time.sleep(self.delay)
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Entering the Wireless Password:%s in the textbox."%password)
                    self.ExperitestClient.sendText(password)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:Password could not be found.")
                raise Exception("Raising the Exception as the element:Password could not be found.")
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _enterTheNetworkPassword() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _setTheNetworkSecurity(self,security="WPA2"):
        """
        Select the Wireless Security for the Network
        @param security: The Wireless Security for the Wireless Network 
        @type security: String
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Select the Network Security for the Wireless SSID.")
            for i in range(10):
                if self.ExperitestClient.isElementFound("TEXT", "Security") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("TEXT", "Security", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:Security could not be found.")
                raise Exception("Raising the Exception as the element:Security could not be found.")
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("TEXT", security) == True:
                    self.ExperitestClient.click("TEXT", security, 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:WPA2 could not be found.")
                raise Exception("Raising the Exception as the element:WPA2 could not be found.")
            
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Other Network']") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Other Network']", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Back' and @class='UIAButton']") == True:
                    time.sleep(self.delay)
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Back' and @class='UIAButton']", 0, 1)
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:GoToOtherNetworkPage could not be found.")
                raise Exception("Raising the Exception as the element:GoToOtherNetworkPage could not be found.")
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Back' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Back' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Other Network']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Other Network']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheNetworkSecurity() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _joinTheNetwork(self):
        """
        Join the Wireless Network
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Joining the Selected Wireless Network.")
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Join' and @top='true']"):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Join' and @top='true']")
                    self.ExperitestClient.waitForElement("NATIVE","xpath=//*[@text='Dismiss']",0,15000)
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Dismiss']",0):
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='Dismiss']",0)
                    else:
                        self.result = True
                        time.sleep(self.delay*30)
                        break
            else:
                self.result = False
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error("Raising the Exception as the element:JoinNetwork could not be found.")
                raise Exception("Raising the Exception as the element:JoinNetwork could not be found.")
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
            elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _joinTheNetwork() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _selectWeMoSSIDInSettingsPage(self, WeMoSSID):
        """
        Select the WeMo SSID in the Setting's Page
        @param ssid: The WeMo SSID
        @type ssid: String
        """
        try:
            self.result = None

            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']"):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']", 0, 1)
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Dismiss']"):
                    self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Dismiss']", 0, 1)

                self._goToTheSettingsPageandSelectTheWifi(WeMoSSID,None,None)
                if self.result == True:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Paired the WeMo SSID :%s."%WeMoSSID)

                    self._searchForAppAndClick("Settings")
                    assert self.result == True

                    if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']/..//*[@text='%s']"%WeMoSSID, 0)):
                        break
                    elif(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Wi-Fi' and @class='UIAView']/..//*[@text='%s']"%WeMoSSID, 0)):
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Trying again to pair the WeMo to the smartPhone.")

            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising an Exception since WeMo Could not be selected.')
                raise Exception('Raising an Exception since WeMo Could not be selected.')
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectWeMoSSIDInSettingsPage() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _selectSSIDInSettingsPage(self,ssid,password,security="WPA2"):
        """
        Select the SSID in the Setting's Page
        @param ssid: The WeMo SSID
        @type ssid: String
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Select the WeMo SSID:%s in the Setting's Page"%ssid)
            for i in range(10):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi']") == True:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The WI-FI Settings Page is displayed.")
                    break
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Wi-Fi']") == True:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The WI-FI Settings Page is displayed.")
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the WI-FI Settings Page is not displayed.')
                raise Exception('Raising the Exception as the WI-FI Settings Page is not displayed.')
            
            if security == "Open":
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Connecting to the Network with the Open Security.")
                for i in range(10):
                    if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi']") == True) and ((self.ExperitestClient.elementGetText("NATIVE", "xpath=//*[@class='UIATableCell']", 1)).find(ssid)!=-1) and (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@class='UIATableGroup']", 0, "Down", "NATIVE", "xpath=//*[@class='UIATableCell'][2]", 0, 0) == False):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info('Smart Phone is paired with WeMo:%s.'%ssid)
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                        self._homeScreen()
                        self.result = True
                        break
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Join Network']", 0):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAButton']", 0, 1)
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                        time.sleep(self.delay)
                        self._openWifiPage()
                        assert self.result == True
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Enter Password']", 0):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                        time.sleep(self.delay)
                        self._openWifiPage()
                        assert self.result == True
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']",0):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']", 0, 1)
                        time.sleep(self.delay)
                    else:
                        if self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[contains(@accessibilityLabel,'CHOOSE A NETWORK')]",0, "Up", "NATIVE", "xpath=//*[contains(@text, '%s')]"%WeMoSSID, 0, 0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The WeMo : %s is already associated with the Smart Phone"%WeMoSSID)
                        else:
                            offset_to_swipe = self.ExperitestClient.p2cy(50)
                            yOffset = self.ExperitestClient.p2cy(4)
                            print offset_to_swipe,yOffset
                            self.ExperitestClient.swipeWhileNotFound2("Down", offset_to_swipe, 2000, "NATIVE", "xpath=//*[@text='%s' and @onScreen='true' and @y>%s]"%(ssid,yOffset), 1000, 5, True)
                            time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the Smart Phone could not connect to WeMo:%s'%ssid)
                    raise Exception('Raising the Exception as the Smart Phone could not connect to WeMo:%s'%ssid)
            elif security == "WPA2":
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Connecting to the Network with the Security:%s."%security)
                for i in range(10):
                    if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi']") == True) and ((self.ExperitestClient.elementGetText("NATIVE", "xpath=//*[@class='UIATableCell']", 1)).find(ssid)!=-1) and (self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@class='UIATableGroup']", 0, "Down", "NATIVE", "xpath=//*[@class='UIATableCell'][2]", 0, 0) == False):
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info('Smart Phone is paired with WeMo:%s.'%ssid)
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                        self._homeScreen()
                        self.result = True
                        break
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Join Network']", 0):
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAButton']", 0, 1)
                        time.sleep(self.delay)
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                        time.sleep(self.delay)
                        self._openWifiPage()
                        assert self.result == True
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Enter Password']", 0):
                        time.sleep(self.delay)
                        if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Enter the password for “%s”']"%ssid, 0):
                            time.sleep(self.delay)
                            self.ExperitestClient.click("TEXT", "Password", 0, 1)
                            time.sleep(self.delay)
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("Entering the Wireless Password:%s in the textbox."%password)
                            self.ExperitestClient.sendText(password)
                            self._joinTheNetwork()
                            assert self.result == True
                            assert self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi']") == True
                            assert self.ExperitestClient.elementGetText("NATIVE", "xpath=//*[@class='UIATableCell']", 1).find(ssid)!=-1
                            time.sleep(self.delay)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                            self._homeScreen()
                            self.result = True
                            break
                        else:
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                            time.sleep(self.delay)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                            time.sleep(self.delay)
                            self._openWifiPage()
                            assert self.result == True
                    else:
                        if self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[contains(@accessibilityLabel,'CHOOSE A NETWORK')]",0, "Up", "NATIVE", "xpath=//*[contains(@text, '%s')]"%WeMoSSID, 0, 0):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The WeMo : %s is already associated with the Smart Phone"%WeMoSSID)
                        else:
                            self.ExperitestClient.swipeWhileNotFound2("Down", 600, 2000, "NATIVE", "xpath=//*[contains(@text, '%s') and @onScreen='true' and @hidden='false']"%ssid, 1000, 5, True)
                            time.sleep(self.delay)
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the Smart Phone could not connect to WeMo:%s'%ssid)
                    raise Exception('Raising the Exception as the Smart Phone could not connect to WeMo:%s'%ssid)
                 
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectWeMoSSIDInSettingsPage() encountered and Error")
                self.WeMoAppLog.LogException()            
                
    def _syncTheTimeOnSmartDevice(self,CurrentYear,setDate):
        try:
            self._searchForAppAndClick("Settings")
            assert self.result == True
            
            for i in range(5):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Identify the General Tab on the Settings Page of Smart Device.")

                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='General' and ./*[@text='General']]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Identified the General Tab in Settings Page.")
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='General' and ./*[@text='General']]",0,1)
                    time.sleep(self.delay)
                    break
                else:
                    self.ExperitestClient.swipe2("Down",100,0)

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Date & Time' and ./*[@text='Date & Time']]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Identified the Date and Time in General Tab.")
                    self.ExperitestClient.swipe2("Down",100,0)
                    time.sleep(self.delay*3)
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Date & Time' and ./*[@text='Date & Time']]",0,1)
                    time.sleep(self.delay)
                    break
                else:
                    self.ExperitestClient.swipe2("Down",100,0)
                    
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'%s')]"%CurrentYear,0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Automatic Time Set Based on Location is already turned off.")
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Turn off Automatic Sync.")
                self.ExperitestClient.click("NATIVE","xpath=//*[@class='UIASwitch']/..//*[@text='Set Automatically']",0,1)
                time.sleep(self.delay)
                
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'%s')]"%CurrentYear,0):
                self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,'%s')]"%CurrentYear,0,1)
                
            if setDate == "Tomorrow":
                self.ExperitestClient.drag("NATIVE", "xpath=//*[@class='UIAPickerWheel']", 0, 0, -100)
            elif setDate == "Yesterday":
                self.ExperitestClient.drag("NATIVE", "xpath=//*[@class='UIAPickerWheel']", 0, 0, 100)
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='General']",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Navigating back from Date & Time page to general page by pressing general button")
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='General']",0)
                    time.sleep(self.delay)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Failed to go back to general page from Date & Time page")

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Settings']",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Navigating back from General page to Settings page by pressing Settings button")
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Settings']",1)# as Settings at index 0 is hidden in IOS 9
                    time.sleep(self.delay)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Failed to go back to Settings page from General page")

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAView' and ./parent::*[@accessibilityLabel='Settings']]") == True:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Swiping up in order to see Airplane Mode on the Settings home page")
                    if(self.ExperitestClient.swipeWhileNotFound3("Up", 100,2000 , "NATIVE", "xpath=//*[@text='Airplane Mode' and @class='UIAView' and ./parent::*[@text='Airplane Mode']]", 1000, 15, False)):
                        self.result = True
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Pressing Home button on IOS device")
                    self._homeScreen()

            self._homeScreen()
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _syncTheTimeOnSmartDevice() encountered and Error")
                self.WeMoAppLog.LogException()            
        
    def _syncTheTimeActualLocation(self,CurrentYear):
        try:
            self._searchForAppAndClick("Settings")
            assert self.result == True
            
            for i in range(5):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Identify the General Tab on the Settings Page of Smart Device.")
            
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='General' and ./*[@text='General']]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Identified the General Tab in Settings Page.")
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='General' and ./*[@text='General']]",0,1)
                    time.sleep(self.delay)
                    break
                else:
                    self.ExperitestClient.swipe2("Down",100,0)
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Date & Time' and ./*[@text='Date & Time']]",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Identified the Date and Time in General Tab.")
                    self.ExperitestClient.swipe2("Down",100,0)
                    time.sleep(self.delay*3)
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Date & Time' and ./*[@text='Date & Time']]",0,1)
                    time.sleep(self.delay)
                    break
                else:
                    self.ExperitestClient.swipe2("Down",100,0)

            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'%s')]"%CurrentYear,0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Automatic Time Set Based on Location is already turned off.")
                self.ExperitestClient.click("NATIVE","xpath=//*[@class='UIASwitch']/..//*[@text='Set Automatically']",0,1)
                time.sleep(self.delay*5)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Already in Automation Sync.")
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='General']",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Navigating back from Date & Time page to general page by pressing general button")
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='General']")
                    time.sleep(self.delay)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Failed to go back to general page from Date & Time page")
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Settings']",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Navigating back from General page to Settings page by pressing Settings button")
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Settings']",1)# as Settings at index 0 is hidden in IOS 9
                    time.sleep(self.delay)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Failed to go back to Settings page from General page")
            
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAView' and ./parent::*[@accessibilityLabel='Settings']]") == True:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Swiping up in order to see Airplane Mode on the Settings home page")
                    if(self.ExperitestClient.swipeWhileNotFound3("Up", 100,2000 , "NATIVE", "xpath=//*[@text='Airplane Mode' and @class='UIAView' and ./parent::*[@text='Airplane Mode']]", 1000, 15, False)):
                        self.result = True
                        break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Pressing Home button on IOS device")
                    self._homeScreen()

            self._homeScreen()
        except:
            self._screenCapture()
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0) == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _syncTheTimeActualLocation() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyAirplaneModeOnPopUpOnWemo(self):
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying if airplane mode on pop up is present or not.")
            for i in range(5):
                return self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Turn Off Airplane Mode or Use Wi-Fi to Access Data' and @class='UIAStaticText']")

        except:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyAirplaneModeOnPopUpOnWemo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _clickYesOnAirplaneModeOnPopUpOnWemo(self):
        try:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Clicking on Yes on the airplane mode on pop up on WeMo.")
            for i in range(5):
                if self._verifyAirplaneModeOnPopUpOnWemo():
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='OK']"):
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='OK']",0,1)
                        self.result = True
                        break
                    else:
                        self.result = False
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error("The OK button on the airplane mode on pop up not found on WeMo")

                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error("The airplane mode on pop up not found on WeMo")


        except:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickYesOnAirplaneModeOnPopUpOnWemo() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyNoNetworkScreenInWeMo(self):
        try:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Verifying the no network screen in WeMo")
            for i in range(5):
                self.result = True
                searchString = "\"Connect to Wi-Fi or your phone's data service so you can use WeMo.\""
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text=%s]"%searchString):
                    time.sleep(self.delay)
                    self.result = True
                    break
                else:
                    time.sleep(self.delay)
        except:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifySmartReachabilityWeMoMessageNoConnectivity() encountered and Error")
                self.WeMoAppLog.LogException()


    def _goToTheSettingsPageandChangeAirplaneMode(self,enable=True):
        """
        Open settings page and change the airplane mode
        @param enable: The flag to set airplane mode
        @type enable: Bool
        """
        try:
            self.result = False
            for i in range(5):
                self._homeScreen()
                self._searchForAppAndClick("Settings")
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAStaticText']") == True:
                    if self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='Airplane Mode' and @class='UIATableCell']", 0, "Down", "NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']", 0, 0):
                        isAlreadyEnabled = self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Airplane mode on']")
                        if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The airplane mode is  <%s>"%isAlreadyEnabled)
                        if enable != isAlreadyEnabled:
                            if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The airplane mode is being changed to <%s>"%enable)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Airplane Mode' and @class='UIASwitch']", 0, 1)
                            self._homeScreen()
                            self.result = True
                            break
                        else:
                            if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The airplane mode is already in desired state.Mode is <%s>"%enable)
                            break
        except:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _goToTheSettingsPageandChangeAirplaneMode() encountered and Error")
                self.WeMoAppLog.LogException()


    def _turnOnWifiInTheSettings(self):
        """
        Turn on wifi in the device settings page
        :return:
        """
        try:
            self.result = None
            self._homeScreen()
            self._searchForAppAndClick("Settings")
            self.ExperitestClient.click("NATIVE","xpath=//*[@text='Wi-Fi' and ./parent::*[@text='Wi-Fi']]")
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Using Location services requires turning on Wi-Fi.')]",0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Turning on the wifi.")
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Wi-Fi' and @class='UIASwitch' ]", 0, 1)
                self.result = True
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE","xpath=//*[@text='Back']")
            time.sleep(self.delay)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            time.sleep(self.delay)
            self.ExperitestClient.click("NATIVE","xpath=//*[@text='Back']")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _turnOnWifiInTheSettings() encountered and Error")
                self.WeMoAppLog.LogException()

    def _turnOffWifiInTheSettings(self):
        """
        Turn off wifi in the device settings page
        :return:
        """
        try:
            self.result = None
            self._homeScreen()
            self._searchForAppAndClick("Settings")
            self.ExperitestClient.click("NATIVE","xpath=//*[@text='Wi-Fi' and ./parent::*[@text='Wi-Fi']]")
            if not self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,'Using Location services requires turning on Wi-Fi.')]",0):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Turning off the wifi.")
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Wi-Fi' and @class='UIASwitch' ]", 0, 1)
                self.result = True
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE","xpath=//*[@text='Back']")
            time.sleep(self.delay)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            time.sleep(self.delay)
            self.ExperitestClient.click("NATIVE","xpath=//*[@text='Back']")
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _turnOffWifiInTheSettings() encountered and Error")
                self.WeMoAppLog.LogException()

    def _goToTheSettingsPageandSelectTheWifi(self, ssid, password = None, security="WPA2"):
        """
        Search for the Wifi Network on the Settings app of Smart Phone and Select the network
        @param ssid: The Network Name to connect to
        @param password: The Network Password for the Wireless Network
        @param security: The Wireless Security for the Wireless Network
        @type ssid: String
        @type password: String
        @type security: String

        """
        try:
            for i in range(5):
                self._homeScreen()
                self._searchForAppAndClick("Settings")
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAView' and ./parent::*[@accessibilityLabel='Settings']]") == True:
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Wi-Fi' and @class='UIAView']"):
                        if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Wi-Fi' and @class='UIAView']/..//*[@text='%s']"%ssid, 0)):
                            if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Requested wifi %s already selected."%ssid)
                            self._homeScreen()
                            self.result = True
                            break
                        else:
                            self._openWifiPage()
                            #assert self.result == True

                            # if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Dismiss']") == True:
                            #     self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Dismiss']", 0, 1)

                            for i in range(3):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Search and find the Other Wifi tab on the Wi-fi Page.")
                                if self.ExperitestClient.isElementFound("TEXT", "Wi-Fi") == True:
                                    self._clickOtherTabOnWifiPage()
                                    if self.result == True:
                                        break
                                else:
                                    self._searchForAppAndClick("Settings")
                                    assert self.result == True
                                    self._openWifiPage()
                                    assert self.result == True

                            for i in range(3):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Enter the SSID on the other Wi-Fi page.")
                                if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                    self._enterTheNetworkName(ssid)
                                    assert self.result == True
                                    break
                                else:
                                    self._searchForAppAndClick("Settings")
                                    self._openWifiPage()
                                    self._clickOtherTabOnWifiPage()

                            for i in range(3):
                                if security is not None:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("Enter the Network Security on the other Wi-Fi page.")
                                    if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                            self._setTheNetworkSecurity(security)
                                            assert self.result == True
                                            break
                                    else:
                                        self._searchForAppAndClick("Settings")
                                        assert self.result == True
                                        self._openWifiPage()
                                        assert self.result == True
                                        self._clickOtherTabOnWifiPage()
                                        assert self.result == True
                                        if security is not None:
                                            self._enterTheNetworkName(ssid)
                                            assert self.result == True

                            for i in range(3):
                                if password is not None:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("Enter the Password on the other Wi-Fi page.")
                                    if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                        self._enterTheNetworkPassword(password)
                                        break
                                    else:
                                        self._searchForAppAndClick("Settings")
                                        self._openWifiPage()
                                        self._clickOtherTabOnWifiPage()
                                        self._enterTheNetworkName(ssid)
                                        if security is not None:
                                            self._setTheNetworkSecurity(security)

                            for i in range(3):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Click on Join button to join the network.")
                                if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                    self._joinTheNetwork()
                                    assert self.result == True
                                    break
                                else:
                                    self._searchForAppAndClick("Settings")
                                    self._openWifiPage()
                                    self._clickOtherTabOnWifiPage()
                                    self._enterTheNetworkName(ssid)
                                    if security is not None:
                                        self._setTheNetworkSecurity(security)
                                        self._enterTheNetworkPassword(password)
                            break
                    else:
                        if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']") == True:
                            time.sleep(self.delay)
                            if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'CHOOSE A NETWORK')]", 0, "Up", "NATIVE", "xpath=//*[@text='%s']"%ssid, 0, 0)):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The smart phone is already paired to the SSID : %s" %ssid)
                                    self._homeScreen()
                                    self.result = True
                                    break
                            else:
                                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Airplane Mode' and @class='UIAView' and ./*[@text='Airplane Mode']]", 0):
                                if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@text='Wi-Fi' and ./parent::*[@text='Wi-Fi']]", 0, "Inside", "TEXT", "%s"%ssid, 0, 0)):
                                    self._homeScreen()
                                    self.result = True
                                    break
                                else:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("The smartphone is not paired to the SSID : %s" %ssid)
                            else:
                                self._homeScreen()
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Wifi Icon is not seen on the Settings page.")
                        else:
                            self._homeScreen()
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("Unable to go back to Settings page. '<Settings' is not seen on the page.")
                elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAStaticText']") == True:
                    if self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='Airplane Mode' and @class='UIATableCell']", 0, "Down", "NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']", 0, 0):
                        if(self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']/..//*[@text='%s']"%ssid, 0)):
                            self._homeScreen()
                            self.result = True
                            break
                        else:
                            self._openWifiPage()
                            assert self.result == True

                            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']") == True:
                                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Dismiss']", 0, 1)

                            for i in range(3):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Search and find the Other Wifi tab on the Wi-fi Page.")
                                if self.ExperitestClient.isElementFound("TEXT", "Wi-Fi") == True:
                                    self._clickOtherTabOnWifiPage()
                                    break
                                else:
                                    self._searchForAppAndClick("Settings")
                                    assert self.result == True
                                    self._openWifiPage()
                                    assert self.result == True

                            for i in range(3):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Enter the SSID on the other Wi-Fi page.")
                                if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                    self._enterTheNetworkName(ssid)
                                    assert self.result == True
                                    break
                                else:
                                    self._searchForAppAndClick("Settings")
                                    self._openWifiPage()
                                    self._clickOtherTabOnWifiPage()

                            for i in range(3):
                                if security is not None:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("Enter the Network Security on the other Wi-Fi page.")
                                    if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                            self._setTheNetworkSecurity(security)
                                            assert self.result == True
                                            break
                                    else:
                                        self._searchForAppAndClick("Settings")
                                        assert self.result == True
                                        self._openWifiPage()
                                        assert self.result == True
                                        self._clickOtherTabOnWifiPage()
                                        assert self.result == True
                                        if security is not None:
                                            self._enterTheNetworkName(ssid)
                                            assert self.result == True

                            for i in range(3):
                                if password is not None:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("Enter the Password on the other Wi-Fi page.")
                                    if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                        self._enterTheNetworkPassword(password)
                                        break
                                    else:
                                        self._searchForAppAndClick("Settings")
                                        self._openWifiPage()
                                        self._clickOtherTabOnWifiPage()
                                        self._enterTheNetworkName(ssid)
                                        if security is not None:
                                            self._setTheNetworkSecurity(security)

                            for i in range(3):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Click on Join button to join the network.")
                                if self.ExperitestClient.isElementFound("TEXT", "Other Network") == True:
                                    self._joinTheNetwork()
                                    assert self.result == True
                                    break
                                else:
                                    self._searchForAppAndClick("Settings")
                                    self._openWifiPage()
                                    self._clickOtherTabOnWifiPage()
                                    self._enterTheNetworkName(ssid)
                                    if security is not None:
                                        self._setTheNetworkSecurity(security)
                                        self._enterTheNetworkPassword(password)
                            break
                    else:
                        if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                            time.sleep(self.delay)
                            if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'CHOOSE A NETWORK')]", 0, "Up", "NATIVE", "xpath=//*[@text='%s']"%ssid, 0, 0)):
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The smart phone is already paired to the SSID : %s" %ssid)
                                    self._homeScreen()
                                    self.result = True
                                    break
                            else:
                                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                            if self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='Airplane Mode' and @class='UIATableCell']", 0, "Down", "NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']", 0, 0):
                                if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']", 0, "Inside", "TEXT", "%s"%ssid, 0, 0)):
                                    self._homeScreen()
                                    self.result = True
                                    break
                                else:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Info("The smartphone is not paired to the SSID : %s" %ssid)
                            else:
                                self._homeScreen()
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("Wifi Icon is not seen on the Settings page.")
                        else:
                            self._homeScreen()
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("Unable to go back to Settings page. '<Settings' is not seen on the page.")
                else:
                    if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@class='UIANavigationBar']", 0, "Inside", "NATIVE", "xpath=//*[@accessibilityLabel='Wi-Fi' and @class='UIAStaticText']", 0, 0)):
                        if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'CHOOSE A NETWORK')]", 0, "Up", "NATIVE", "xpath=//*[@text='%s']"%ssid, 0, 0)):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The smart phone is already paired to the SSID : %s" %ssid)
                                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                                self._homeScreen()
                                self.result = True
                                break
                        else:
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("Bringing back the smart phone to Settings Page from Wi-Fi Page.")
                    elif(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[@class='UIANavigationBar']", 0, "Inside", "NATIVE", "xpath=//*[@text='Wi-Fi' and @class='UIAView']", 0, 0)):
                        if(self.ExperitestClient.isFoundIn("NATIVE", "xpath=//*[contains(@text,'CHOOSE A NETWORK')]", 0, "Up", "NATIVE", "xpath=//*[@text='%s']"%ssid, 0, 0)):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The smart phone is already paired to the SSID : %s" %ssid)
                                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                                self._homeScreen()
                                self.result = True
                                break
                        else:
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("Bringing back the smart phone to Settings Page from Wi-Fi Page.")
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("Bringing back the smart phone to Settings Page")
                    elif self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']") == True:
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAButton']", 0, 1)
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Info("Bringing back the smart phone to Settings Page")
        except:
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Cancel' and @class='UIAButton']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@accessibilityLabel='Settings' and @class='UIAButton']", 0, 1)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Cancel' and @class='UIAView']", 0, 1)
                time.sleep(self.delay)
            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Settings' and @class='UIAView' and ./parent::*[@accessibilityLabel='Settings']]") == True:
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Settings' and @class='UIAView' and ./parent::*[@accessibilityLabel='Settings']]", 0, 1)
            time.sleep(self.delay)
            self._homeScreen()
            time.sleep(self.delay)
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _goToTheSettingsPageandSelectTheWifi() encountered and Error")
                self.WeMoAppLog.LogException()
            
    ###########################
    #   RULES GENERIC         #
    ###########################
    
    def _createARule_InWeMoApp(self,**kwargs):
        """
        Creating the  rule for the wemo devices on the WeMo App
        =========================================================================
        @@                 PARAMETERS TO BE PASSED FOR EACH RULE TYPE          @@
        =========================================================================
        @@----------------------------------------------
        @@ TIMER RULE :- 1) RULETYPE   = STRING
        @@               2) WEMODEVICES = LIST
        @@               3) ACTION      = STRING
        @@               4) STARTTIME   = STRING
        @@               5) ENDTIME     = STRING
        @@               5) RULENAME    = STRING
        @@-----------------------------------------------
        @@-----------------------------------------------
        @@ MOTION RULE :-1) RULETYPE   = STRING
        @@               2) WEMODEVICES = LIST
        @@               3) ACTION      = STRING
        @@               4) MOTIONDEVICE = STRING
        @@               5) TIMETOBESET = STRING (IF Action = on ,then... )
        @@               6) STARTTIME   = STRING
        @@               7) ENDTIME     = STRING
        @@               8) RULENAME    = STRING
        @@-----------------------------------------------
        @@-----------------------------------------------
        @@ AUTOOFFTIMER RULE :-1) RULETYPE   = STRING
        @@                     2) WEMODEVICES = LIST
        @@                     3) TIMEINTERVAL = STRING
        @@                     4) STARTTIME   = STRING
        @@                     5) ENDTIME     = STRING
        @@                     6) RULENAME    = STRING
        @@-----------------------------------------------
        """

        if self.WeMoAppLog != None :

            self.WeMoAppLog.Info ("Creating the  rule <%s> for the wemo devices on the WeMo App "%str(kwargs))
        MANDATORY_KEYS = ['RULE_TYPE','DEVICES_IN_NETWORK','ACTION']
        OPTIONAL_KEYS = ['MOTION_TRIGGER_FROM']

        VALID_RULES = {
                'TIMER_RULE': "xpath=//*[@accessibilityLabel='By time, sunrise/sunset']",
                'AUTO_OFF_RULE': "xpath=//*[@accessibilityLabel='With Auto-off Timer']",
                'MOTION_RULE': "xpath=//*[@text='With Auto-off Timer']/../../..//*[@text='With Motion']",
                'MOTION_NOTIFICATION_RULE': "xpath=(//*[@class='UITableViewWrapperView']/*/*/*[@text='With Motion'])[1]",
                'AWAY_MODE_RULE': "xpath=//*[@accessibilityLabel='Away Mode']"
            }

        RULE_PAGE_HEADER = {
            'TIMER_RULE': ['New Timer Rule','Edit Timer Rule'],
            'AUTO_OFF_RULE': ['Auto-off Timer'],
            'MOTION_RULE':['New Motion Rule','Edit Motion Rule'],
            'MOTION_NOTIFICATION_RULE':['New Notification Rule','Edit Notification Rule'],
            'AWAY_MODE_RULE':['Away Mode','Edit Away Mode Rule']
        }

        RULE_WHEN_TAB = {
                        'TIMER_RULE':"xpath=//*[@id='timer_rule_when']",
                        'MOTION_RULE':"xpath=//*[@id='sensors_rule_when']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@id='timer_rule_when']",
                        'AUTO_OFF_RULE':"xpath=//*[@id='countdown_when']",
                        'NEST_RULE':"",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_when']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_when']",

                        }

        # RULE_PAGE_HEADER = {
        #                 'TIMER_RULE':['New Rule','Edit Timer Rule'],
        #                 'MOTION_RULE':['New Motion Rule','Edit Timer Rule'],
        #                 'MAKER_MOTION_RULE': '',
        #                 'AWAY_MODE_RULE' : ['Away Mode'],
        #                 'AUTO_OFF_RULE':['Auto-off Timer'],
        #                 'NEST_RULE':[],
        #                 'MOTION_NOTIFICATION_RULE':["New Notification Rule"],
        #                 'INSIGHT_NOTIFICATION_RULE':["New Notification Rule"],
        #
        #                  }

        ACTION_NAME = {
                        'ON':'on',
                        'OFF':'off',
                        'ON UNTIL TIME':'on until time',
                        'ON, THEN...':'on, then...'
                        }
        RULE_NAME_TAB = {
                        'TIMER_RULE':"xpath=//*[@id='timer_rule_rule_name']",
                        'MOTION_RULE':"xpath=//*[@id='sensors_rule_rule_name']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@id='timer_rule_rule_name']",
                        'AUTO_OFF_RULE':"xpath=//*[@id='rule_name']",
                        'NEST_RULE':"xpath=//*[@id='sensor_rule']",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_rule_name']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@id='notify_rule_rule_name']",

                        }

        RULE_SAVE_BUTTON = {
                        'TIMER_RULE':"xpath=//*[@text='Save']",
                        'MOTION_RULE':"xpath=//*[@text='Save']",
                        'MAKER_MOTION_RULE': '',
                        'AWAY_MODE_RULE' : "xpath=//*[@text='Save']",
                        'AUTO_OFF_RULE':"xpath=//*[@text='Save']",
                        'NEST_RULE':"xpath=//*[@text='Save']",
                        'MOTION_NOTIFICATION_RULE':"xpath=//*[@text='Save']",
                        'INSIGHT_NOTIFICATION_RULE':"xpath=//*[@text='Save']",

                            }

        TimeList = {"immediately":"1","1 minute":"00:01","5 minutes":"00:05","10 minutes":"00:10","15 minutes":"00:15","30 minutes":"00:30","1 hour":"01:00","don't turn off":"0","Don't turn off":"0"}

        TimerInterval = {"1 m":0, "5 m":1, "10 m":2, "15 m":3, "30 m":4, "45 m":5,"1 hr":6,"Custom":7}


        DAYS    = {
                    'Monday':'Mon',
                    'Tuesday':'Tue',
                    'Wednesday':'Wed',
                    'Thursday':'Thu',
                    'Friday':'Fri',
                    'Saturday':'Sat',
                    'Sunday':'Sun',
                }


        try:
            # validating the params
            if "RULE_TYPE" in kwargs.keys():
                rule_type = kwargs['RULE_TYPE']
                if rule_type not in VALID_RULES.keys():
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Error("Invalid rule type <%s>"%rule_type)
                    raise Exception("Invalid rule type <%s>"%rule_type)
            if "DEVICES_IN_NETWORK" in kwargs.keys():
                rule_devices = kwargs['DEVICES_IN_NETWORK']
            if "DAYS" in kwargs.keys():
                rule_days = kwargs['DAYS']
            if "RULE_NAME" in kwargs.keys():
                rule_name = kwargs['RULE_NAME']
            if "MOTION_TRIGGER_FROM" in kwargs.keys():
                rule_motion_trigger = kwargs['MOTION_TRIGGER_FROM']
            if "START_TIME" in kwargs.keys():
                rule_start_time = kwargs['START_TIME']
            if "END_TIME" in kwargs.keys():
                rule_end_time = kwargs['END_TIME']
            if "ACTION" in kwargs.keys():
                rule_action = kwargs['ACTION']
            if "AUTO_OFF_TIME_INTERVEL" in kwargs.keys():
                rule_auto_off_time_interval = kwargs['AUTO_OFF_TIME_INTERVEL']
            if "MOTION_TRIGGER_FROM" in kwargs.keys():
                rule_motion_trigger_from = kwargs['MOTION_TRIGGER_FROM']
            if "TRIGGER" in kwargs.keys():
                rule_motion_trigger = kwargs['TRIGGER']





            ##  VERIFY THAT THE CORRESPONDING RULE PAGE IS LAUNCHED ##
            self._verifyAndClickOnAddIconOnRulesPage()
            assert self.result == True

            if filter(lambda key:str.upper(key) == 'RULE_TYPE',kwargs):
                if VALID_RULES[rule_type]:
                    for i in range(5):
                        if self.ExperitestClient.isElementFound("NATIVE","%s"%VALID_RULES[rule_type],0):
                            self.ExperitestClient.click("NATIVE","%s"%VALID_RULES[rule_type],0,1)
                            time.sleep(self.delay)
                            PAGE_HEADER = self.ExperitestClient.getTextIn2("NATIVE","xpath=//*[@class='UINavigationItemView']",0,"NATIVE","Inside",0,0).strip()
                            if PAGE_HEADER in RULE_PAGE_HEADER[rule_type]:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Info("The Rule page for  %s is launched"%str.upper(kwargs['RULE_TYPE']))
                                break
                        else:
                            time.sleep(self.delay)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.values()))
                        raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.values()))
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.keys()))
                    raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(VALID_RULES.keys()))
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))

            ##  SELECT THE WEMO FOR THE CORRESPONDING RULE ##

            if rule_type == 'TIMER_RULE':
                if rule_devices:
                    for WEMO_DEVICES in rule_devices:
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='%s']"%WEMO_DEVICES, 0, 1)

                        if rule_action in ['on','off','on until time']:
                            if not self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='%s' and @textColor='0x444444']"%rule_action):
                                self.ExperitestClient.swipe("Down",200)
                            self.ExperitestClient.click("NATIVE", "xpath=//*[@text='%s' and @textColor='0x444444']"%rule_action)
                            time.sleep(self.delay)
                            # returning to original location
                            if not self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='TURN ON/OFF']"):
                                self.ExperitestClient.swipeWhileNotFound("Up",200,"NATIVE","xpath=//*[@text='TURN ON/OFF']",delay=2000,rounds=2,click=False)
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Incorrect Action. Valid actions are %s'%",".join(['on','off','on until time']))
                            raise Exception('Incorrect Action. Valid actions are %s'%",".join(['on','off','on until time']))
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                    raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
            elif rule_type == 'AUTO_OFF_RULE':
                if rule_devices:
                    for WEMO_DEVICES in rule_devices:
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='%s']"%WEMO_DEVICES, 0, 1)

                if rule_auto_off_time_interval:
                    if rule_auto_off_time_interval in ["1 m", "5 m", "10 m", "15 m", "30 m", "45 m","1 hr"]:
                        self._selectAuto_Off_TimerIntervel(rule_auto_off_time_interval)
                        assert self.result == True
                    elif str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0]):
                        self._selectAuto_Off_TimerIntervel("Custom")
                        assert self.result == True

                        if ":" not in kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])]:
                            self._setTheCustomTimer_Auto_Off_Timer("0",kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])])
                            assert self.result == True
                            self._clickOnSave_ToSaveCustomTimer()
                            assert self.result == True
                            self._verifyTheCustomButtonMessage_Auto_Off_Timer("0",kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])])
                            assert self.result == True
                        else:
                            self._setTheCustomTimer_Auto_Off_Timer(kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[0],kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[1])
                            assert self.result == True
                            self._clickOnSave_ToSaveCustomTimer()
                            assert self.result == True
                            self._verifyTheCustomButtonMessage_Auto_Off_Timer(kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[0],kwargs[str.upper(filter(lambda key:str.upper(key) == 'SET_CUSTOM_TIME',kwargs)[0])].split(":")[1])
                            assert self.result == True
                    else:
                        self._selectAuto_Off_TimerIntervel("1 m")
                        assert self.result == True
                else:
                    self._selectAuto_Off_TimerIntervel("1 m")
                    assert self.result == True
            elif rule_type == 'MOTION_RULE':
                if "MOTION_TRIGGER_FROM" in kwargs.keys():
                    for i in range(10):
                        if self.ExperitestClient.isElementFound("NATIVE","text=%s"%rule_motion_trigger_from,0):
                            self.ExperitestClient.click("NATIVE","text=%s"%rule_motion_trigger_from,0,1)
                            # self.ExperitestClient.click("WEB","text=Motion",0,1)
                            break
                        else:
                            self.ExperitestClient.swipe2("Up",500,0)
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('"MOTION_TRIGGER_FROM" is a mandatory field')
                        raise Exception('"MOTION_TRIGGER_FROM" is a mandatory field')

                    if "DEVICES_IN_NETWORK" in kwargs.keys():
                        for WEMO_DEVICES in rule_devices:

                            if "ACTION" in kwargs.keys():
                                if rule_action in ['on then','off']:
                                    self._selectTheWeMoToCreateTheRule_MotionRule(WEMO_DEVICES)
                                    assert self.result == True
                                    self._selectTheActionForWeMo_MotionRule(WEMO_DEVICES,actionName=rule_action)
                                    assert self.result == True

                                    if rule_action in ['on then'] and "TRIGGER" in kwargs.keys():
                                        TimeList = {"immediately":"1","1 minutes":"00:01","5 minutes":"00:05","10 minutes":"00:10","15 minutes":"00:15","30 minutes":"00:30","1 hour":"01:00","don't turn off":"0","Don't turn off":"0"}
                                        if rule_motion_trigger in TimeList:
                                            self._selectTheTimeForOnThenOffIfNoMotion_MotionRule(rule_motion_trigger)
                                            assert self.result == True
                                        else:
                                            if self.WeMoAppLog is not None:
                                                self.WeMoAppLog.Error('Cannot Complete Action without Trigger Timer/Invalid Time selected for Motion rule.Valid values are %s'%','.join(TimeList.keys()))
                                            raise Exception('Cannot Complete Action without Trigger Timer/Invalid Time selected for Motion rule.Valid values are %s'%','.join(TimeList.keys()))
                                    #else:
                                    #    if self.WeMoAppLog is not None:
                                    #        self.WeMoAppLog.Error('Cannot Complete Action without Trigger Timer')
                                    #    raise Exception('Cannot Complete Action without Trigger Timer')
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('The action for time selection is invalid')
                                raise Exception('The action for time selection is invalid')
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                        raise Exception('Incorrect RULE TYPE. The rule type should be %s'%",".join(MANDATORY_KEYS))
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Could not select the WeMo Device:%s'%kwargs[str.upper(filter(lambda key:str.upper(key) == 'MOTION_TRIGGER_FROM',kwargs)[0])])
                    raise Exception('Could not select the WeMo Device:%s'%kwargs[str.upper(filter(lambda key:str.upper(key) == 'MOTION_TRIGGER_FROM',kwargs)[0])])

            elif rule_type == 'AWAY_MODE_RULE':
                self._unselectTheDevicesAlreadySetforAwayMode()
                assert self.result == True

                if "DEVICES_IN_NETWORK" in kwargs.keys():
                    for WEMO_DEVICES in rule_devices:
                        self._selectTheWeMo_AwayModeRule(WEMO_DEVICES)
                        assert self.result == True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Invalid Rule Type - %s'%kwargs[str.upper(kwargs[str(filter(lambda key:str.upper(key) == 'RULE_TYPE',kwargs)[0])])])
                raise Exception('Invalid Rule Type - %s'%kwargs[str.upper(kwargs[str(filter(lambda key:str.upper(key) == 'RULE_TYPE',kwargs)[0])])])

            ##  GO TO THE WHEN PAGE TO SELECT ACTION TIMING ##
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","text=RULE NAME",0):
                    break
                else:
                    self.ExperitestClient.swipe2("Down",500,0)

            if rule_type == 'TIMER_RULE':
                self._clickOnWhenTab_TimerRule(actionName=rule_action)
            elif rule_type == 'MOTION_RULE':
                self._clickOnWhenTab_MotionRule()
            elif rule_type == 'AWAY_MODE_RULE':
                self._clickOnWhenTab_AwayModeRule()
            elif rule_type == 'AUTO_OFF_RULE':
                self._clickOnWhenTab_Auto_Off_TimerRule()

            ##  SELECT TIME ON WHEN PAGE BASED ON CONDITION ##
            if rule_type == 'TIMER_RULE':
                if rule_action in ['on','off','on until time']:
                    if rule_action == "on":
                        if "START_TIME" in kwargs.keys():
                            if ':' in rule_start_time:
                                self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                                assert self.result == True

                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                assert self.result == True

                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid Start Time format for on option in Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid Start Time format for on option in Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME')
                            raise Exception('Missing Key: START_TIME')

                    elif rule_action == "off":
                        if "START_TIME" in kwargs.keys():
                            if ':' in rule_start_time:

                                self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                                assert self.result == True

                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                assert self.result == True

                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid Start Time format for off option in Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid Start Time format for off option in Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME')
                            raise Exception('Missing Key: START_TIME')
                    else:
                        if "START_TIME" in kwargs.keys() and "END_TIME" in kwargs.keys():
                            if "START_TIME" in kwargs.keys():
                                if ':' in rule_start_time:
                                    self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                                    assert self.result == True

                                    self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                    assert self.result == True

                                    self._clickOnDoneButtonToSetTheTime()
                                    assert self.result == True
                                else:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Error('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                                    raise Exception('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Missing Key: START_TIME')
                                raise Exception('Missing Key: START_TIME')

                            if "END_TIME" in kwargs.keys():
                                if ':' in rule_end_time:
                                    self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                                    assert self.result == True

                                    self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                                    assert self.result == True

                                    self._clickOnDoneButtonToSetTheTime()
                                    assert self.result == True
                                else:
                                    if self.WeMoAppLog is not None:
                                        self.WeMoAppLog.Error('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                                    raise Exception('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Missing Key: END_TIME')
                                raise Exception('Missing Key: END_TIME')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: Insiufficient Argument Either Start time or End time is not there')
                            raise Exception('Missing Key: Insiufficient Argument Either Start time or End time is not there')
            elif rule_type == 'AWAY_MODE_RULE':
                if "START_TIME" in kwargs.keys() and "END_TIME" in kwargs.keys():
                    if "START_TIME" in kwargs.keys():
                        self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                        assert self.result == True
                        self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                        assert self.result == True
                        self._clickOnDoneButtonToSetTheTime()
                        assert self.result == True
                    if "END_TIME" in kwargs.keys():
                        self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                        assert self.result == True
                        self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                        assert self.result == True
                        self._clickOnDoneButtonToSetTheTime()
                        assert self.result == True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("No Time Provided so taking default time in the app.")
            elif rule_type == 'MOTION_RULE':
                if rule_action in ['on then','off']:
                    if "START_TIME" in kwargs.keys() and "END_TIME" in kwargs.keys():
                        if "START_TIME" in kwargs.keys():
                            if ':' in rule_start_time:
                                self._toggleSensingOff_Auto_Off_Timer()
                                assert self.result == True
                                self._clickOnStartTimeTabOfWhenRulePage_MotionRule()
                                assert self.result == True
                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                                assert self.result == True
                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME')
                            raise Exception('Missing Key: START_TIME')
                        if "END_TIME" in kwargs.keys():
                            if ':' in rule_end_time:
                                self._clickOnEndTimeTabOfWhenRulePage_MotionRule()
                                assert self.result == True
                                self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                                assert self.result == True
                                self._clickOnDoneButtonToSetTheTime()
                                assert self.result == True
                            else:
                                if self.WeMoAppLog is not None:
                                    self.WeMoAppLog.Error('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                                raise Exception('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: END_TIME')
                            raise Exception('Missing Key: END_TIME')
                    else:
                        if str.upper(filter(lambda key:str.upper(key) == 'START_TIME',kwargs)[0]):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: END_TIME - Setting Motion Rule -START TIME is present')
                            raise Exception('Missing Key: END_TIME - Setting Motion Rule - START TIME is present')
                        elif str.upper(filter(lambda key:str.upper(key) == 'END_TIME',kwargs)[0]):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Missing Key: START_TIME - Setting Motion Rule -END TIME is present')
                            raise Exception('Missing Key: START_TIME - Setting Motion Rule - END TIME is present')
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Incorrect Actions for Motion Sensor.')
                    raise Exception('Incorrect Actions for Motion Sensor.')
            elif rule_type == 'AUTO_OFF_RULE':
                if rule_start_time and rule_end_time:
                    if rule_start_time:
                        if ':' in rule_start_time:
                            self._toggleSensingOff_Auto_Off_Timer()
                            assert self.result == True
                            self._clickOnStartTimeTabOfWhenRulePage_TimerRule()
                            assert self.result == True
                            self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_start_time.split(':')[0],rule_start_time.split(':')[1])
                            assert self.result == True
                            self._clickOnDoneButtonToSetTheTime()
                            assert self.result == True
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                            raise Exception('Invalid Start Time format for On Until Time Timer Rule. Should be  HH:MM')
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Missing Key: START_TIME')
                        raise Exception('Missing Key: START_TIME')
                    if rule_end_time:
                        if ':' in rule_end_time:
                            self._clickOnEndTimeTabOfWhenRulePage_TimerRule()
                            assert self.result == True
                            self._setTheTimeInWhenPage_SimpleAndTimerRule(rule_end_time.split(':')[0],rule_end_time.split(':')[1])
                            assert self.result == True
                            self._clickOnDoneButtonToSetTheTime()
                            assert self.result == True
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Error('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                            raise Exception('Invalid End Time format for On Until Time Timer Rule. Should be  HH:MM')
                    else:
                        if self.WeMoAppLog is not None:
                            self.WeMoAppLog.Error('Missing Key: END_TIME')
                        raise Exception('Missing Key: END_TIME')
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Identify the General Tab on the Settings Page of Smart Device.")
            ## SELECT DAYS IN WHEN PAGE
            if rule_type in ['TIMER_RULE','MOTION_RULE','AWAY_MODE_RULE','AUTO_OFF_RULE']:
                if "DAYS" in kwargs.keys():
                    self._selectMultipleDays(rule_days)
                    assert self.result == True

            ## CLICK ON DONE BUTTON TO CLOSE THE WHEN PAGE ##

            self._clickOnDoneButtonToConfirmChangesInWeMoApp()
            assert self.result == True

            if rule_type == 'TIMER_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_TimerRule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Missing Key Field RULE_NAME for TIMER RULE.')
                    raise Exception('Missing Key Field RULE_NAME for TIMER RULE.')
            elif rule_type == 'MOTION_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_MotionRule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
            elif rule_type == 'AUTO_OFF_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_Auto_Off_Rule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
            elif rule_type == 'AWAY_MODE_RULE':
                if "RULE_NAME" in kwargs.keys():
                    self._createANameOfRule_AwayModeRule(rule_name)
                    assert self.result == True
                    self._closeDeviceKeyboard()
                    assert self.result == True
                    self._confirmChangesToCreateRule()
                    assert self.result == True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Missing Key Field RULE_NAME for MOTION RULE.')
                    raise Exception('Missing Key Field RULE_NAME for MOTION RULE.')
            self.result = True


        except:
            self.exception_msg = "Raising the Exception as the rule can not be created."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _createARule_InWeMoApp() encountered and Error")
                self.WeMoAppLog.LogException()

        
    
    ###########################
    #  Jarden Common Functions 
    ###########################  

    def _confirmChangesOnDailySchedulePage(self):
        """
        Click on the Save button to confirm the changes on the Daily Schedule Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Daily Schedule Page")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Save")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Save")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Save" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesOnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _cancelChangesOnDailySchedulePage(self):
        """
        Click on the Save button to confirm the changes on the Daily Schedule Page
        """
        try:
            self.result = None
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Click on the Save button to confirm the changes on the Daily Schedule Page")
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
            
            for i in range(10):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                    self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                    time.sleep(self.delay)
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _confirmChangesOnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()
    
    def _selectADay_OnDailySchedulePage(self,Day):
        """
        Select A Day of the week on Daily Schedule Page
        @param Day: Day of a Week
        @type Day: String        
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Select a Day of the Week from Daily Schedule Page")
        Days = {"Monday":"Mon","Tuesday":"Tue","Wednesday":"Wed","Thursday":"Thu","Friday":"Fri","Saturday":"Sat","Sunday":"Sun"}
        try:
            self.result = None 
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Daily Schedule",0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=BREW SCHEDULE",0)):
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
    
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%Days[Day], 0) and ("0xFFFFFF" in self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%Days[Day], "textColor"))):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Day of the Week:%s is already selected"%Days[Day])
                    self.result = True
                    break
                else:
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=%s"%Days[Day], 0 ,1)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%Days[Day])
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%Days[Day])                    
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectADay_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException() 
            
    def _selectDaily_OnDailySchedulePage(self):
        """
        Click all days of the week on Daily Schedule Page
        """    
        try:
            self.result = None
            Days = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            for day in Days:
                self._selectADay_OnDailySchedulePage(day)
                assert self.result == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _selectADay_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                     
        
    def _clickOnStartTimer_OnDailySchedulePage(self):
        """
        Click on start timer on Daily Schedule Page
        """
        try:
            self.result = None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')        
                
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=On", 0) == True:
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=On", 0, 1)
                elif self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Start", 0) == True:
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Start", 0, 1)                    
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=On" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=On" could not be found.')        
                   
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIPickerColumnView", 0) == True :
                    self.result = True
                    break
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnStartTimer_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()             
    
    def _clickOnEndTimer_OnDailySchedulePage(self):
        """
        Click on start timer on Daily Schedule Page
        """ 
        try:
            self.result = None
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                    self.result = True
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')  

            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Off", 0) == True):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Off", 0, 1)
                elif(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=End", 0) == True):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=End", 0, 1)                    
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Off" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Off" could not be found.')        
                   
                if self.ExperitestClient.isElementFound("NATIVE", "class=UIPickerColumnView", 0) == True :
                    self.result = True
                    break
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnEndTimer_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException() 

    def _clickOnSet_OnDailySchedulePage(self):
        """
        Click on start timer on Daily Schedule Page
        """ 
        try:
            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIPickerColumnView", 0) == True):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIPickerColumnView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIPickerColumnView" could not be found.')
             
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Set", 0) == True):
                    self.ExperitestClient.click("NATIVE", "accessibilityLabel=Set", 0 ,1)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Set" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Set" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnSet_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                                     
            
    def _clickOnCancel_OnDailySchedulePage(self):
        """
        Click on start timer on Daily Schedule Page
        """ 
        try:
            self.result = None
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UIPickerColumnView", 0) == True):
                    self.result = True
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UIPickerColumnView" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UIPickerColumnView" could not be found.')
             
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "text=Cancel", 1) == True):
                    self.ExperitestClient.click("NATIVE", "text=Cancel", 1,1)
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
                    raise Exception('Raising the Exception as the element:"accessibilityLabel=Cancel" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _clickOnCancel_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()                                                 

    def _setTheStartTimerforHumidifieronDailySchedulePage(self,hours,minutes):
        """
        Set the End time for Humidifier on Daily Schedule Page.
        Search for the Wifi Network on the Settings app of Smart Phone and Select the network
        @param hours: The Network Name to connect to         
        @param minutes: The Network Password for the Wireless Network         
        @type hours: String
        @type minutes: String   
        """    
        try:
            self.result = None
            am_pm = ''
            Hrs_String = ''
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the Start Timer on Daily Schedule Page")
            Hrs = str(hours.strip())
            Min = str(minutes.strip())
            
            if int(hours.strip()) > 24 or int(minutes.strip()) > 60:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the time provided is not a valid time.')
                raise Exception('Raising the Exception as the time provided is not a valid time.')            
                    
            if int(hours.strip()) > 12:
                am_pm = "pm"
                Hrs = int(hours.strip()) - 12
                if Hrs < 10:
                    Hrs_String = "0%s"%Hrs
                else:
                    Hrs_String = "%s"%Hrs
            elif int(hours.strip()) == 12:
                am_pm = "pm"
                Hrs_String = str(hours.strip())
            elif int(hours.strip()) == 0:
                Hrs = "12"
                am_pm = "am"
                Hrs_String = Hrs
            elif int(hours.strip()) < 12:
                Hrs = int(hours.strip())
                am_pm = "am"
                if Hrs < 10:
                    Hrs_String = "0%s"%Hrs
                else:
                    Hrs_String = Hrs
            else:
                am_pm = "am"
                
            if Min < 10:
                Min_Str = "0%s"%Min
            else:
                Min_Str = "%s"%Min
    
            if Hrs < 10:
                Hrs_String = "0%s"%Hrs
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the hours on the Timer App.")
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UISimpleTimeSpinner", 0)):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Start Timer Pop up is active to set the time.")
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISimpleTimeSpinner" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UISimpleTimeSpinner" could not be found.')
                
            DragCoordinate = int(self.ExperitestClient.p2cy(6))
            NegativeDragCoordinate = int(self.ExperitestClient.p2cy(6)) * -1
                
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=On", 0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Off", 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Set the Time %s:%s %s"%(Hrs_String,Min,am_pm))
    
                self.ExperitestClient.elementListSelect("class=UIPickerTableView[2]", "accessibilityLabel=12", 0, True)
                self.ExperitestClient.elementListSelect("class=UIPickerTableView[3]", "accessibilityLabel=59", 0, True)
                
                self.ExperitestClient.elementListSelect("class=UIPickerTableView[2]", "accessibilityLabel=%s"%Hrs_String, 0, True)
                self.ExperitestClient.elementListSelect("class=UIPickerTableView[3]", "accessibilityLabel=%s"%Min_Str, 0, True)
                self.ExperitestClient.drag("NATIVE", "xpath=//*[@class='UIPickerTableView']", 0, 0, DragCoordinate)
                self.ExperitestClient.drag("NATIVE", "xpath=//*[@class='UIPickerTableView']", 0, 0, NegativeDragCoordinate)
                
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s' and @parentHidden]]"%(am_pm),0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The time is set for %s."%am_pm)
                else:
                    DragOffset = self.ExperitestClient.p2cy(9)
                    if am_pm == "pm":
                        DragOffset = DragOffset * -1
                        OffsettoDrag = "am"
                    self.ExperitestClient.drag("NATIVE", "text=%s"%am_pm, 0, 0, DragOffset)
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=On/Off" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=On/Off" could not be found.')   
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheStartTimerforHumidifieronDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _setTheStartorEndTimeonDailySchedulePage(self,hours,minutes):
        """
        Set the Start/End time  on Daily Schedule Page.
        Search for the Wifi Network on the Settings app of Smart Phone and Select the network
        @param hours: The Network Name to connect to         
        @param minutes: The Network Password for the Wireless Network         
        @type hours: String
        @type minutes: String   
        """    
        try:
            self.result = None
            am_pm = ''
            Hrs_String = ''
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the Start Timer on Daily Schedule Page")
            Hrs = str(hours.strip())
            Min = str(minutes.strip())
            
            if int(hours.strip()) > 24 or int(minutes.strip()) > 60:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the time provided is not a valid time.')
                raise Exception('Raising the Exception as the time provided is not a valid time.')            
                    
            if int(hours.strip()) > 12:
                am_pm = "pm"
                Hrs = int(hours.strip()) - 12
                if Hrs < 10:
                    Hrs_String = "0%s"%Hrs
                else:
                    Hrs_String = "%s"%Hrs
            elif int(hours.strip()) == 12:
                am_pm = "pm"
                Hrs_String = str(hours.strip())
            elif int(hours.strip()) == 0:
                Hrs = "12"
                am_pm = "am"
                Hrs_String = Hrs
            elif int(hours.strip()) < 12:
                Hrs = int(hours.strip())
                am_pm = "am"
                if Hrs < 10:
                    Hrs_String = "0%s"%Hrs
                else:
                    Hrs_String = Hrs
            else:
                am_pm = "am"
                
            if Min < 10:
                Min_Str = "0%s"%Min
            else:
                Min_Str = "%s"%Min
    
            if Hrs < 10:
                Hrs_String = "0%s"%Hrs
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Set the hours on the Timer App.")
            
            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "class=UISimpleTimeSpinner", 0)):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The Start Timer Pop up is active to set the time.")
                    break
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"class=UISimpleTimeSpinner" could not be found.')
                raise Exception('Raising the Exception as the element:"class=UISimpleTimeSpinner" could not be found.')
                
            DragCoordinate = int(self.ExperitestClient.p2cy(6))
            NegativeDragCoordinate = int(self.ExperitestClient.p2cy(6)) * -1
                
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=On", 0)) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Off", 0) or self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Start", 0) or self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=End", 0)):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info("Set the Time %s:%s %s"%(Hrs_String,Min,am_pm))
    
                #self.ExperitestClient.elementListSelect("class=UIPickerTableView[2]", "accessibilityLabel=12", 0, True)
                #self.ExperitestClient.elementListSelect("class=UIPickerTableView[3]", "accessibilityLabel=59", 0, True)
                
                self.ExperitestClient.elementListSelect("class=UIPickerTableView[2]", "accessibilityLabel=%s"%Hrs_String, 0, True)
                self.ExperitestClient.elementListSelect("class=UIPickerTableView[3]", "accessibilityLabel=%s"%Min_Str, 0, True)
                
                self.ExperitestClient.drag("NATIVE", "xpath=//*[@class='UIPickerTableView']", 0, 0, DragCoordinate)
                self.ExperitestClient.drag("NATIVE", "xpath=//*[@class='UIPickerTableView']", 0, 0, NegativeDragCoordinate)

                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s' and @parentHidden]]"%(am_pm),0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The time is set for %s."%am_pm)
                else:
                    DragOffset = self.ExperitestClient.p2cy(9)
                    if am_pm == "pm":
                        DragOffset = DragOffset * -1
                        OffsettoDrag = "am"
                    self.ExperitestClient.drag("NATIVE", "text=%s"%am_pm, 0, 0, DragOffset)
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=On/Off" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=On/Off" could not be found.')   
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _setTheStartTimerforHumidifieronDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()
                    
    def checkStartorEndTimeonDailySchedulePage(self,time):
        try:
            self.result = False
            if(len(time)==7):
                hh=time[:2]
            else:
                hh=time[:1]
            h=int(hh)
            if h>12:
                h=h-12
                hh=h
                time=str(hh)+time[2:]
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=%s"%time, 0) == True):
                    self.result=True
                else:
                    raise Exception('Raising the Exception as the element:"NATIVE", "accessibilityLabel=%s" could not be found.'%time)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                self.ExperitestClient.click("NATIVE", "click:accessibilityLabel=Cancel")
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyDailyScheduleOff_onDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verifyDailyScheduleOff_onDailySchedulePage(self):
        """
        Verify Switch is Off on Daily Schedule Page
        """       
        try:
            self.result = None
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == "false"):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Daily Schedule is in default Off state.")
                    self.result = True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"Daily Schedule Off" could not be found.')
                    raise Exception('Raising the Exception as the element:"Daily Schedule Off" could not be found.')
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyDailyScheduleOff_onDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()
            
    def _verifyDailyScheduleOn_onDailySchedulePage(self):
        """
        Verify Switch is Off on Daily Schedule Page
        """       
        try:
            self.result = None
            if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0)):
                if (self.ExperitestClient.elementGetProperty("NATIVE", "class=UISwitch", 0, "on") == "true"):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("Daily Schedule is in On state.")
                    self.result = True
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"Daily Schedule Off" could not be found.')
                    raise Exception('Raising the Exception as the element:"Daily Schedule Off" could not be found.')
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')                
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen() 
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _verifyDailyScheduleOn_onDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()

    def _unselectADay_OnDailySchedulePage(self,Day):
        """
        Select A Day of the week on Daily Schedule Page
        @param Day: Day of a Week
        @type Day: String        
        """
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Un-Select a Day of the Week from Daily Schedule Page")
        try:
            self.result = None 
            Days = {"Monday":"Mon","Tuesday":"Tue","Wednesday":"Wed","Thursday":"Thu","Friday":"Fri","Saturday":"Sat","Sunday":"Sun"}
            for i in range(5):
                if(self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Daily Schedule") or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Schedule",0) or self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=BREW SCHEDULE",0)):
                    break
                time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')
                raise Exception('Raising the Exception as the element:"accessibilityLabel=Daily Schedule" could not be found.')

            for i in range(5):
                if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s')]"%Days[Day], 0) and (("0x777777" in self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%Days[Day], "textColor")) or ("0xD9D9D9" in self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%Days[Day], "textColor")))):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info("The day:%s of the week is already not selected"%Days[Day])
                    self.result = True
                    break
                else:
                    Clone_Days_Dict = dict(Days)
                    del Clone_Days_Dict[Day]
                    for key_day in Clone_Days_Dict:
                        self._selectADay_OnDailySchedulePage(key_day)
                    
                    for day_of_week in Days.values():
                        self.ExperitestClient.click("NATIVE","xpath=//*[@text='%s']"%day_of_week,0,2)
                        if (self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[contains(@text,'%s')]"%day_of_week, 0) and (("0x777777" in self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%day_of_week, "textColor")) or ("0xD9D9D9" in self.ExperitestClient.getAllValues("NATIVE", "accessibilityLabel=%s"%day_of_week, "textColor")))):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info("The day %s is unselected"%day_of_week)
                    
                    time.sleep(self.delay)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%Days[Day])
                raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%Days[Day])                    
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectADay_OnDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()            
    
    def _unselectAllDays_onDailySchedulePage(self):
        """
        Click all days of the week on Daily Schedule Page
        """    
        try:
            self.result = None
            Days = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            for day in Days:
                self._unselectADay_OnDailySchedulePage(day)
                assert self.result == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _unselectAllDays_onDailySchedulePage() encountered and Error")
                self.WeMoAppLog.LogException()          
            
    ###############################################################################################################    
    
    #######################
    #Logging And Reporting#
    #######################
    def generateReports(self):
        if self.WeMoAppLog is not None:
            self.WeMoAppLog.Info("Generate the Reports of the test run.")
        self.ExperitestClient.setShowImageInReport(True)
        self.ExperitestClient.generateReport2(False)

    def setReporters(self,testcase_name):
        report_path = os.path.join(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath("IOSWeMoApp_Generic.py")), os.pardir)), "temp")
        self.ExperitestClient.setProjectBaseDirectory(report_path)
        if not os.path.exists(os.path.join(report_path,"reports")):
            os.mkdir(os.path.join(report_path,"reports"))
        ##Need to set the path for the reports
        self.ExperitestClient.setReporter2("xml",os.path.join(report_path,"reports"),testcase_name)
        self.ExperitestClient.setShowPassImageInReport(True)
        
    def setLogger(self,loggerObject):
        self.WeMoAppLog = loggerObject

    def stopLogger(self):
        if self.WeMoAppLog != None:
            self.WeMoAppLog.__del__()
    ########################################
    
    #######################
    # Setup 
    #######################
    
    def _checkAndEnableRemoteAccess(self,appIdentifier,routerSSID,routerWirelessPassword,routersecurity="WPA2PSK"):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param routerSSID: The router ssid to which the wemo has to be set up 
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network 
        @type routerWirelessPassword: String
        @param routersecurity: The Wireless Password for the Wireless Network 
        @type routersecurity: String
        """
        try:
            self.result = None
            
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info('Pair the WeMo Device to Home Network and Start the Process.')            
            
            if routersecurity in ["WPA2","WPA2PSK"]:
                self._goToTheSettingsPageandSelectTheWifi(routerSSID,routerWirelessPassword)
                assert self.result == True

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info('Launch the WeMo App.')   
                
            self._launchWemoApp(appIdentifier)
            assert self.result == True 
            
            ##time.sleep(self.delay)
            
            # self._handlePopUpOnWeMoApp()
            # assert self.result == True
             
            # if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=Wemo_Navigation_Logo") and self.ExperitestClient.isElementFound("NATIVE","accessibilityIdentifier=infobutton.png",0) == False):
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info('The WeMo App has launched successfully.')
                
            self._clickOnMoreTab()
            assert self.result == True

            for i in range(5):
                self._clickOnRemoteAccessTab()
                assert self.result == True
                if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Remote Access lets you quickly, easily and securely control the WeMo devices in your home from anywhere. All you need is an Internet connection (Mobile or Wi-Fi).']"):
                    break

            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Remote access for other phones and devices']",0):
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('The remote access is already enabled.')
                    break
                else:
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Info('Enabling remote access.')
                    self._handlePopUpOnWeMoApp()
                    assert self.result == True
                    if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@text='Enable Remote Access']"):
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='Enable Remote Access']")
                        self.ExperitestClient.waitForElement("NATIVE","xpath=//*[@text='OK']", 0, 60000)
                        if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='OK']"):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info('The remote access got enabled in less than 60 seconds.')
                        else:
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info('It took more than 60 seconds to enable remote access.')
                        self.ExperitestClient.click("NATIVE", "xpath=//*[@text='OK']")
                        if self.ExperitestClient.isFoundIn("NATIVE","xpath=//*[@text='Remote Access']", 0, "RIGHT", "NATIVE", "xpath=//*[@text='Enabled']"):
                            if self.WeMoAppLog is not None:
                                self.WeMoAppLog.Info('The remote access is enabled now.')
                            self.result = True
                            break

            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info('The remote access is already enabled.')

            if self.ExperitestClient.isElementFound("NATIVE", "xpath=//*[@class='_UINavigationBarBackIndicatorView']"):
                self.ExperitestClient.click("NATIVE", "xpath=//*[@class='_UINavigationBarBackIndicatorView']")
            self._goToTheDevicesPage()


            # for i in range(3):
            #     self._handlePopUpOnWeMoApp()
            #     assert self.result == True
            #
            # self._checkForRemoteAccessDisabled()
            # assert self.result == True
            #
            # if self.remoteAccessEnabled  == True:
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info('Remote Access is already Enabled.')
            # else:
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info('Remote Access is not Enabled. Enabling Remote Access')
            #
            #     self._clickOnEnableRemoteAccess()
            #     assert self.result == True
            #
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info('Remote Access is enabled now for the router %s .'%routerSSID)
            #
            #     for i in range(5):
            #         self._clickOnRemoteAccessTab()
            #         assert self.result == True
            #
            #         if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=Remote access for other phones and devices",0):
            #             break
            #         else:
            #             time.sleep(self.delay)
            #             self._handlePopUpOnWeMoApp()
            #             assert self.result == True
            #
            #     for i in range(5):
            #         if self.ExperitestClient.isElementFound("NATIVE","accessibilityLabel=%s"%routerSSID,0):
            #             if self.WeMoAppLog is not None:
            #                 self.WeMoAppLog.Info('Remote Access is already Enabled for the Router %s .'%routerSSID)
            #             self.result = True
            #             break
            #         else:
            #             self._handlePopUpOnWeMoApp()
            #             assert self.result == True
            #     else:
            #         self.result = False
            #
            #         self._closeApplication()
            #         assert self.result == True
            #
            #         self._homeScreen()
            #         assert self.result == True
            #
            #         if self.WeMoAppLog is not None:
            #             self.WeMoAppLog.Error('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%routerSSID)
            #         raise Exception('Raising the Exception as the element:"accessibilityLabel=%s" could not be found.'%routerSSID)
            #
            #     self._clickOnBackButtonToGoBackInWeMoApp()
            #     assert self.result == True
            #
            #     self._goToTheDevicesPage()
            #     assert self.result == True
            #
            #     self._closeApplication()
            #     assert self.result == True
            #
            #     self._homeScreen()
            #     assert self.result == True
            #
            # if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Get Started"):
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info('Seems like there are no devices paired to the network %s or your smart phone has falled back to a different network.'%routerSSID)
            #         self.result =True
            #
            #         self._closeApplication()
            #         assert self.result == True
            #
            #         self._homeScreen()
            #         assert self.result == True
            # else:
            #     if self.WeMoAppLog is not None:
            #         self.WeMoAppLog.Info('Please close the app and check your remote access again after sometime.')
            #         self.result = False
            #
            #         self._closeApplication()
            #         assert self.result == True
            #
            #         self._homeScreen()
            #         assert self.result == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method _checkAndEnableRemoteAccess() encountered and Error")
                self.WeMoAppLog.LogException()
                
    def _verifySetupEdgeConditions_AndSetup(self,appIdentifier,WeMoSerialNumber,WeMoSmartPhoneSSIDName,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity,WeMoDeviceType,wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=True,uncheckRememberWiFiSettings=False,verifyWrongPasswordScenario = False,verifyHomeRouterOffScenario = False,verifyWeMoOffScenario = False,email_opt_screen = False,want_email_promos = False,setup = True):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param WeMoSmartPhoneSSIDName: The Wemo Smart Phone SSID Name
        @type WeMoSmartPhoneSSIDName: String
        @param WeMoFriendlyName: The Wemo Friendly Name 
        @type WeMoFriendlyName: String
        @param routerSSID: The router ssid to which the wemo has to be set up 
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network 
        @type routerWirelessPassword: String
        @param WeMoDeviceType: The WeMo Device Type 
        @type WeMoDeviceType: String
        """
        try:
            # self._unlockIOS()
            # assert self.result == True
            
            if forgetwififromsettingspage == True:
                pass
                # self._forgetAllWifiNetworkfromWifiSelectionPage()
                # assert self.result == True
                # self._goToTheSettingsPageandSelectTheWifi(routerSSID,routerWirelessPassword)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Continue without forgetting the Wifi on the Settings-Wifi page.')
            
            # Trials = 0
            # while Trials < 3:
            #     Trials = Trials + 1
            #     if routersecurity in ["WPA2","WPA2PSK"]:
            #         self._goToTheSettingsPageandSelectTheWifi(routerSSID,routerWirelessPassword)
            #
            #     if self.result == True:
            #         break

            # Trials = 0
            # while Trials < 3:
            #     Trials = Trials + 1
            self._selectWeMoSSIDInSettingsPage(WeMoSmartPhoneSSIDName)
            assert self.result == True
                    # break

            self._homeScreen()
            assert self.result == True

            self._launchWemoApp(appIdentifier)
            assert self.result == True

            for i in range(5):
                # if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Safety Instructions"):
                #     if self.WeMoAppLog is not None:
                #         self.WeMoAppLog.Info("Click On Accept and Proceed")
                #     self.ExperitestClient.click("NATIVE", "accessibilityLabel=Accept",0,1)
                #     self.result = True
                    
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise",0):
                    self.result = True
                    break
                else:
                    time.sleep(self.delay*3)
            #     if appLaunchTries == 2:
            #         if self.WeMoAppLog is not None:
            #             self.WeMoAppLog.Error("Tried launching the App but not able to see the right page.Aborting!!!")
            #         self._homeScreen()
            #         time.sleep(self.delay)
            #         self.result = False
            #         break
            #     if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Get Started")) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=ic_setupquestion.png")) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityIdentifier=Wemo_Navigation_Logo")) or (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Safety Instructions")):
            #         appLaunchTries = appLaunchTries + 1
            #         self._homeScreen()
            #         time.sleep(self.delay)
            #         self._searchForAppAndClick("Settings")
            #         assert self.result == True
            #         self._openWifiPage()
            #         assert self.result == True
            #         self._selectWeMoSSIDInSettingsPage(WeMoSmartPhoneSSIDName)
            #         assert self.result == True
            #         self._homeScreen()
            #         assert self.result == True
            #         self._launchWemoApp(appIdentifier)
            #         assert self.result == True
            # assert self.result == True

            # self._verifyDefaultWemoFriendlyNameOnPersonalizePage(WeMoFriendlyName,WeMoDeviceType)
            # assert self.result == True
            #
            # self._verifyDefaultEmailAddressOnPersonalizePage()
            # assert self.result == True

            self._enterWemoFriendlyName("Lets try entering a text more than 30 characters.",WeMoSmartPhoneSSIDName,WeMoDeviceType)
            assert self.result == True

            self._closeDeviceKeyboard()
            
            self._clickOnPersonalizeButton(verify_email=False)
            assert self.result == True
            
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Please enter a name 30 characters or less that uses only letters, numbers, spaces, dashes or underscores.']/../../..//*[@text='OK']",0):
                self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Please enter a name 30 characters or less that uses only letters, numbers, spaces, dashes or underscores.']/../../..//*[@text='OK']",0,1)

            self._enterWemoFriendlyName("lets:*-;/\}{+-try:it",WeMoSmartPhoneSSIDName,WeMoDeviceType)
            assert self.result == True
            
            self._closeDeviceKeyboard()
            
            self._clickOnPersonalizeButton(verify_email=False)
            assert self.result == True

            
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityLabel='Please enter a name 30 characters or less that uses only letters, numbers, spaces, dashes or underscores.']/../../..//*[@text='OK']",0):
                self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityLabel='Please enter a name 30 characters or less that uses only letters, numbers, spaces, dashes or underscores.']/../../..//*[@text='OK']",0,1)

            # entering a sensible name so that we can proceed
            self._enterWemoFriendlyName(WeMoFriendlyName,WeMoSmartPhoneSSIDName,WeMoDeviceType)
            assert self.result == True

            self._closeDeviceKeyboard()

            if verifyWrongPasswordScenario:
                self._uncheckRememberWiFiSettingsInPersonalizePage()
                assert self.result == True
                self._clickOnPersonalizeButton(verify_email=False)
                assert self.result == True
                self._selectTheSSIDInTheNetworkListInWemoApp(routerSSID)
                assert self.result == True
                self._enterWirelessSecurityPasswordInWemoApp(routerSSID,"aWrongPassword")
                assert self.result == True
                self._clickOnJoinButtonToAssociateWemoToRouter()
                assert self.result == True
                time.sleep(self.delay)
                if self._checkForEnterPasswordAgain():
                    self._clickOnOKButtonForEnterPasswordAgainPopUp()
                    assert self.result == True

            if verifyHomeRouterOffScenario:
                self._clickOnPersonalizeButton(verify_email=False)
                assert self.result == True
                self._verifyWemoCouldNotConnectToWiFiPopUp()
                assert self.result == True
                self._checkForWeMoSetupScreen()
                assert self.result == True
                # returning so that we can turn on the controller and go ahead with setting up the wemo device
                return

            if verifyWeMoOffScenario:
                self._clickOnPersonalizeButton(verify_email=False)
                assert self.result == True
                # returning so that we can turn on the controller and go ahead with setting up the wemo device
                return

            if setup:
                self.setupWemoApp(appIdentifier,WeMoSerialNumber,WeMoSmartPhoneSSIDName,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity,WeMoDeviceType,wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=True,uncheckRememberWiFiSettings=False,email_opt_screen = False,want_email_promos = False)
            # assert self.result == True
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:    
                self.WeMoAppLog.Error("Setup of the WeMo:%s with the Router:%s whose password is:%s failed."%(WeMoSmartPhoneSSIDName,routerSSID,routerWirelessPassword))
                self.WeMoAppLog.Error("The method setupWemoApp() encountered an Error")
                self.WeMoAppLog.LogException()
        
    def verifyEmailOptIn(self,its_ok):
        try:
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying email opt in scenarios")
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Email']") and self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityIdentifier='icCheckmarkOn.png']"):
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("The app is in email opt in screen and the default state of opt_in is checked")
                self.result = True
            else:
                self.result = False
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Error("The app is not in email opt in screen or the opt_in is not checked by default")
                raise Exception("The app is not in email opt in screen or the opt_in is not checked by default")
            # vaidating the scenarios
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Info("Verifying email opt in scenarios.Setup/OPtInEmail/7/8/16")
                self.WeMoAppLog.Info("Entering blank email.")
            for email_to_test in ["($&%*","","mynameatgmail.com"]:
                # self.ExperitestClient.runNativeAPICall("NATIVE","xpath=//*[@class='UITextFieldLabel']",0,"invokeMethod:'{\"selector\":\"setText:\",\"arguments\":[\"%s\"]}'"%email_to_test)
                self.ExperitestClient.elementSendText("NATIVE","xpath=//*[contains(@class,'UITextField')]",0,email_to_test)
                self._closeDeviceKeyboard()
                self._verifyElementFound("NATIVE","xpath=//*[@text='Next']",0)
                self.ExperitestClient.click("NATIVE","xpath=//*[@text='Next']")
                if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Email']") and self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='It is also OK to contact me about promotions, new products and beta tests.']"):
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Email opt in scenarios PASSED for email <%s>"%email_to_test)
                    self.result = True
                else:
                    self.result = False
                    if self.WeMoAppLog != None:
                        self.WeMoAppLog.Info("Email opt in scenarios FAILED for email %s"%email_to_test)
            # verifying if user can opt out and proceed
            if not its_ok:
                if self.WeMoAppLog != None:
                    self.WeMoAppLog.Info("Unchecking the opt_in checkbox.Verifying Setup/OPtInEmail/15")
                self._verifyElementFound("NATIVE","xpath=//*[@accessibilityIdentifier='icCheckmarkOn.png']",0)
                self.ExperitestClient.click("NATIVE","xpath=//*[@accessibilityIdentifier='icCheckmarkOn.png']")
                assert self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@accessibilityIdentifier='icCheckcircleOff']")
            # verifying with a valid email id
            self.ExperitestClient.elementSendText("NATIVE","xpath=//*[contains(@class,'UITextField')]",0,"santosh.sharma@belkin.com")
            self._verifyElementFound("NATIVE","xpath=//*[@text='Next']",0)
            self.ExperitestClient.click("NATIVE","xpath=//*[@text='Next']")
            self.result = True
        except:
            self.exception_msg = "Raising the exception Email opt in can not be verified."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method verifyEmailOptIn() encountered and Error")
                self.WeMoAppLog.LogException()

    def _handleDimmerSetupScreens(self):
        try:
            self.result = False
            self._verifyAndClickTheElement("NATIVE","xpath=//*[@text='Next']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("NATIVE","xpath=//*[@text='Test']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("NATIVE","xpath=//*[@text='Yes']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("NATIVE","xpath=//*[@text='Test']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("NATIVE","xpath=//*[@text='Yes']")
            time.sleep(self.delay*3)
            self._verifyAndClickTheElement("NATIVE","xpath=//*[@text='Next']")
            self.result = True
        except:
            self.exception_msg = "Raising the exception as setup screens for dimmer can not be verified."
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _handleDimmerSetupScreens() encountered and Error")
                self.WeMoAppLog.LogException()

    def setupWemoApp(self,appIdentifier,WeMoSerialNumber,WeMoSmartPhoneSSIDName,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity,WeMoDeviceType,wifiinterface = "Wireless Network Connection",forgetwififromsettingspage=True,uncheckRememberWiFiSettings=False,email_opt_screen = False,want_email_promos = False):
        """
        Setup the WeMo Device with the Router
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param WeMoSmartPhoneSSIDName: The Wemo Smart Phone SSID Name
        @type WeMoSmartPhoneSSIDName: String
        @param WeMoFriendlyName: The Wemo Friendly Name 
        @type WeMoFriendlyName: String
        @param routerSSID: The router ssid to which the wemo has to be set up 
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network 
        @type routerWirelessPassword: String
        @param WeMoDeviceType: The WeMo Device Type 
        @type WeMoDeviceType: String
        """
        try:
            email_opt_feature = True
            # self._unlockIOS()
            # assert self.result == True
            
            if forgetwififromsettingspage == True:
                self._forgetAllWifiNetworkfromWifiSelectionPage()
                assert self.result == True
                self._goToTheSettingsPageandSelectTheWifi(routerSSID,routerWirelessPassword)
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Continue without forgetting the Wifi on the Settings-Wifi page.')

            self._selectWeMoSSIDInSettingsPage(WeMoSmartPhoneSSIDName)
            assert self.result == True

            self._homeScreen()
            assert self.result == True
            self._launchWemoApp(appIdentifier)
            assert self.result == True
            for i in range(5):
                if self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Personalise",0):
                    self.result = True
                    break
                else:
                    time.sleep(self.delay*10)
            self._verifyDefaultWemoFriendlyNameOnPersonalizePage(WeMoFriendlyName,WeMoDeviceType)
            assert self.result == True
            self._verifyDefaultEmailAddressOnPersonalizePage()
            assert self.result == True
            self._enterWemoFriendlyName(WeMoFriendlyName,WeMoSmartPhoneSSIDName,WeMoDeviceType)
            assert self.result == True
            self._closeDeviceKeyboard()
            self._verifyRememberWiFiSettingsCheckedInPersonalizePage()
            assert self.result == True
            if uncheckRememberWiFiSettings == True:
                self._uncheckRememberWiFiSettingsInPersonalizePage()
                assert self.result == True
            self._clickOnPersonalizeButton(verify_email=False)
            assert self.result == True
            # handling the setup screens specific to dimmer setup
            if WeMoDeviceType == "Dimmer":
                self._handleDimmerSetupScreens()
                assert self.result == True
            if email_opt_feature:
                if email_opt_screen:
                    self.verifyEmailOptIn(want_email_promos)
                    assert self.result == True
            time.sleep(self.delay*6)
            for i in range(3):
                if not email_opt_screen:
                     # hack: as there are scenarios where we will not be able to know the status of app(fresh or old) and the sequence of test cases to determine whether the email opt in screen
                    if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Email']"):  # will appear or not; however email opt in feature will be tested in setup cases 89 and 90
                        self.verifyEmailOptIn(want_email_promos)
                        break
            self.ExperitestClient.waitForElement("NATIVE", "xpath=//*[@text='Select Your Wi-Fi']",0,3*60*1000) # waiting for the site survey to get completed
            if uncheckRememberWiFiSettings or self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Select Your Wi-Fi']"):# hack
                self._selectTheSSIDInTheNetworkListInWemoApp(routerSSID)
                assert self.result == True
                self._enterWirelessSecurityPasswordInWemoApp(routerSSID,routerWirelessPassword)
                assert self.result == True
                self._clickOnJoinButtonToAssociateWemoToRouter()
                assert self.result == True
            # self._checkForRemoteAccess(routerSSID,routerWirelessPassword,WeMoSmartPhoneSSIDName,appIdentifier,WeMoFriendlyName,WeMoSerialNumber,wifiinterface)
            time.sleep(self.delay*240)
            self._closeApplication(appIdentifier)
            assert self.result == True
            self._goToTheSettingsPageandSelectTheWifi(routerSSID,routerWirelessPassword)
            # ssdp.discover(WeMoSerialNumber,"urn:Belkin:service:basicevent:1")
            # self.WeMoIP = ssdp.ipOfWeMoDevice
            # if self.WeMoIP == None:
            #     self.result = False
            #     if self.WeMoAppLog != None:
            #         self.WeMoAppLog.Info("The WeMo device = %s is not paired to the network , Failed to setup the device "%WeMoDeviceType)
            #         raise Exception("The WeMo device = %s is not paired to the network , Failed to setup the device "%WeMoDeviceType)
            # else:
            #     if self.WeMoAppLog != None:
            #         self.result = True
            #         self.WeMoAppLog.Info("The WeMo device = %s is successfully paired to the home network "%WeMoDeviceType)
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            self.result = False
            if self.WeMoAppLog is not None:    
                self.WeMoAppLog.Error("Setup of the WeMo:%s with the Router:%s whose password is:%s failed."%(WeMoSmartPhoneSSIDName,routerSSID,routerWirelessPassword))
                self.WeMoAppLog.Error("The method setupWemoApp() encountered an Error")
                self.WeMoAppLog.LogException()
    
    def discoverWeMo(self,appIdentifier,WeMoFriendlyName,routerSSID,routerWirelessPassword,routersecurity):
        """
        Dsicover the WeMo on the WeMo App
        @param appIdentifier: The app identifier name
        @type appIdentifier: String
        @param WeMoFriendlyName: The Wemo Friendly Name 
        @type WeMoFriendlyName: String
        @param routerSSID: The router ssid to which the wemo has to be set up 
        @type routerSSID: String
        @param routerWirelessPassword: The Wireless Password for the Wireless Network 
        @type routerWirelessPassword: String
        """
        try:
            self._unlockIOS()
            assert self.result == True  
            Trials = 0
            while Trials < 3:
                Trials = Trials + 1
                if routersecurity in ["WPA2","WPA2PSK"]:
                    self._goToTheSettingsPageandSelectTheWifi(routerSSID,routerWirelessPassword)
                if self.result == True:
                    break
            self._homeScreen()
            assert self.result == True
            self._launchWemoApp(appIdentifier)
            assert self.result == True
            self._checkForFirmwareUpgradePopUpAndDoNotUpdateTheFirmware()
            assert self.result == True
            self._handleTokenErrorPopUp()
            assert self.result == True
            self._checkForWeakSignal()
            assert self.result == True
            self._verifyWemoDeviceInDeviceListContainer(WeMoFriendlyName)
            assert self.result == True
            self._homeScreen()
            assert self.result == True
            self.result = True
        except:
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("Discover of the WeMo:%s with the Router:%s whose password is:%s failed."%(WeMoFriendlyName,routerSSID,routerWirelessPassword))
                self.WeMoAppLog.Error("The method discoverWeMo() encountered an Error")
                self.WeMoAppLog.LogException() 
                
                
    def _verifyRulesLog(self):
        """
        Verify Rules log
        """
        self.result = None
        self.exception_msg = None
        try:
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Info("Check logs in rules detail page")
            self._isAppLaunched()
            assert self.result == True            
            self.ExperitestClient.swipe2("Down", 500, 0)
            self._verifyElementFound("NATIVE", "accessibilityLabel=Log",0)    
            if (self.result==True):
                time.sleep(self.delay)
                self._verifyElementFound("NATIVE", "xpath=//*[contains(@text,'event')]",0)
                if (self.result==True):
                    self.result = True
                else:
                    self.exception_msg = "Failed identify notification events"
                    if self.WeMoAppLog is not None:
                        self.WeMoAppLog.Error('Raising the Exception as the element:"xpath=//*[contains(@text,event)]" could not be found.')
                    raise Exception('Raising the Exception as the element:"xpath=//*[contains(@text,event)]" could not be found.')
        except:
            self._screenCapture()
            self._getTheIOSDeviceLogs()
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Cancel")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Cancel")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Back")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "nclick:accessibilityLabel=Back")
                time.sleep(self.delay)
            if (self.ExperitestClient.isElementFound("NATIVE", "accessibilityLabel=Devices")):
                time.sleep(self.delay)
                self.ExperitestClient.click("NATIVE", "accessibilityLabel=Devices")
                time.sleep(self.delay)
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog is not None:
                self.WeMoAppLog.Error("The method verifyRulesLog() encountered and Error")
                self.WeMoAppLog.LogException()


################################
#### functions for over temp###
###############################
    def _verify_overtempbanner_problemdetected(self):
        self.result == True
        # self.result = None
        # try:
        #     if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Problem Detected' and @top='true']"):
        #         if self.WeMoAppLog is not None:
        #             self.WeMoAppLog.Info('Over Temp Problem Deteted banner found.')
        #         self.result = True
        #     else:
        #         if self.WeMoAppLog is not None:
        #             self.WeMoAppLog.Error('Over Temp Problem Deteted banner not found.')
        #         raise Exception('Over Temp Problem Deteted banner not found.')
        # except:
        #     self.exception_msg = "Raising the Exception as problem detected banner could not be found."
        #     self._screenCapture()
        #     self.result = False
        #     self._getTheIOSDeviceLogs()
        #     self._homeScreen()
        #     self.result = False
        #     if self.WeMoAppLog != None:
        #         self.WeMoAppLog.Error("The method _verify_overtempbanner_problemdetected() encountered and Error")
        #         self.WeMoAppLog.LogException()

    def _verify_overtempbanner_problempersists(self):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,' still a problem.') and @top='true']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('There is still a Problem Deteted banner found.')
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('There is still a Problem banner not found.')
                raise Exception('There is still a Problem banner not found.')


        except:
            self.exception_msg = "Raising the Exception as problem persists banner could not be found."
            self._screenCapture()
            self.result = False
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verify_overtempbanner_problempersists() encountered and Error")
                self.WeMoAppLog.LogException()

    def _click_overtempbanner_problempersists(self):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[contains(@text,' still a problem.') and @top='true']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('click on there is still a problem banner.')
                    self.ExperitestClient.click("NATIVE","xpath=//*[contains(@text,' still a problem.') and @top='true']")
                    time.sleep(self.delay)
                self.result = True

        except:
            self.exception_msg = "Raising the Exception as problem persists banner could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _click_overtempbanner_problempersists() encountered and Error")
                self.WeMoAppLog.LogException()

    def _click_overtempbanner_problemdetected(self,wemoFriendlyName):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s']/..//*[@text='Cooling off...']"%wemoFriendlyName):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('click on over temp banner.')
                    # self.ExperitestClient.click("NATIVE","xpath=//*[@text='Problem Detected' and @top='true']")
                    # self.ExperitestClient.clickIn2("NATIVE","xpath=//*[@text='%s']/..//*[@text='Cooling off...']"%wemoFriendlyName,0,"LEFT", "NATIVE","xpath=//*[@class='UIImageView']")
                    self.ExperitestClient.clickCoordinate(72, 530)
                    time.sleep(self.delay)
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Over Temp Problem Deteted banner not found.')
                raise Exception('Over Temp Problem Deteted banner not found.')

        except:
            self.exception_msg = "Raising the Exception as problem delected banner could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _click_overtempbanner_problemdetected() encountered and Error")
                self.WeMoAppLog.LogException()

    def _verify_overtemp_tile(self,wemoFriendlyName):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='%s']/..//*[@text='Cooling off...']"%wemoFriendlyName):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('Over temp tile status verified')
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Over temp tile status not found.')
                raise Exception('Over temp tile status found.')

        except:
            self.exception_msg = "Raising the Exception as problem delected banner could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _verify_overtemp_tile() encountered and Error")
                self.WeMoAppLog.LogException()

    def _dismiss_overtemp(self):
        self.result = None
        try:
            if self.ExperitestClient.isElementFound("NATIVE","xpath=//*[@text='Dismiss']"):
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Info('click on Dismiss button.')
                    self.ExperitestClient.click("NATIVE","xpath=//*[@text='Dismiss']")
                    time.sleep(self.delay)
                self.result = True
            else:
                if self.WeMoAppLog is not None:
                    self.WeMoAppLog.Error('Dismiss not found.')
                raise Exception('Dismiss not found.')
        except:
            self.exception_msg = "Raising the Exception as dismiss button could not be clicked."
            self._screenCapture()
            self.result = False
            self._getTheIOSDeviceLogs()
            self._homeScreen()
            self.result = False
            if self.WeMoAppLog != None:
                self.WeMoAppLog.Error("The method _dismiss_overtemp() encountered and Error")
                self.WeMoAppLog.LogException()




if __name__ == "__main__":
    i = IOSWeMoApp_Generic("ios_app:iPhone",8889)
    # i._isWeMoTurnedOff("Wemo_042")
    # i = IOSWeMoApp_Generic("ios_app:iPhone 5C",8889)
    # from Logger import *
    # log = Logger("Santosh.log")
    # i.setLogger(log)
    # i._getTheWemoActivationPin_IFTTT()
    #i._launchWemoApp("WeMo")
    #i._clickOnOKButtonForAlertBoxes()
    #i._handleTokenErrorPopUp()
    #i._clickOnRulesTab()
    #i._closeApplication('com.belkin.wemostag4')
    #i._homeScreen()
    #i._isAppLaunched()
    # i._clickOnConnectToNestTab()
    # i._selectTheActionForWeMo_NestRule("WeMo Insight","on")
    # i._selectTheNestDevice_NestRule('Dining Room Thermostat','Home')
    # i._clickOnNest_HomeAwayRule()
    # i._clickOnPersonalizeButton()
    # i._selectTheSSIDInTheNetworkListInWemoApp("AutoIOS")
    #i._goToTheSettingsPageandSelectTheWifi('AutoIOS','belkin123')
    #i._clickOtherTabOnWifiPage()
    #i._enterTheNetworkName('AutoIOS')
    #i._setTheNetworkSecurity()
    #i._enterTheNetworkPassword('belkin123')
    #i._joinTheNetwork()
    #i._openWifiPage()
    #i._syncTheTimeActualLocation('2016')
    #i._syncTheTimeOnSmartDevice('2016','Tomorrow')
    # i._clickOnRemoteAccessTab()
    # i._getTheFriendlyNameOfWeMoFromTheHardwareInfoPageOfTheWeMo()
    # i._isAppLaunched()
    # i._enterWemoFriendlyName('WeMo_15B', 'WeMoSmartPhoneSsidName')
    # i._uncheckRememberWiFiSettingsInPersonalizePage()
    # i._clickOnPersonalizeButton()
    # i._selectTheSSIDInTheNetworkListInWemoApp("AutoIOS")
    # i._enterWirelessSecurityPasswordInWemoApp("AutoIOS", "belkin123")
    # i._clickOnJoinButtonToAssociateWemoToRouter()
    # i._checkForWeMoConnectivityLost()
    # i._rebootSmartDevice()
    # i._uncheckRememberWiFiSettingsInPersonalizePage()

    #i._createARule_InWeMoApp(RULE_TYPE='MOTION_RULE',MOTION_TRIGGER_FROM='WeMo_CD3',DEVICES_IN_NETWORK=['WeMo_34D','WeMo_040','WeMo_2DF'],ACTION='on then',TRIGGER='1 minutes',START_TIME="5:28",END_TIME="17:28",RULE_NAME="Simple Timer Rule",DAYS=['Monday'])
    #i._createARule_InWeMoApp(RULE_TYPE='TIMER_RULE',DEVICES_IN_NETWORK=['WeMo_2DF'],ACTION='on until time',START_TIME="5:28",END_TIME="17:28",RULE_NAME="Simple Timer Rule",DAYS=['Monday'])
    #i._createARule_InWeMoApp(RULE_TYPE='AUTO_OFF_RULE',DEVICES_IN_NETWORK=['WeMo_6BB','WeMo_058','WeMo_040','WeMo_34D','WeMo_087'],START_TIME="5:28",END_TIME="17:28",RULE_NAME="AutoOffTimer",AUTO_OFF_TIME_INTERVEL="5 m")
    ##i._verifyTheTimeOnTheSmartPhonewithRulesetTime("19:55")
    #i.verifyRulesLog()
    #i._checktheRuleStatusOnRulesPage("Insight-APNS","Currently Active")
    #DEVICES_IN_SET1=['WeMo_34D']
    #i._createARule_InWeMoApp(RULE_TYPE='MOTION_RULE',MOTION_TRIGGER_FROM='WeMo_CD3',DEVICES_IN_NETWORK=['WeMo_2DF','WeMo_872','WeMo_EDB'],ACTION='off',START_TIME="10:00",END_TIME="11:00",RULE_NAME="Drawing Room Sensor",DAYS=['Tuesday'])
    #i._deleteOldRulesFromRulesPage()
    #i._createARule_InWeMoApp(RULE_TYPE='AWAY_MODE_RULE',DEVICES_IN_NETWORK=['WeMo_2DF'],START_TIME="00:00",END_TIME="24:00",RULE_NAME="Away rule")
    #i._goToTheRulesDetailPageOfARule("Insight-APNS")
    #i._verifyRuleisDisabled("New")
    #i._verifyTheRandomnessofAwayModeRule(60,devices=['WeMo_2DF','WeMo_040'])
    #i._isWeMoTurnedOff('WeMo_2DF')
    #i._isWeMoTurnedOn('WeMo_2DF')
    # i._verifyDefaultWemoFriendlyNameOnPersonalizePage('WeMo_ECE', 'Switch')
    # i._verifyDefaultEmailAddressOnPersonalizePage()
    # i._verifyRememberWiFiSettingsCheckedInPersonalizePage()
    # i._uncheckRememberWiFiSettingsInPersonalizePage()
    # i._goToTheSettingsPageandSelectTheWifi("AutoIOS", "belkin123")
    # i._clickOtherTabOnWifiPage()
    # i._checkAndEnableRemoteAccess("WeMo", "AutoIOS","belkin123")
    # i._launchWemoApp("WeMo")
    # i._clickOnRemoteAccessTab()
    # i._forgetAllWifiNetworkfromWifiSelectionPage()
    # i._launchInstrumentedBrowser()
    # i._launchIFTTTLoginPage()
    # i._loginToIFTTTPage("santosh.sharma@belkin.com", "123456")
    # i._launchIFTTTLoginPage()
    # i._deactivateWeMoChannels()
    # i._sendText("{BKSP}")
    # i._sendText("Jhon Doe")
    # i._clearText("xpath=//*[@accessibilityLabel='abc@gmail.om']")
    # i._turnOffWemo("WeMo_ECE")
    # i._scrollUpTheScreen()
    # i._scrollDownTheScreen()
    # i.setupWemoApp("wemo",'221250K0100ECF','WeMo.Switch.ECF','WeMo_ECF','AutoIOS','belkin123','WPA2','Switch','Wireless Network Connection',False,False,False,False)
    # i._uninstallWemoApp('com.belkin.wemostag4')
    # i._uncheckRememberWiFiSettingsInPersonalizePage()
    # i._isWeMoTurnedOn("WeMo_BE9")
    # i._closeApplication("com.belkin.wemostag4")
    # i._homeScreen()
    # i._syncTheTimeOnSmartDevice("2016","Tomorrow")
    # i._createARule_InWeMoApp(RULE_TYPE='AUTO_OFF_RULE',DEVICES_IN_NETWORK=['WeMo_ECE', 'WeMo_51D'],START_TIME="15:40",END_TIME="15:45",RULE_NAME="AutoOffTimer",AUTO_OFF_TIME_INTERVEL="5 m")
    # i._createARule_InWeMoApp(RULE_TYPE='TIMER_RULE',DEVICES_IN_NETWORK=['WeMo_ECE','WeMo_51D'],ACTION='on until time',START_TIME="15:50",END_TIME="15:55",RULE_NAME="Simple Timer Rule123",DAYS=['Monday'])
    # i._createARule_InWeMoApp(RULE_TYPE='MOTION_RULE',MOTION_TRIGGER_FROM='WeMo_02F',DEVICES_IN_NETWORK=['WeMo_ECE','WeMo_51D'],ACTION='on then',TRIGGER='1 minutes',START_TIME="17:40",END_TIME="17:50",RULE_NAME="Simple M Rule",DAYS=['Monday'])
    # i._createARule_InWeMoApp(RULE_TYPE='AWAY_MODE_RULE',DEVICES_IN_NETWORK = ['WeMo_ECE','WeMo_51D'],START_TIME="17:40",END_TIME="17:50",RULE_NAME="On Vacation ")
    # i._selectTheWeMo_AwayModeRule("WeMo_ECE")
    # i._searchForAppAndClick("Settings")
    # i._clickOnWithMotion_NotificationRule()
    # i._selectTheMotionInNotificationRulePage_NotificationRule("WeMo_02F")
    # i._clickOnWhenTab_NotificationRule()
    # i._sensingAllDayOff_NotificationRule()
    # i._clickOnStartTimeTabOfWhenRulePage_MotionRule()
    # i._setTheTimeInWhenPage_SimpleAndTimerRule("8","58")
    # i._clickOnHowOftenTabOfNotificationRulePage_NotificationRule()
    # i._selectTheTimeIntervalForMotionInHowOftenPage_NotificationRule("5 min")
    # i._clickOnMessageTabOfNotificationRulePage_NotificationRule()
    # i._setTheMessageInMessagePage_NotificationRule("Motion Detected By Sensor")
    # i._createANameOfRule_NotificationRule("Sensor-APNS")
    # i._clickOnSensingPower_NotificationRule()
    # i._checktheRuleStatusOnRulesPage("New Insight Notification Rule","Currently Active")
    # i._syncTheTimeActualLocation("2016")
    # i._verifyWithMotion_NotificationRule()
    # i._launchWemoApp("wemo")
    # i._editTheNameOfWemo("WeMoSmartPhoneSsidName","WeMo_51D","Santosh")
    i._click_overtempbanner_problemdetected("Wemo_042")